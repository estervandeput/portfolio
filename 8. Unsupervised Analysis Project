{
 "cells": [
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "<hr style=\"height:.9px;border:none;color:#333;background-color:#333;\" />\n",
    "<hr style=\"height:.9px;border:none;color:#333;background-color:#333;\" />\n",
    "\n",
    "<br><h2>A1 : Unsupervised Data Analysis</h2>\n",
    "\n",
    "Ester Van de Put<br>\n",
    "Business Analytics, Hult International Business School<br>\n",
    "DAT-5329 | Introduction to Machine Learning & AI<br>\n",
    "Chase Kusterer - Faculty of Analytics<br>\n",
    "<br><br>\n",
    "\n",
    "<hr style=\"height:.9px;border:none;color:#333;background-color:#333;\" />\n",
    "<hr style=\"height:.9px;border:none;color:#333;background-color:#333;\" />\n",
    "\n",
    "<br><h2> Introduction </h2>\n",
    "<br><br>\n",
    "This analysis based on the \"Usage and Engagement Pattern for Facebook Live Seller in Thailand\" (Dehouche, 2020) aims to explore the impact of video content on social media engagement, specifically focusing on Facebook. As social media highly influence the marketing landscape in Thailand, understanding the dynamics of video content engagement is, therefore, very important for advising clients effectively. Our objective is to investigate whether videos indeed lead to higher engagement compared to other forms of content, such as images or text posts. \n",
    "\n",
    "In this analysis, I will delve into various metrics, including reactions (likes, loves, etc.), to assess the overall engagement levels and specific reactions elicited by video content. Additionally, I will employ principal component analysis (PCA) to derive meaningful insights from the available social media metrics, identify clusters within the data, and develop logistic regression models to predict video content based on different sets of features. Through this analysis, my goal is to provide actionable recommendations to our clients regarding their social media content strategy, particularly focusing on the role of video content in maximizing engagement and reach."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "<hr style=\"height:.9px;border:none;color:#333;background-color:#333;\" /><br>\n",
    "\n",
    "<strong> Import Packages</strong><br>\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 1,
   "metadata": {},
   "outputs": [],
   "source": [
    "########################################\n",
    "# importing packages\n",
    "########################################\n",
    "import numpy                 as np  # mathematical essentials\n",
    "import pandas                as pd  # data science essentials\n",
    "import matplotlib.pyplot     as plt # fundamental data visualization\n",
    "import seaborn               as sns # enhanced visualizations\n",
    "\n",
    "# packages for unsupervised learning\n",
    "from sklearn.preprocessing   import StandardScaler      # standard scaler\n",
    "from sklearn.decomposition   import PCA                 # pca\n",
    "from scipy.cluster.hierarchy import dendrogram, linkage # dendrograms\n",
    "from sklearn.cluster         import KMeans              # k-means clustering\n",
    "from sklearn.linear_model    import LogisticRegression\n",
    "from sklearn.metrics         import roc_auc_score\n",
    "\n",
    "# importing libraries\n",
    "\n",
    "from sklearn.model_selection import train_test_split        # train-test split\n",
    "from sklearn.metrics import confusion_matrix, roc_auc_score # results analysis\n",
    "import sklearn.linear_model                                 # classification modeling"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "<hr style=\"height:.9px;border:none;color:#333;background-color:#333;\" /><br>\n",
    "\n",
    "<strong>Run the following code to load the dataset and set print options.</strong><br>"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "metadata": {
    "scrolled": true
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>status_id</th>\n",
       "      <th>status_type</th>\n",
       "      <th>time_published</th>\n",
       "      <th>num_comments</th>\n",
       "      <th>num_shares</th>\n",
       "      <th>num_likes</th>\n",
       "      <th>num_loves</th>\n",
       "      <th>num_wows</th>\n",
       "      <th>num_hahas</th>\n",
       "      <th>num_sads</th>\n",
       "      <th>num_angrys</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>1</td>\n",
       "      <td>video</td>\n",
       "      <td>2018-04-22 06:00:00</td>\n",
       "      <td>512</td>\n",
       "      <td>262</td>\n",
       "      <td>432</td>\n",
       "      <td>92</td>\n",
       "      <td>3</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>2</td>\n",
       "      <td>photo</td>\n",
       "      <td>2018-04-18 03:22:00</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>204</td>\n",
       "      <td>9</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>3</td>\n",
       "      <td>video</td>\n",
       "      <td>2018-04-18 00:24:00</td>\n",
       "      <td>614</td>\n",
       "      <td>72</td>\n",
       "      <td>418</td>\n",
       "      <td>70</td>\n",
       "      <td>10</td>\n",
       "      <td>2</td>\n",
       "      <td>0</td>\n",
       "      <td>3</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>4</td>\n",
       "      <td>photo</td>\n",
       "      <td>2018-04-11 04:53:00</td>\n",
       "      <td>9</td>\n",
       "      <td>1</td>\n",
       "      <td>167</td>\n",
       "      <td>3</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>5</td>\n",
       "      <td>photo</td>\n",
       "      <td>2018-04-09 02:06:00</td>\n",
       "      <td>4</td>\n",
       "      <td>0</td>\n",
       "      <td>213</td>\n",
       "      <td>5</td>\n",
       "      <td>4</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>5</th>\n",
       "      <td>6</td>\n",
       "      <td>photo</td>\n",
       "      <td>2018-04-08 05:10:00</td>\n",
       "      <td>4</td>\n",
       "      <td>2</td>\n",
       "      <td>305</td>\n",
       "      <td>6</td>\n",
       "      <td>2</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>6</th>\n",
       "      <td>7</td>\n",
       "      <td>photo</td>\n",
       "      <td>2018-04-05 09:23:00</td>\n",
       "      <td>11</td>\n",
       "      <td>0</td>\n",
       "      <td>335</td>\n",
       "      <td>10</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>7</th>\n",
       "      <td>8</td>\n",
       "      <td>video</td>\n",
       "      <td>2018-03-23 07:09:00</td>\n",
       "      <td>166</td>\n",
       "      <td>36</td>\n",
       "      <td>192</td>\n",
       "      <td>28</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>8</th>\n",
       "      <td>9</td>\n",
       "      <td>photo</td>\n",
       "      <td>2018-03-20 01:54:00</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>96</td>\n",
       "      <td>0</td>\n",
       "      <td>2</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>9</th>\n",
       "      <td>10</td>\n",
       "      <td>video</td>\n",
       "      <td>2018-03-17 08:07:00</td>\n",
       "      <td>36</td>\n",
       "      <td>14</td>\n",
       "      <td>70</td>\n",
       "      <td>5</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "   status_id status_type      time_published  num_comments  num_shares  num_likes  num_loves  num_wows  num_hahas  num_sads  num_angrys\n",
       "0          1       video 2018-04-22 06:00:00           512         262        432         92         3          1         1           0\n",
       "1          2       photo 2018-04-18 03:22:00             0           0        204          9         0          0         0           0\n",
       "2          3       video 2018-04-18 00:24:00           614          72        418         70        10          2         0           3\n",
       "3          4       photo 2018-04-11 04:53:00             9           1        167          3         0          0         0           0\n",
       "4          5       photo 2018-04-09 02:06:00             4           0        213          5         4          0         0           0\n",
       "5          6       photo 2018-04-08 05:10:00             4           2        305          6         2          0         0           0\n",
       "6          7       photo 2018-04-05 09:23:00            11           0        335         10         1          0         0           0\n",
       "7          8       video 2018-03-23 07:09:00           166          36        192         28         0          1         0           0\n",
       "8          9       photo 2018-03-20 01:54:00             0           0         96          0         2          0         0           0\n",
       "9         10       video 2018-03-17 08:07:00            36          14         70          5         0          0         0           0"
      ]
     },
     "execution_count": 2,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "########################################\n",
    "# loading data and setting display options\n",
    "########################################\n",
    "# loading data\n",
    "fb_live = pd.read_excel('./datasets/facebook_live_data.xlsx')\n",
    "\n",
    "\n",
    "# setting print options\n",
    "pd.set_option('display.max_rows', 500)\n",
    "pd.set_option('display.max_columns', 500)\n",
    "pd.set_option('display.width', 1000)\n",
    "pd.set_option('display.max_colwidth', 100)\n",
    "\n",
    "\n",
    "# checking results\n",
    "fb_live.head(n = 10)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "<hr style=\"height:.9px;border:none;color:#333;background-color:#333;\" /><br>\n",
    "\n",
    "<h2>Part I: Descriptive Statistics of the dataset. </h2>\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "metadata": {
    "scrolled": false
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "<class 'pandas.core.frame.DataFrame'>\n",
      "RangeIndex: 2297 entries, 0 to 2296\n",
      "Data columns (total 11 columns):\n",
      " #   Column          Non-Null Count  Dtype         \n",
      "---  ------          --------------  -----         \n",
      " 0   status_id       2297 non-null   int64         \n",
      " 1   status_type     2297 non-null   object        \n",
      " 2   time_published  2297 non-null   datetime64[ns]\n",
      " 3   num_comments    2297 non-null   int64         \n",
      " 4   num_shares      2297 non-null   int64         \n",
      " 5   num_likes       2297 non-null   int64         \n",
      " 6   num_loves       2297 non-null   int64         \n",
      " 7   num_wows        2297 non-null   int64         \n",
      " 8   num_hahas       2297 non-null   int64         \n",
      " 9   num_sads        2297 non-null   int64         \n",
      " 10  num_angrys      2297 non-null   int64         \n",
      "dtypes: datetime64[ns](1), int64(9), object(1)\n",
      "memory usage: 197.5+ KB\n"
     ]
    }
   ],
   "source": [
    "fb_live.info()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "metadata": {
    "scrolled": true
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Skewness for numerical features:\n",
      " status_id        0.000000\n",
      "num_comments    10.144949\n",
      "num_shares       6.168542\n",
      "num_likes        3.719601\n",
      "num_loves        5.971534\n",
      "num_wows        15.623211\n",
      "num_hahas       16.930415\n",
      "num_sads        17.119842\n",
      "num_angrys      10.586708\n",
      "dtype: float64\n"
     ]
    }
   ],
   "source": [
    "# Calculate skewness for numerical columns only\n",
    "skewness_numerical_features = fb_live.select_dtypes(include=['number']).skew()\n",
    "\n",
    "print(\"Skewness for numerical features:\\n\", skewness_numerical_features)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "**Insights on the skewness of the dataset:**\n",
    "\n",
    "The skewness values for the numerical features in the dataset indicate a strong positive skew, meaning that the distribution of these features is not symmetrical, and the tail is longer on the right side of the distribution. Features like num_hahas, num_sads, and num_wows exhibit exceptionally high skewness, suggesting that most posts receive a low number of these reactions. Still, this would mean that there are a few posts with an unusually high number, which pulls the mean upwards and creates this skew. The closer to zero, like status_id, which makes sense since all data row has a status_id, the more symmetric the distribution is."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>status_id</th>\n",
       "      <th>time_published</th>\n",
       "      <th>num_comments</th>\n",
       "      <th>num_shares</th>\n",
       "      <th>num_likes</th>\n",
       "      <th>num_loves</th>\n",
       "      <th>num_wows</th>\n",
       "      <th>num_hahas</th>\n",
       "      <th>num_sads</th>\n",
       "      <th>num_angrys</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>count</th>\n",
       "      <td>2297.00</td>\n",
       "      <td>2297</td>\n",
       "      <td>2297.00</td>\n",
       "      <td>2297.00</td>\n",
       "      <td>2297.00</td>\n",
       "      <td>2297.00</td>\n",
       "      <td>2297.00</td>\n",
       "      <td>2297.00</td>\n",
       "      <td>2297.00</td>\n",
       "      <td>2297.00</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>mean</th>\n",
       "      <td>1149.00</td>\n",
       "      <td>2016-11-29 12:18:59.921636864</td>\n",
       "      <td>205.16</td>\n",
       "      <td>39.12</td>\n",
       "      <td>221.76</td>\n",
       "      <td>13.05</td>\n",
       "      <td>1.49</td>\n",
       "      <td>0.63</td>\n",
       "      <td>0.25</td>\n",
       "      <td>0.10</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>min</th>\n",
       "      <td>1.00</td>\n",
       "      <td>2012-07-15 02:51:00</td>\n",
       "      <td>0.00</td>\n",
       "      <td>0.00</td>\n",
       "      <td>0.00</td>\n",
       "      <td>0.00</td>\n",
       "      <td>0.00</td>\n",
       "      <td>0.00</td>\n",
       "      <td>0.00</td>\n",
       "      <td>0.00</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>25%</th>\n",
       "      <td>575.00</td>\n",
       "      <td>2016-04-04 00:17:00</td>\n",
       "      <td>0.00</td>\n",
       "      <td>0.00</td>\n",
       "      <td>18.00</td>\n",
       "      <td>0.00</td>\n",
       "      <td>0.00</td>\n",
       "      <td>0.00</td>\n",
       "      <td>0.00</td>\n",
       "      <td>0.00</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>50%</th>\n",
       "      <td>1149.00</td>\n",
       "      <td>2017-11-19 00:59:00</td>\n",
       "      <td>4.00</td>\n",
       "      <td>0.00</td>\n",
       "      <td>61.00</td>\n",
       "      <td>0.00</td>\n",
       "      <td>0.00</td>\n",
       "      <td>0.00</td>\n",
       "      <td>0.00</td>\n",
       "      <td>0.00</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>75%</th>\n",
       "      <td>1723.00</td>\n",
       "      <td>2018-03-06 02:25:00</td>\n",
       "      <td>24.00</td>\n",
       "      <td>5.00</td>\n",
       "      <td>195.00</td>\n",
       "      <td>3.00</td>\n",
       "      <td>1.00</td>\n",
       "      <td>0.00</td>\n",
       "      <td>0.00</td>\n",
       "      <td>0.00</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>max</th>\n",
       "      <td>2297.00</td>\n",
       "      <td>2018-06-13 00:59:00</td>\n",
       "      <td>19013.00</td>\n",
       "      <td>2139.00</td>\n",
       "      <td>4710.00</td>\n",
       "      <td>504.00</td>\n",
       "      <td>252.00</td>\n",
       "      <td>91.00</td>\n",
       "      <td>51.00</td>\n",
       "      <td>12.00</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>std</th>\n",
       "      <td>663.23</td>\n",
       "      <td>NaN</td>\n",
       "      <td>775.25</td>\n",
       "      <td>125.64</td>\n",
       "      <td>446.51</td>\n",
       "      <td>40.30</td>\n",
       "      <td>10.15</td>\n",
       "      <td>2.91</td>\n",
       "      <td>1.73</td>\n",
       "      <td>0.55</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "       status_id                 time_published  num_comments  num_shares  num_likes  num_loves  num_wows  num_hahas  num_sads  num_angrys\n",
       "count    2297.00                           2297       2297.00     2297.00    2297.00    2297.00   2297.00    2297.00   2297.00     2297.00\n",
       "mean     1149.00  2016-11-29 12:18:59.921636864        205.16       39.12     221.76      13.05      1.49       0.63      0.25        0.10\n",
       "min         1.00            2012-07-15 02:51:00          0.00        0.00       0.00       0.00      0.00       0.00      0.00        0.00\n",
       "25%       575.00            2016-04-04 00:17:00          0.00        0.00      18.00       0.00      0.00       0.00      0.00        0.00\n",
       "50%      1149.00            2017-11-19 00:59:00          4.00        0.00      61.00       0.00      0.00       0.00      0.00        0.00\n",
       "75%      1723.00            2018-03-06 02:25:00         24.00        5.00     195.00       3.00      1.00       0.00      0.00        0.00\n",
       "max      2297.00            2018-06-13 00:59:00      19013.00     2139.00    4710.00     504.00    252.00      91.00     51.00       12.00\n",
       "std       663.23                            NaN        775.25      125.64     446.51      40.30     10.15       2.91      1.73        0.55"
      ]
     },
     "execution_count": 5,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# Calculate descriptive statistics for all numerical columns in the dataset\n",
    "descriptive_stats_all_features = fb_live.describe()\n",
    "\n",
    "descriptive_stats_all_features.round(2)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "**Insights about the descriptive statistics summary:**\n",
    "\n",
    "The summary statistics of the dataset indicate a heavily right-skewed distribution for the Facebook engagement metrics like comments, shares, and reactions, which align with the skewness analysis I just performed. Most values are clustered near the lower end of the scale (as indicated by the median being significantly lower than the mean), with a few posts receiving extremely high engagement, hence significantly raising the mean. For example, the 'num_comments' has a mean of 205.16 but a median of just 4, highlighting that while most posts get few comments, there are some with thousands that skew the data. Additionally, the large gap between the 75th percentile and the max values across these metrics reinforces the presence of outliers with exceptionally high engagement numbers."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "<hr style=\"height:.9px;border:none;color:#333;background-color:#333;\" /><br>\n",
    "\n",
    "<strong>QUESTION 2:<br>\n",
    "In terms of reactions (likes, loves, etc.), how do videos perform when compared to other forms of content? Are they leading in terms of total engagement? What about in engagement on specific reactions?"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "metadata": {
    "scrolled": true
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Average Total Engagement for Video Posts: 960.6735218508998\n",
      "Average Total Engagement for Non-Video Posts: 236.14680710994074\n",
      "\n",
      "Average comments - Video Posts: 575.89 \n",
      "Average comments - Non-Video Posts: 15.28\n",
      "Average shares - Video Posts: 111.02 \n",
      "Average shares - Non-Video Posts: 2.29\n",
      "Average likes - Video Posts: 232.99 \n",
      "Average likes - Non-Video Posts: 216.01\n",
      "Average loves - Video Posts: 35.63 \n",
      "Average loves - Non-Video Posts: 1.48\n",
      "Average wows - Video Posts: 2.94 \n",
      "Average wows - Non-Video Posts: 0.75\n",
      "Average hahas - Video Posts: 1.52 \n",
      "Average hahas - Non-Video Posts: 0.17\n",
      "Average sads - Video Posts: 0.44 \n",
      "Average sads - Non-Video Posts: 0.15\n",
      "Average angrys - Video Posts: 0.25 \n",
      "Average angrys - Non-Video Posts: 0.02\n"
     ]
    }
   ],
   "source": [
    "# Filter data for videovs non-video posts\n",
    "video = fb_live[fb_live['status_type'] == 'video'].copy()\n",
    "non_video = fb_live[fb_live['status_type'] != 'video'].copy()\n",
    "\n",
    "# Total engagement for video vs non-video posts \n",
    "# (1) video post\n",
    "video.loc[:, 'total_engagement'] = video.loc[:, ['num_comments', \n",
    "                                                 'num_shares', \n",
    "                                                 'num_likes', \n",
    "                                                 'num_loves', \n",
    "                                                 'num_wows', \n",
    "                                                 'num_hahas', \n",
    "                                                 'num_sads', \n",
    "                                                 'num_angrys']].sum(axis=1)\n",
    "\n",
    "#(2) non-video post\n",
    "non_video.loc[:, 'total_engagement'] = non_video.loc[:, ['num_comments', \n",
    "                                                         'num_shares', \n",
    "                                                         'num_likes', \n",
    "                                                         'num_loves',\n",
    "                                                         'num_wows', \n",
    "                                                         'num_hahas',\n",
    "                                                         'num_sads', \n",
    "                                                         'num_angrys']].sum(axis=1)\n",
    "\n",
    "# Calculate average engagement per post type\n",
    "avg_engagement_vid = video['total_engagement'].mean()\n",
    "avg_engagement_nonvid = non_video['total_engagement'].mean()\n",
    "\n",
    "\n",
    "# Calculate average engagement metrics for both video and non-video posts\n",
    "metrics = ['num_comments', \n",
    "           'num_shares', \n",
    "           'num_likes', \n",
    "           'num_loves', \n",
    "           'num_wows', \n",
    "           'num_hahas', \n",
    "           'num_sads', \n",
    "           'num_angrys']\n",
    "\n",
    "avg_metrics_video = video[metrics].mean()\n",
    "avg_metrics_non_video = non_video[metrics].mean()\n",
    "\n",
    "# Display results for average total engagement\n",
    "print(f\"Average Total Engagement for Video Posts: {avg_engagement_vid}\")\n",
    "print(f\"Average Total Engagement for Non-Video Posts: {avg_engagement_nonvid}\\n\")\n",
    "\n",
    "# Display results for specific reactions averages, video vs non-video\n",
    "for metric in metrics:\n",
    "    print(f\"Average {metric.replace('num_', '')} - Video Posts: {avg_metrics_video[metric]:.2f} \")\n",
    "    print(f\"Average {metric.replace('num_', '')} - Non-Video Posts: {avg_metrics_non_video[metric]:.2f}\")\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "**Answer:**\n",
    "\n",
    "Videos are outperforming non-video content substantially in terms of total engagement. The average total engagement for video posts is approximately four times that of non-video posts, indicating a strong preference for video content among users. When we delve into specific reactions, video posts dominate in nearly every category, particularly in comments and shares, which are critical metrics for content virality and user interaction. Video posts accrue dramatically more comments than non-video posts, suggesting that they are more likely to provoke discussion amongst viewers.\n",
    "\n",
    "The gap in shares is even more pronounced, with video content being shared almost 50 times more on average than non-video content, which is crucial for organic reach. While the difference in likes is less extreme, video posts still maintain an edge, underscoring their general appeal. For reactions that indicate a deeper level of emotional engagement, such as 'loves', video content again sees a significantly higher average, which may reflect a more profound connection with the content.\n",
    "\n",
    "Interestingly, the metrics for 'wows', 'hahas', 'sads', and 'angrys' are also higher for video content, though the difference is less marked compared to comments and shares. This could be because these reactions are less common overall or that they are more content-specific. Regardless, videos maintain a lead in these areas, suggesting they are more effective at eliciting emotional responses.\n",
    "In summary, video content leads in total engagement and dominates across specific types of reactions, indicating its potency in capturing audience attention and eliciting a more substantial and varied emotional response. This aligns with broader trends in social media that favor dynamic, engaging, and emotionally resonant content, with videos fitting this bill perfectly."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "<hr style=\"height:.9px;border:none;color:#333;background-color:#333;\" /><br>\n",
    "\n",
    "<strong> Analyzing the frequency distribution of different status types in the dataset</strong><br>\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "metadata": {
    "scrolled": false
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "status_type\n",
      "photo    1385\n",
      "video     778\n",
      "text      134\n",
      "Name: count, dtype: int64\n"
     ]
    }
   ],
   "source": [
    "# Check how mnay status value\n",
    "unique_status_types = fb_live['status_type'].value_counts()\n",
    "\n",
    "print(unique_status_types)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "metadata": {
    "scrolled": false
   },
   "outputs": [
    {
     "data": {
      "image/png": "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1iOPPJKn47mcueKyqyvVq1dPnp6e6t+/v+bMmaPffvstT/u58v28lpo1a6pu3bouY926dVNKSoq2bt2ap/3fqNWrVysiIsKaXOKSXr166fz58zku77ze+5ybc+fOaePGjerSpYtKlSpljbu5ual79+46evToDV+WeDmHw6Hp06frt99+09SpU/W3v/1NGRkZmjBhgmrWrKk1a9bc0Ha2bdumyMhIBQQEyM3NTR4eHurRo4eysrK0f//+m+7ravz9/VW5cmW9/fbbGj9+vLZt25Yv95kVK1ZMAwcO1Ndff60jR45I+vOs3bJly3L9vF3tu+KHH35QVlbWTX3+H3zwQe3YsUNRUVH69ttvlZKScsvHA6BgELgAFHrVq1dXgwYNXB6Xu3KGsUuXA3bp0kUeHh4ujzFjxsgYo9OnTyspKUnZ2dkKDg7Osc/cxm7EqVOnlJmZqUmTJuXYd/v27SVJJ0+edFknICDA5fmlS8EuXLggSTpx4oQkXXfSiKCgID355JOaMWOGsrKytHPnTq1du1YDBw7M07Fc7ty5czp16tQ1L0usXLmyVq5cqcDAQA0YMECVK1dW5cqVb/qelJuZMe5a792pU6duar8369SpU7n2euk1unL/13ufc5OUlCRjzE3t52aEh4frH//4h2bOnKlffvlFn3zyiS5evKgXXnjhuuseOXJETZs21e+//653331Xa9eu1ebNm617la51XDfL4XBo1apVatOmjcaOHav7779fZcuW1fPPP6/U1NRb2nbv3r1VokQJTZ8+XdKf96WVKFFCvXv3zlF7tT9v6enpOnv27E19/keOHKl33nlHGzZsULt27RQQEKCIiAj9+OOPt3Q8AG4/7uECcNe78l+hy5QpI0maNGnSVWcjCwoKsmY0TEhIyLH8yrFL/6qdlpbmMn7lX3b9/Pyssw8DBgzIdd+Xzwp3Iy7d43T06NHr1g4ePFhz587Vl19+qWXLlql06dJ65plnbmp/uVmyZImysrKuO5V706ZN1bRpU2VlZenHH3/UpEmTFB0draCgID311FM3tK+b+W2va713lwLO1d67K4PvzQoICNDx48dzjF+anOTSn8Nb4efnp2LFitm+n0u6du2q2NhY697Aa/niiy907tw5ff755woPD7fGb2YSi5t5b8LDwzVz5kxJ0v79+/Xpp58qJiZG6enpVljKC6fTqZ49e+q///u/NXz4cM2aNUvdunVT6dKlc9Re7c+bp6enSpUqJQ8Pjxv+/Lu7u2vo0KEaOnSozpw5o5UrV+rll19WmzZtFB8fr5IlS+b5mADcXpzhAlDkPPTQQypdurR+/vnnHGfGLj08PT3l7e2tBx98UJ9//rkuXrxorZ+amqqvvvrKZZtBQUEqXry4du7c6TL+5ZdfujwvWbKkWrRooW3btqlOnTq57vvKMx3X06RJEzmdTk2fPv26l/XVr19fTZo00ZgxYzR//nz16tVL3t7eN7W/Kx05ckTDhw+X0+nUc889d0PruLm5qWHDhtbZjkuX993IWZ2bsXv3bu3YscNlbMGCBfLx8dH9998vSdZsfVe+d4sXL86xPS8vrxvuLSIiQqtXr84x++NHH32kkiVL5svU497e3mrYsKE+//xzl76ys7M1b948lS9fXlWrVr3p7eYW4CTp7Nmzio+PdzmTebX37FIwvnxyDmOMyyWtl28jt9f1Zt6by1WtWlWvvvqqateunS+Xjl6a0KJLly46c+bMVc8KX+27omnTpnJzc8vz57906dLq0qWLBgwYoNOnT/NDzEAhwxkuAEVOqVKlNGnSJPXs2VOnT59Wly5dFBgYqBMnTmjHjh06ceKEpk2bJkn617/+pbZt26pVq1YaNmyYsrKyNGbMGHl7e+v06dPWNh0Oh5599ll9+OGHqly5surWratNmzZpwYIFOfb/7rvv6uGHH1bTpk31j3/8QxUrVlRqaqp+/fVXffXVV1q9evVNH8+4cePUt29ftWzZUv369VNQUJB+/fVX7dixQ5MnT3apHzx4sJ588kk5HA5FRUXd1L527dpl3XOSmJiotWvXatasWXJzc9OiRYtyzCh4uenTp2v16tXq0KGDKlSooIsXL1oz1V2aAc7Hx0fh4eH68ssvFRERIX9/f5UpU+aaU5hfS2hoqCIjIxUTE6OQkBDNmzdPK1as0JgxY6wzBA888ICqVaum4cOHKzMzU35+flq0aJHWrVuXY3u1a9fW559/rmnTpql+/foqVqzYVX8DbtSoUfr666/VokUL/fOf/5S/v7/mz5+vJUuWaOzYsXI6nXk6pivFxsaqVatWatGihYYPHy5PT09NnTpVu3bt0scff3xTZwQvefPNN/Wf//xHTz75pOrVq6cSJUro4MGDmjx5sk6dOqW3337bqq1du7YkacyYMWrXrp3c3NxUp04dtWrVSp6ennr66ac1YsQIXbx4UdOmTVNSUlKO/V3tdQ0ODlbLli0VGxsrPz8/hYeHa9WqVfr8889d1t+5c6cGDhyo//qv/1KVKlXk6emp1atXa+fOnXrppZdu+vivVLVqVbVt21bffPONHn744Rz3BV7i5uamVq1aaejQocrOztaYMWOUkpJi/Zi3dOOf/06dOlm/e1e2bFkdPnxYEydOVHh4uKpUqXLLxwTgNirQKTsA4BZcb+a8SzOc/c///E+uy9esWWM6dOhg/P39jYeHhylXrpzp0KFDjvrFixebOnXqGE9PT1OhQgXz1ltv5TorXnJysunbt68JCgoy3t7eplOnTubQoUO5zrp38OBB07t3b1OuXDnj4eFhypYta5o0aWL+/e9/X7f/q82IuHTpUtOsWTPj7e1tSpYsaWrUqGHGjBmT47jT0tKMl5eXadu2ba6vS26unBHS09PTBAYGmmbNmpnRo0ebxMTEHOtc+RqtX7/ePP744yY8PNx4eXmZgIAA06xZM7N48WKX9VauXGnuu+8+4+XlZSSZnj17umzvxIkT192XMX/OUtihQwfz2WefmZo1axpPT09TsWJFM378+Bzr79+/37Ru3dr4+vqasmXLmkGDBpklS5bkmCHv9OnTpkuXLqZ06dLG4XC47DO39/mnn34ynTp1Mk6n03h6epq6devmeN9u9n3Ozdq1a81f//pX4+3tbUqUKGEaNWpkvvrqq1y3dyOzFG7YsMEMGDDA1K1b1/j7+xs3NzdTtmxZ07ZtW7N06VKX2rS0NNO3b19TtmxZ6zW5NJPhV199ZerWrWuKFy9uypUrZ1544QXzzTff3NTrevz4cdOlSxfj7+9vnE6nefbZZ82PP/7o8tr88ccfplevXubee+813t7eplSpUqZOnTpmwoQJJjMz87rHe8mVsxRebvbs2UaSWbhwYY5ll17bMWPGmNdff92UL1/eeHp6mvvuu898++23udZf7/M/btw406RJE1OmTBnru6dPnz7m0KFDN3w8AO4MDmOuc/0JACCHmJgYvf7669e9hO9O9NVXXykyMlJLliyxbtQHcG1PPPGENmzYoEOHDsnDw8Nl2aFDh1SpUiW9/fbbN/37bgDuflxSCABFxM8//6zDhw9r2LBhqlevntq1a1fQLQF3tLS0NG3dulWbNm3SokWLNH78+BxhCwCuh8AFAEVEVFSU/vOf/+j+++/XnDlz8nRvD1CUHD9+XE2aNJGvr6+ee+45DRo0qKBbAlAIcUkhAAAAANiEaeEBAAAAwCYELgAAAACwCYELAAAAAGzCpBk3ITs7W8eOHZOPjw83mwMAAABFmDFGqampCg0NVbFiVz+PReC6CceOHVNYWFhBtwEAAADgDhEfH6/y5ctfdTmB6yb4+PhI+vNF9fX1LeBuAAAAABSUlJQUhYWFWRnhaghcN+HSZYS+vr4ELgAAAADXvdWISTMAAAAAwCYELgAAAACwCYELAAAAAGxC4AIAAAAAmxC4AAAAAMAmBC4AAAAAsAmBCwAAAABsQuACAAAAAJsQuAAAAADAJgQuAAAAALBJgQeuH374QZ06dVJoaKgcDoe++OKLq9Y+99xzcjgcmjhxost4WlqaBg0apDJlysjb21uRkZE6evSoS01SUpK6d+8up9Mpp9Op7t2768yZM/l/QAAAAADwfwo8cJ07d05169bV5MmTr1n3xRdfaOPGjQoNDc2xLDo6WosWLdLChQu1bt06nT17Vh07dlRWVpZV061bN23fvl3Lli3TsmXLtH37dnXv3j3fjwcAAAAALnEv6AbatWundu3aXbPm999/18CBA/Xtt9+qQ4cOLsuSk5M1c+ZMzZ07Vy1btpQkzZs3T2FhYVq5cqXatGmjPXv2aNmyZdqwYYMaNmwoSfrggw/UuHFj7du3T9WqVbPn4AAAAAAUaQV+hut6srOz1b17d73wwguqWbNmjuVbtmxRRkaGWrdubY2FhoaqVq1aiouLkyStX79eTqfTCluS1KhRIzmdTqsmN2lpaUpJSXF5AAAAAMCNuuMD15gxY+Tu7q7nn38+1+UJCQny9PSUn5+fy3hQUJASEhKsmsDAwBzrBgYGWjW5iY2Nte75cjqdCgsLu4UjAQAAAFDU3NGBa8uWLXr33Xc1e/ZsORyOm1rXGOOyTm7rX1lzpZEjRyo5Odl6xMfH31QPAAAAAIq2OzpwrV27VomJiapQoYLc3d3l7u6uw4cPa9iwYapYsaIkKTg4WOnp6UpKSnJZNzExUUFBQVbNH3/8kWP7J06csGpy4+XlJV9fX5cHAAAAANyoOzpwde/eXTt37tT27dutR2hoqF544QV9++23kqT69evLw8NDK1assNY7fvy4du3apSZNmkiSGjdurOTkZG3atMmq2bhxo5KTk60aAAAAAMhvBT5L4dmzZ/Xrr79azw8ePKjt27fL399fFSpUUEBAgEu9h4eHgoODrZkFnU6n+vTpo2HDhikgIED+/v4aPny4ateubc1aWL16dbVt21b9+vXTjBkzJEn9+/dXx44dmaEQAAAAgG0KPHD9+OOPatGihfV86NChkqSePXtq9uzZN7SNCRMmyN3dXV27dtWFCxcUERGh2bNny83NzaqZP3++nn/+eWs2w8jIyOv+9ldBiow8VtAtAIXO4sU5f6cPAACgIDmMMaagmygsUlJS5HQ6lZycbPv9XAQu4OYRuAAAwO1yo9ngjr6HCwAAAAAKMwIXAAAAANiEwAUAAAAANiFwAQAAAIBNCFwAAAAAYBMCFwAAAADYhMAFAAAAADYhcAEAAACATQhcAAAAAGATAhcAAAAA2ITABQAAAAA2IXABAAAAgE0IXAAAAABgEwIXAAAAANiEwAUAAAAANiFwAQAAAIBNCFwAAAAAYBMCFwAAAADYhMAFAAAAADYhcAEAAACATQhcAAAAAGATAhcAAAAA2ITABQAAAAA2IXABAAAAgE0IXAAAAABgEwIXAAAAANiEwAUAAAAANiFwAQAAAIBNCFwAAAAAYBMCFwAAAADYhMAFAAAAADYhcAEAAACATQhcAAAAAGATAhcAAAAA2ITABQAAAAA2IXABAAAAgE0IXAAAAABgEwIXAAAAANiEwAUAAAAANiFwAQAAAIBNCFwAAAAAYBMCFwAAAADYhMAFAAAAADYhcAEAAACATQhcAAAAAGATAhcAAAAA2ITABQAAAAA2IXABAAAAgE0IXAAAAABgEwIXAAAAANiEwAUAAAAANiFwAQAAAIBNCFwAAAAAYJMCD1w//PCDOnXqpNDQUDkcDn3xxRfWsoyMDL344ouqXbu2vL29FRoaqh49eujYsWMu20hLS9OgQYNUpkwZeXt7KzIyUkePHnWpSUpKUvfu3eV0OuV0OtW9e3edOXPmNhwhAAAAgKKqwAPXuXPnVLduXU2ePDnHsvPnz2vr1q167bXXtHXrVn3++efav3+/IiMjXeqio6O1aNEiLVy4UOvWrdPZs2fVsWNHZWVlWTXdunXT9u3btWzZMi1btkzbt29X9+7dbT8+AAAAAEWXwxhjCrqJSxwOhxYtWqTHHnvsqjWbN2/Wgw8+qMOHD6tChQpKTk5W2bJlNXfuXD355JOSpGPHjiksLExLly5VmzZttGfPHtWoUUMbNmxQw4YNJUkbNmxQ48aNtXfvXlWrVi3XfaWlpSktLc16npKSorCwMCUnJ8vX1zf/DjwXkZHHrl8EwMXixaEF3QIAACgiUlJS5HQ6r5sNCvwM181KTk6Ww+FQ6dKlJUlbtmxRRkaGWrdubdWEhoaqVq1aiouLkyStX79eTqfTCluS1KhRIzmdTqsmN7GxsdYliE6nU2FhYfYcFAAAAIC7UqEKXBcvXtRLL72kbt26WSkyISFBnp6e8vPzc6kNCgpSQkKCVRMYGJhje4GBgVZNbkaOHKnk5GTrER8fn49HAwAAAOBu517QDdyojIwMPfXUU8rOztbUqVOvW2+MkcPhsJ5f/t9Xq7mSl5eXvLy88tYwAAAAgCKvUJzhysjIUNeuXXXw4EGtWLHC5RrJ4OBgpaenKykpyWWdxMREBQUFWTV//PFHju2eOHHCqgEAAACA/HbHB65LYeuXX37RypUrFRAQ4LK8fv368vDw0IoVK6yx48ePa9euXWrSpIkkqXHjxkpOTtamTZusmo0bNyo5OdmqAQAAAID8VuCXFJ49e1a//vqr9fzgwYPavn27/P39FRoaqi5dumjr1q36+uuvlZWVZd1z5e/vL09PTzmdTvXp00fDhg1TQECA/P39NXz4cNWuXVstW7aUJFWvXl1t27ZVv379NGPGDElS//791bFjx6vOUAgAAAAAt6rAA9ePP/6oFi1aWM+HDh0qSerZs6diYmK0ePFiSVK9evVc1vvuu+/UvHlzSdKECRPk7u6url276sKFC4qIiNDs2bPl5uZm1c+fP1/PP/+8NZthZGRkrr/9BQAAAAD55Y76Ha473Y3OtZ8f+B0u4ObxO1wAAOB2uWt/hwsAAAAACgsCFwAAAADYhMAFAAAAADYhcAEAAACATQhcAAAAAGATAhcAAAAA2ITABQAAAAA2IXABAAAAgE0IXAAAAABgEwIXAAAAANiEwAUAAAAANiFwAQAAAIBNCFwAAAAAYBMCFwAAAADYhMAFAAAAADYhcAEAAACATQhcAAAAAGATAhcAAAAA2ITABQAAAAA2IXABAAAAgE0IXAAAAABgEwIXAAAAANiEwAUAAAAANiFwAQAAAIBNCFwAAAAAYBMCFwAAAADYhMAFAAAAADYhcAEAAACATQhcAAAAAGATAhcAAAAA2ITABQAAAAA2IXABAAAAgE0IXAAAAABgEwIXAAAAANiEwAUAAAAANiFwAQAAAIBNCFwAAAAAYBMCFwAAAADYhMAFAAAAADYhcAEAAACATQhcAAAAAGATAhcAAAAA2ITABQAAAAA2IXABAAAAgE0IXAAAAABgEwIXAAAAANiEwAUAAAAANiFwAQAAAIBNCFwAAAAAYBMCFwAAAADYhMAFAAAAADYhcAEAAACATQo8cP3www/q1KmTQkND5XA49MUXX7gsN8YoJiZGoaGhKlGihJo3b67du3e71KSlpWnQoEEqU6aMvL29FRkZqaNHj7rUJCUlqXv37nI6nXI6nerevbvOnDlj89EBAAAAKMoKPHCdO3dOdevW1eTJk3NdPnbsWI0fP16TJ0/W5s2bFRwcrFatWik1NdWqiY6O1qJFi7Rw4UKtW7dOZ8+eVceOHZWVlWXVdOvWTdu3b9eyZcu0bNkybd++Xd27d7f9+AAAAAAUXQ5jjCnoJi5xOBxatGiRHnvsMUl/nt0KDQ1VdHS0XnzxRUl/ns0KCgrSmDFj9Nxzzyk5OVlly5bV3Llz9eSTT0qSjh07prCwMC1dulRt2rTRnj17VKNGDW3YsEENGzaUJG3YsEGNGzfW3r17Va1atRvqLyUlRU6nU8nJyfL19c3/F+AykZHHbN0+cDdavDi0oFsAAABFxI1mgwI/w3UtBw8eVEJCglq3bm2NeXl5qVmzZoqLi5MkbdmyRRkZGS41oaGhqlWrllWzfv16OZ1OK2xJUqNGjeR0Oq2a3KSlpSklJcXlAQAAAAA36o4OXAkJCZKkoKAgl/GgoCBrWUJCgjw9PeXn53fNmsDAwBzbDwwMtGpyExsba93z5XQ6FRYWdkvHAwAAAKBouaMD1yUOh8PluTEmx9iVrqzJrf562xk5cqSSk5OtR3x8/E12DgAAAKAou6MDV3BwsCTlOAuVmJhonfUKDg5Wenq6kpKSrlnzxx9/5Nj+iRMncpw9u5yXl5d8fX1dHgAAAABwo+7owFWpUiUFBwdrxYoV1lh6errWrFmjJk2aSJLq168vDw8Pl5rjx49r165dVk3jxo2VnJysTZs2WTUbN25UcnKyVQMAAAAA+c29oBs4e/asfv31V+v5wYMHtX37dvn7+6tChQqKjo7W6NGjVaVKFVWpUkWjR49WyZIl1a1bN0mS0+lUnz59NGzYMAUEBMjf31/Dhw9X7dq11bJlS0lS9erV1bZtW/Xr108zZsyQJPXv318dO3a84RkKAQAAAOBmFXjg+vHHH9WiRQvr+dChQyVJPXv21OzZszVixAhduHBBUVFRSkpKUsOGDbV8+XL5+PhY60yYMEHu7u7q2rWrLly4oIiICM2ePVtubm5Wzfz58/X8889bsxlGRkZe9be/AAAAACA/3FG/w3Wn43e4gDsbv8MFAABul7vid7gAAAAAoDAjcAEAAACATQhcAAAAAGATAhcAAAAA2ITABQAAAAA2IXABAAAAgE0IXAAAAABgEwIXAAAAANiEwAUAAAAANiFwAQAAAIBNCFwAAAAAYBMCFwAAAADYhMAFAAAAADYhcAEAAACATQhcAAAAAGATAhcAAAAA2ITABQAAAAA2IXABAAAAgE0IXAAAAABgEwIXAAAAANiEwAUAAAAANiFwAQAAAIBNCFwAAAAAYBMCFwAAAADYhMAFAAAAADYhcAEAAACATQhcAAAAAGATAhcAAAAA2ITABQAAAAA2IXABAAAAgE0IXAAAAABgEwIXAAAAANiEwAUAAAAANiFwAQAAAIBNCFwAAAAAYBMCFwAAAADYhMAFAAAAADYhcAEAAACATQhcAAAAAGATAhcAAAAA2ITABQAAAAA2IXABAAAAgE0IXAAAAABgEwIXAAAAANgkT4Fr+PDh2rt3b373AgAAAAB3lTwFrk8//VQ1a9ZUkyZN9OGHH+rcuXP53RcAAAAAFHp5ClyHDx/WkiVLVL58eQ0YMEAhISHq27ev4uLi8rs/AAAAACi08hS4HA6H2rZtq08//VS///67/vWvf2nLli1q2rSpatSooXHjxikxMTG/ewUAAACAQuWWJ83w9/fX4MGDNXv2bDVt2lR79+7VCy+8oLCwMPXs2VMnTpzIjz4BAAAAoNC5pcCVnJysadOmqUGDBrr//vuVkpKiKVOm6NixY5o2bZrWrl2rp556Kr96BQAAAIBCxT0vK61evVozZ87UF198IXd3dz399NOaMWOG6tevb9X07t1bYWFh6tSpU741CwAAAACFSZ4CV8uWLdWwYUNNmjRJTz31lEqWLJlrXdWqVfX000/fUoMAAAAAUFjlKXDt2LFDtWvXvm5deHi4Zs2alZddAAAAAEChl6d7uCpWrKjjx4/nuuz48eM6e/bsLTV1uczMTL366quqVKmSSpQooXvuuUdvvPGGsrOzrRpjjGJiYhQaGqoSJUqoefPm2r17t8t20tLSNGjQIJUpU0be3t6KjIzU0aNH861PAAAAALhSngJX37599dprr+W6bNSoUerfv/8tNXW5MWPGaPr06Zo8ebL27NmjsWPH6u2339akSZOsmrFjx2r8+PGaPHmyNm/erODgYLVq1UqpqalWTXR0tBYtWqSFCxdq3bp1Onv2rDp27KisrKx86xUAAAAALpenwPXDDz+oQ4cOuS5r37691qxZc0tNXW79+vV69NFH1aFDB1WsWFFdunRR69at9eOPP0r68+zWxIkT9corr6hz586qVauW5syZo/Pnz2vBggWS/pxNcebMmRo3bpxatmyp++67T/PmzdNPP/2klStX5luvAAAAAHC5PAWupKQk+fj45LrM29tbp06duqWmLvfwww9r1apV2r9/v6Q/7x9bt26d2rdvL0k6ePCgEhIS1Lp1a2sdLy8vNWvWTHFxcZKkLVu2KCMjw6UmNDRUtWrVsmpyk5aWppSUFJcHAAAAANyoPAWue+6556pnhlatWqWKFSveSk8uXnzxRT399NO699575eHhofvuu0/R0dHW7IcJCQmSpKCgIJf1goKCrGUJCQny9PSUn5/fVWtyExsbK6fTaT3CwsLy7bgAAAAA3P3yfA/X+PHjNXbsWJ08eVKSdPLkSb399tuaMGGC+vXrl28NfvLJJ5o3b54WLFigrVu3as6cOXrnnXc0Z84clzqHw+Hy3BiTY+xK16sZOXKkkpOTrUd8fHzeDwQAAABAkZOnaeGHDBmiAwcOaOTIkRo5cqTc3d2VmZkpSfr73/+uYcOG5VuDL7zwgl566SU99dRTkqTatWvr8OHDio2NVc+ePRUcHCzpz7NYISEh1nqJiYnWWa/g4GClp6crKSnJ5SxXYmKimjRpctV9e3l5ycvLK9+OBQAAAEDRkqczXA6HQ1OmTNHevXs1ZcoUjRo1SlOnTrWe56fz58+rWDHXNt3c3Kxp4StVqqTg4GCtWLHCWp6enq41a9ZYYap+/fry8PBwqTl+/Lh27dp1zcAFAAAAALciT2e4LqlSpYqqVKmSX73kqlOnTnrzzTdVoUIF1axZU9u2bdP48ePVu3dvSX+Gv+joaI0ePdrqZ/To0SpZsqS6desmSXI6nerTp4+GDRumgIAA+fv7a/jw4apdu7Zatmxpa/8AAAAAiq48B66srCxt3LhRR48e1cWLF3Ms79Gjxy01dsmkSZP02muvKSoqSomJiQoNDdVzzz2nf/7zn1bNiBEjdOHCBUVFRSkpKUkNGzbU8uXLXWZSnDBhgtzd3dW1a1dduHBBERERmj17ttzc3PKlTwAAAAC4ksMYY252pa1bt6pz586Kj49Xbqs7HI678geFU1JS5HQ6lZycLF9fX1v3FRl5zNbtA3ejxYtDC7oFAABQRNxoNsjTGa5//OMf8vHx0fLly1WjRg15enrmuVEAQO6ORUYWdAtAoRS6eHFBtwAAljwFrt27d+vTTz9VREREfvcDAAAAAHeNPM1SWLVqVaWmpuZ3LwAAAABwV8lT4JowYYJiY2O1d+/e/O4HAAAAAO4aebqkcODAgUpISFCtWrUUGhqq0qVLuyx3OBzasWNHfvQHAAAAAIVWngJX/fr15XA48rsXAAAAALir5ClwzZ49O5/bAAAAAIC7T57u4bqcMUbHjh1TZmZmfvQDAAAAAHeNPAeub7/9Vo0aNVLx4sUVFhamnTt3SpL69++v+fPn51uDAAAAAFBY5Slwffzxx2rfvr3Cw8P13nvvyRhjLatcubJmzZqVbw0CAAAAQGGVp8D1r3/9S9HR0frkk0/Ut29fl2U1a9bUrl278qU5AAAAACjM8hS4fvvtN7Vv3z7XZd7e3kpOTr6lpgAAAADgbpCnwBUcHHzVHz3euXOnwsPDb6kpAAAAALgb5ClwdevWTTExMVq1apU15nA4tGvXLo0dO1bPPvtsvjUIAAAAAIVVnn6HKyYmRrt371arVq0UEBAgSWrXrp1OnDihjh076qWXXsrXJgEAAACgMMpT4PL09NSXX36p7777TitWrNDJkyfl7++vli1bqmXLlvndIwAAAAAUSnkKXJe0aNFCLVq0yK9eAAAAAOCukqfAdeTIkevWVKhQIS+bBgAAAIC7Rp4CV8WKFeVwOK5Zk5WVlaeGAAAAAOBukafA9T//8z85xk6fPq3ly5dr8+bNevPNN2+5MQAAAAAo7PIUuJ544olcx/v166chQ4boP//5j5555plbagwAAAAACrs8/Q7XtXTo0EELFy7M780CAAAAQKGT74ErLi5OxYsXz+/NAgAAAEChk6dLCp9//vkcY+np6dqzZ4/WrVun4cOH33JjAAAAAFDY5SlwffXVVznGihcvrvLly2vq1Knq27fvLTcGAAAAAIVdngLXwYMH87sPAAAAALjr5Ps9XAAAAACAP+XpDNcbb7xxw7UOh0OvvfZaXnYDAAAAAIVangLX22+/rczMTKWlpf25EXd3ZWZmSpK8vLzk7v7/N0vgAgAAAFBU5emSwu+++04hISGaMWOGTp06pfT0dJ06dUrTp09XSEiIVq9erdTUVKWmpiolJSW/ewYAAACAQiFPZ7gGDhyo4cOHq1+/ftaYn5+f+vfvr4yMDA0YMECbNm3KtyYBAAAAoDDK0xmuHTt26J577sl1WeXKlbVr165bagoAAAAA7gZ5ClwVK1bU9OnTZYxxGTfGaOrUqQoPD8+X5gAAAACgMMvTJYVvvfWWunTpoipVqqhTp04KDAxUYmKivvrqKx0+fFifffZZfvcJAAAAAIVOngLXo48+qs2bN+utt97Sl19+qePHjyskJEQPPvigPvvsM9WrVy+f2wQAAACAwidPgUuS6tWrp4ULF+ZnLwAAAABwV8nTPVyXi4+PV1xcnM6dO5cf/QAAAADAXSPPgev9999XuXLlFB4erqZNm2rfvn2SpMcff1zvvvtuvjUIAAAAAIVVngLXxIkTNWjQID377LP65ptvXGYrbN68uT799NN8axAAAAAACqs83cM1adIkvfbaa3r11VeVlZXlsqxatWrW2S4AAAAAKMrydIbr999/V5MmTXJd5uHhwf1cAAAAAKA8Bq7w8HBt2rQp12UbN25U1apVb6kpAAAAALgb5Clw9evXT//+9781c+ZMpaSkSJIyMjK0ZMkSvf3223ruuefytUkAAAAAKIzydA/X8OHDdeTIEfXv398KVw899JAkKSoqSlFRUfnXIQAAAAAUUnn+4eP33ntP0dHRWrlypU6ePCl/f39FRESoSpUq+dkfAAAAABRaNx24Ll68qMDAQM2bN0+RkZHq37+/HX0BAAAAQKF30/dwFS9eXN7e3vL09LSjHwAAAAC4a+Rp0oyePXtq5syZ+d0LAAAAANxV8nQPl5+fn+Li4lSnTh21a9dOgYGBcjgc1nKHw6EhQ4bkW5MAAAAAUBjlKXCNHDlSknT8+HHt2rUrx3ICFwAAAADcxCWFNWrU0E8//SRJys7OVnZ2tubOnatTp05Zzy89srKybGsYAAAAAAqLGw5ce/fu1YULF6znWVlZ6tGjhw4ePGhLYwAAAABQ2OVp0oxLjDH51cc1/f7773r22WcVEBCgkiVLql69etqyZYtLHzExMQoNDVWJEiXUvHlz7d6922UbaWlpGjRokMqUKSNvb29FRkbq6NGjt6V/AAAAAEXTLQWu2yEpKUkPPfSQPDw89M033+jnn3/WuHHjVLp0aatm7NixGj9+vCZPnqzNmzcrODhYrVq1UmpqqlUTHR2tRYsWaeHChVq3bp3Onj2rjh07cvkjAAAAANvc1KQZl89EeK2x/DRmzBiFhYVp1qxZ1ljFihWt/zbGaOLEiXrllVfUuXNnSdKcOXMUFBSkBQsW6LnnnlNycrJmzpypuXPnqmXLlpKkefPmKSwsTCtXrlSbNm1sPQYAAAAARdNNneFq0aKFfH195evrKz8/P0lS06ZNrbFLD6fTmW8NLl68WA0aNNB//dd/KTAwUPfdd58++OADa/nBgweVkJCg1q1bW2NeXl5q1qyZ4uLiJElbtmxRRkaGS01oaKhq1apl1eQmLS1NKSkpLg8AAAAAuFE3fIZr1KhRdvZxVb/99pumTZumoUOH6uWXX9amTZv0/PPPy8vLSz169FBCQoIkKSgoyGW9oKAgHT58WJKUkJAgT09PKyReXnNp/dzExsbq9ddfz+cjAgAAAFBU3PGBKzs7Ww0aNNDo0aMlSffdd592796tadOmqUePHlbdlZc2GmOue7nj9WpGjhypoUOHWs9TUlIUFhaWl8MAAAAAUATd8ZNmhISEqEaNGi5j1atX15EjRyRJwcHBkpTjTFViYqJ11is4OFjp6elKSkq6ak1uvLy8clwuCQAAAAA36o4PXA899JD27dvnMrZ//36Fh4dLkipVqqTg4GCtWLHCWp6enq41a9aoSZMmkqT69evLw8PDpeb48ePatWuXVQMAAAAA+e2mZiksCEOGDFGTJk00evRode3aVZs2bdL777+v999/X9KflxJGR0dr9OjRqlKliqpUqaLRo0erZMmS6tatmyTJ6XSqT58+GjZsmAICAuTv76/hw4erdu3a1qyFAAAAAJDf7vjA9cADD2jRokUaOXKk3njjDVWqVEkTJ07UM888Y9WMGDFCFy5cUFRUlJKSktSwYUMtX75cPj4+Vs2ECRPk7u6url276sKFC4qIiNDs2bPl5uZWEIcFAAAAoAhwGGNMQTdRWKSkpMjpdCo5Odn2+7kiI4/Zun3gbrR4cWhBt5CvjkVGFnQLQKEUunhxQbcAoAi40Wxwx9/DBQAAAACFFYELAAAAAGxC4AIAAAAAmxC4AAAAAMAmBC4AAAAAsAmBCwAAAABsQuACAAAAAJsQuAAAAADAJgQuAAAAALAJgQsAAAAAbELgAgAAAACbELgAAAAAwCYELgAAAACwCYELAAAAAGxC4AIAAAAAmxC4AAAAAMAmBC4AAAAAsAmBCwAAAABsQuACAAAAAJsQuAAAAADAJgQuAAAAALAJgQsAAAAAbELgAgAAAACbELgAAAAAwCYELgAAAACwCYELAAAAAGxC4AIAAAAAmxC4AAAAAMAmBC4AAAAAsAmBCwAAAABsQuACAAAAAJsQuAAAAADAJgQuAAAAALAJgQsAAAAAbELgAgAAAACbELgAAAAAwCYELgAAAACwCYELAAAAAGxC4AIAAAAAmxC4AAAAAMAmBC4AAAAAsAmBCwAAAABsQuACAAAAAJsQuAAAAADAJgQuAAAAALAJgQsAAAAAbELgAgAAAACbELgAAAAAwCYELgAAAACwCYELAAAAAGxC4AIAAAAAmxC4AAAAAMAmBC4AAAAAsEmhC1yxsbFyOByKjo62xowxiomJUWhoqEqUKKHmzZtr9+7dLuulpaVp0KBBKlOmjLy9vRUZGamjR4/e5u4BAAAAFCWFKnBt3rxZ77//vurUqeMyPnbsWI0fP16TJ0/W5s2bFRwcrFatWik1NdWqiY6O1qJFi7Rw4UKtW7dOZ8+eVceOHZWVlXW7DwMAAABAEVFoAtfZs2f1zDPP6IMPPpCfn581bozRxIkT9corr6hz586qVauW5syZo/Pnz2vBggWSpOTkZM2cOVPjxo1Ty5Ytdd9992nevHn66aeftHLlyoI6JAAAAAB3uUITuAYMGKAOHTqoZcuWLuMHDx5UQkKCWrdubY15eXmpWbNmiouLkyRt2bJFGRkZLjWhoaGqVauWVZObtLQ0paSkuDwAAAAA4Ea5F3QDN2LhwoXaunWrNm/enGNZQkKCJCkoKMhlPCgoSIcPH7ZqPD09Xc6MXaq5tH5uYmNj9frrr99q+wAAAACKqDv+DFd8fLwGDx6sefPmqXjx4letczgcLs+NMTnGrnS9mpEjRyo5Odl6xMfH31zzAAAAAIq0Oz5wbdmyRYmJiapfv77c3d3l7u6uNWvW6L333pO7u7t1ZuvKM1WJiYnWsuDgYKWnpyspKemqNbnx8vKSr6+vywMAAAAAbtQdH7giIiL0008/afv27dajQYMGeuaZZ7R9+3bdc889Cg4O1ooVK6x10tPTtWbNGjVp0kSSVL9+fXl4eLjUHD9+XLt27bJqAAAAACC/3fH3cPn4+KhWrVouY97e3goICLDGo6OjNXr0aFWpUkVVqlTR6NGjVbJkSXXr1k2S5HQ61adPHw0bNkwBAQHy9/fX8OHDVbt27RyTcAAAAABAfrnjA9eNGDFihC5cuKCoqCglJSWpYcOGWr58uXx8fKyaCRMmyN3dXV27dtWFCxcUERGh2bNny83NrQA7BwAAAHA3cxhjTEE3UVikpKTI6XQqOTnZ9vu5IiOP2bp94G60eHFoQbeQr45FRhZ0C0ChFLp4cUG3AKAIuNFscMffwwUAAAAAhRWBCwAAAABsQuACAAAAAJsQuAAAAADAJgQuAAAAALAJgQsAAAAAbELgAgAAAACbELgAAAAAwCYELgAAAACwCYELAAAAAGxC4AIAAAAAmxC4AAAAAMAmBC4AAAAAsAmBCwAAAABsQuACAAAAAJsQuAAAAADAJgQuAAAAALAJgQsAAAAAbELgAgAAAACbELgAAAAAwCYELgAAAACwCYELAAAAAGxC4AIAAAAAmxC4AAAAAMAmBC4AAAAAsAmBCwAAAABsQuACAAAAAJsQuAAAAADAJgQuAAAAALAJgQsAAAAAbELgAgAAAACbELgAAAAAwCYELgAAAACwCYELAAAAAGxC4AIAAAAAmxC4AAAAAMAmBC4AAAAAsAmBCwAAAABsQuACAAAAAJsQuAAAAADAJgQuAAAAALAJgQsAAAAAbELgAgAAAACbELgAAAAAwCYELgAAAACwCYELAAAAAGxC4AIAAAAAmxC4AAAAAMAmBC4AAAAAsAmBCwAAAABsQuACAAAAAJsQuAAAAADAJnd84IqNjdUDDzwgHx8fBQYG6rHHHtO+fftcaowxiomJUWhoqEqUKKHmzZtr9+7dLjVpaWkaNGiQypQpI29vb0VGRuro0aO381AAAAAAFDF3fOBas2aNBgwYoA0bNmjFihXKzMxU69atde7cOatm7NixGj9+vCZPnqzNmzcrODhYrVq1UmpqqlUTHR2tRYsWaeHChVq3bp3Onj2rjh07KisrqyAOCwAAAEAR4DDGmIJu4macOHFCgYGBWrNmjR555BEZYxQaGqro6Gi9+OKLkv48mxUUFKQxY8boueeeU3JyssqWLau5c+fqySeflCQdO3ZMYWFhWrp0qdq0aXND+05JSZHT6VRycrJ8fX1tO0ZJiow8Zuv2gbvR4sWhBd1CvjoWGVnQLQCFUujixQXdAoAi4EazwR1/hutKycnJkiR/f39J0sGDB5WQkKDWrVtbNV5eXmrWrJni4uIkSVu2bFFGRoZLTWhoqGrVqmXV5CYtLU0pKSkuDwAAAAC4UYUqcBljNHToUD388MOqVauWJCkhIUGSFBQU5FIbFBRkLUtISJCnp6f8/PyuWpOb2NhYOZ1O6xEWFpafhwMAAADgLleoAtfAgQO1c+dOffzxxzmWORwOl+fGmBxjV7pezciRI5WcnGw94uPj89Y4AAAAgCKp0ASuQYMGafHixfruu+9Uvnx5azw4OFiScpypSkxMtM56BQcHKz09XUlJSVetyY2Xl5d8fX1dHgAAAABwo+74wGWM0cCBA/X5559r9erVqlSpksvySpUqKTg4WCtWrLDG0tPTtWbNGjVp0kSSVL9+fXl4eLjUHD9+XLt27bJqAAAAACC/uRd0A9czYMAALViwQF9++aV8fHysM1lOp1MlSpSQw+FQdHS0Ro8erSpVqqhKlSoaPXq0SpYsqW7dulm1ffr00bBhwxQQECB/f38NHz5ctWvXVsuWLQvy8AAAAADcxe74wDVt2jRJUvPmzV3GZ82apV69ekmSRowYoQsXLigqKkpJSUlq2LChli9fLh8fH6t+woQJcnd3V9euXXXhwgVFRERo9uzZcnNzu12HAgAAAKCIKXS/w1WQ+B0u4M7G73ABkPgdLgC3x137O1wAAAAAUFgQuAAAAADAJgQuAAAAALAJgQsAAAAAbELgAgAAAACbELgAAAAAwCYELgAAAACwCYELAAAAAGxC4AIAAAAAmxC4AAAAAMAmBC4AAAAAsAmBCwAAAABsQuACAAAAAJsQuAAAAADAJu4F3QAAAABy12Jci4JuASiUvhv2XUG3YOEMFwAAAADYhMAFAAAAADYhcAEAAACATQhcAAAAAGATAhcAAAAA2ITABQAAAAA2IXABAAAAgE0IXAAAAABgEwIXAAAAANiEwAUAAAAANiFwAQAAAIBNCFwAAAAAYBMCFwAAAADYhMAFAAAAADYhcAEAAACATQhcAAAAAGATAhcAAAAA2ITABQAAAAA2IXABAAAAgE0IXAAAAABgEwIXAAAAANiEwAUAAAAANiFwAQAAAIBNCFwAAAAAYBMCFwAAAADYhMAFAAAAADYhcAEAAACATQhcAAAAAGATAhcAAAAA2ITABQAAAAA2IXABAAAAgE0IXAAAAABgEwIXAAAAANiEwAUAAAAANiFwAQAAAIBNCFwAAAAAYBMCFwAAAADYhMAFAAAAADYpcoFr6tSpqlSpkooXL6769etr7dq1Bd0SAAAAgLtUkQpcn3zyiaKjo/XKK69o27Ztatq0qdq1a6cjR44UdGsAAAAA7kJFKnCNHz9effr0Ud++fVW9enVNnDhRYWFhmjZtWkG3BgAAAOAu5F7QDdwu6enp2rJli1566SWX8datWysuLi7XddLS0pSWlmY9T05OliSlpKTY1+j/ychItX0fwN3mdnw2b6fUjIyCbgEolO6m74LMi5kF3QJQKN2O74FL+zDGXLOuyASukydPKisrS0FBQS7jQUFBSkhIyHWd2NhYvf766znGw8LCbOkRwK1xOgu6AwB3BL4MgCLP+ert+x5ITU2V8xrfO0UmcF3icDhcnhtjcoxdMnLkSA0dOtR6np2drdOnTysgIOCq6+DulpKSorCwMMXHx8vX17eg2wFQAPgeACDxXYA/c0RqaqpCQ0OvWVdkAleZMmXk5uaW42xWYmJijrNel3h5ecnLy8tlrHTp0na1iELE19eXL1egiON7AIDEd0FRd60zW5cUmUkzPD09Vb9+fa1YscJlfMWKFWrSpEkBdQUAAADgblZkznBJ0tChQ9W9e3c1aNBAjRs31vvvv68jR47o73//e0G3BgAAAOAuVKQC15NPPqlTp07pjTfe0PHjx1WrVi0tXbpU4eHhBd0aCgkvLy+NGjUqx6WmAIoOvgcASHwX4MY5zPXmMQQAAAAA5EmRuYcLAAAAAG43AhcAAAAA2ITABQAAAAA2IXABkipWrKiJEycWdBsAClhMTIzq1at3zZpevXrpscceuy39AAAKPwIXkE/4SxhQ+A0fPlyrVq0q6DYAFIDmzZsrOjr6jt8mCp8iNS08AADXUqpUKZUqVaqg2wAA3EU4w4UioXnz5ho4cKAGDhyo0qVLKyAgQK+++qou/1WE8+fPq3fv3vLx8VGFChX0/vvvu2zjp59+0l//+leVKFFCAQEB6t+/v86ePSvpz8uQ5syZoy+//FIOh0MOh0Pff//9ddcDcHvNmDFD5cqVU3Z2tst4ZGSkevbsmeOSwqysLA0dOtT63hgxYoSu/DUVY4zGjh2re+65RyVKlFDdunX12WefudSsWbNGDz74oLy8vBQSEqKXXnpJmZmZth0ngJvTq1cvrVmzRu+++671//FDhw7p559/Vvv27VWqVCkFBQWpe/fuOnnypCTp+++/l6enp9auXWttZ9y4cSpTpoyOHz9+1W2iCDJAEdCsWTNTqlQpM3jwYLN3714zb948U7JkSfP+++8bY4wJDw83/v7+ZsqUKeaXX34xsbGxplixYmbPnj3GGGPOnTtnQkNDTefOnc1PP/1kVq1aZSpVqmR69uxpjDEmNTXVdO3a1bRt29YcP37cHD9+3KSlpV13PQC316lTp4ynp6dZuXKlNXb69Gnj6elpvv32WzNq1ChTt25da9mYMWOM0+k0n332mfn5559Nnz59jI+Pj3n00Uetmpdfftnce++9ZtmyZebAgQNm1qxZxsvLy3z//ffGGGOOHj1qSpYsaaKiosyePXvMokWLTJkyZcyoUaNu01EDuJ4zZ86Yxo0bm379+ln/Hz969KgpU6aMGTlypNmzZ4/ZunWradWqlWnRooW13gsvvGDCw8PNmTNnzPbt242Xl5f5/PPPr7rNzMzMgjpEFCACF4qEZs2amerVq5vs7Gxr7MUXXzTVq1c3xvwZuJ599llrWXZ2tgkMDDTTpk0zxhjz/vvvGz8/P3P27FmrZsmSJaZYsWImISHBGGNMz549Xf4SdqPrAbi9IiMjTe/eva3nM2bMMMHBwSYzMzNH4AoJCTFvvfWW9TwjI8OUL1/e+qyfPXvWFC9e3MTFxbnso0+fPubpp582xvwZyKpVq+by/TNlyhRTqlQpk5WVZcMRAsiLZs2amcGDB1vPX3vtNdO6dWuXmvj4eCPJ7Nu3zxhjTFpamrnvvvtM165dTc2aNU3fvn2vuU0UTVxSiCKjUaNGcjgc1vPGjRvrl19+UVZWliSpTp061jKHw6Hg4GAlJiZKkvbs2aO6devK29vbqnnooYeUnZ2tffv2XXWfeV0PgH2eeeYZ/e///q/S0tIkSfPnz9dTTz0lNzc3l7rk5GQdP35cjRs3tsbc3d3VoEED6/nPP/+sixcvqlWrVtb9X6VKldJHH32kAwcOSPrze6Bx48Yu3z8PPfSQzp49q6NHj9p5qABuwZYtW/Tdd9+5fLbvvfdeSbI+356enpo3b57+93//VxcuXGDGY+SKSTOA/+Ph4eHy3OFwWPd5GGNc/rJ0Zd3V5HU9APbp1KmTsrOztWTJEj3wwANau3atxo8fn6dtXfqOWLJkicqVK+eyzMvLS1Lu3wPm/+4D43sAuHNlZ2erU6dOGjNmTI5lISEh1n/HxcVJkk6fPq3Tp0+7/CMrIDFpBoqQDRs25HhepUqVHP+qnZsaNWpo+/btOnfunDX2n//8R8WKFVPVqlUl/fmvXJfOlt3MegBurxIlSqhz586aP3++Pv74Y1WtWlX169fPUed0OhUSEuLy3ZGZmaktW7ZYz2vUqCEvLy8dOXJEf/nLX1weYWFhVk1cXJzLZBtxcXHy8fHJEdIAFJwr/z9+//33a/fu3apYsWKOz/elUHXgwAENGTJEH3zwgRo1aqQePXq4TMqT298NUPQQuFBkxMfHa+jQodq3b58+/vhjTZo0SYMHD76hdZ955hkVL15cPXv21K5du/Tdd99p0KBB6t69u4KCgiT9+ePJO3fu1L59+3Ty5EllZGTc0HoAbr9nnnlGS5Ys0Ycffqhnn332qnWDBw/WW2+9pUWLFmnv3r2KiorSmTNnrOU+Pj4aPny4hgwZojlz5ujAgQPatm2bpkyZojlz5kiSoqKiFB8fr0GDBmnv3r368ssvNWrUKA0dOlTFivG/YeBOUbFiRW3cuFGHDh3SyZMnNWDAAJ0+fVpPP/20Nm3apN9++03Lly9X7969lZWVpaysLHXv3l2tW7fW3/72N82aNUu7du3SuHHjrrrNK2dIRRFRoHeQAbdJs2bNTFRUlPn73/9ufH19jZ+fn3nppZesm9jDw8PNhAkTXNapW7euyyxiO3fuNC1atDDFixc3/v7+pl+/fiY1NdVanpiYaFq1amVKlSplJJnvvvvuhtYDcPtlZmaakJAQI8kcOHDAGr9y0oyMjAwzePBg4+vra0qXLm2GDh1qevTo4TJBTnZ2tnn33XdNtWrVjIeHhylbtqxp06aNWbNmjVXz/fffmwceeMB4enqa4OBg8+KLL5qMjIzbcagAbtC+fftMo0aNTIkSJYwkc/DgQbN//37z+OOPm9KlS5sSJUqYe++910RHR5vs7Gzz+uuvm5CQEHPy5ElrG1988YXx9PQ027Ztu+o2UfQ4jLniB0WAu1Dz5s1Vr149bmYFAADAbcW1DAAAAABgEwIXAAAAANiESwoBAAAAwCac4QIAAAAAmxC4AAAAAMAmBC4AAAAAsAmBCwAAAABsQuACAAAAAJsQuAAAd4z58+frwQcflNPplK+vr6pXr66+ffsqMTHRqpk4caKWLl2ap+1///33Gj16dH61e02zZ8+Ww+G47gMAcHdjWngAwB3hrbfe0ssvv6whQ4aoVatWMsZo165dmj9/vmbPnq169epJkipWrKiOHTtq8uTJN72PmJgYvfPOOzp79mw+d5/TiRMndODAAev5kiVL9O9//1vLli2T0+m0xhs1amR7LwCAguNe0A0AACBJkyZNUq9evTRu3DhrrF27dnrhhReUnZ1dgJ3lTdmyZVW2bFnr+d69eyVJ9evXV5kyZQqqLQDAbcYlhQCAO8KZM2cUEhKS67Jixf7831XFihV1+PBhTZkyxbokb/bs2ZKkjz76SA8//LD8/f3l5+en5s2ba9OmTdY2YmJi9Prrr+vcuXPWus2bN5ck9erVS7Vq1XLZ58mTJ122L0mLFy9WgwYNVKpUKZUuXVoNGjTI8+WNnTt31sMPP5xj/P3335eXl5dOnjwpSXI4HHrrrbc0YsQIlS1bVj4+PurVq5dSU1Nd1jtz5oyioqIUEhIiLy8v1a9fX8uXL89TbwCA/MMZLgDAHaF+/fqaPn26KlWqpI4dOyo4ODhHzaJFi9S+fXs9/PDDGjZsmCSpcuXKkqRDhw6pR48eqly5stLT07VgwQI98sgj2rlzp6pWraq+ffvq6NGjWrBggVavXi1J8vX1veH+Dhw4oC5duujpp59WbGyssrOztWPHDiUlJeXpePv376927dpp3759qlatmjX+4YcfKjIy0uUs2KRJk3T//fdrzpw5OnjwoF566SVdvHhRCxculCSlp6erVatW+uOPP/Tmm2+qXLlymjdvnjp06KCtW7eqdu3aeeoRAHDrCFwAgDvC1KlT9fjjj6tfv36SpEqVKqlTp04aMmSIKlasKEm677775OXlpaCgoBz3Pv3zn/+0/js7O1utWrXS5s2bNXv2bI0ePVrly5dX+fLlVaxYsTzdN7Vt2zZlZGRo8uTJ8vHxkSS1adMmj0crtW7dWhUqVNCHH36oMWPGSJL27NmjjRs3KiYmxqXWy8tLX3zxhdzc3CRJxYsXV79+/RQTE6N7771X8+fP1/bt27Vjxw7VqFHD6m3//v3617/+pU8//TTPfQIAbg2XFAIA7gi1atXS7t27tWTJEg0ePFhOp1Pvvfee6tSpo+3bt193/T179ujxxx9XUFCQ3Nzc5OHhoX379mn//v350l+dOnXk5uambt266auvvlJycvItba9YsWLq06ePPvroI2VmZkqSZs6cqbCwMLVu3dqltlOnTlbYkv68HNEYY10yuXz5ctWuXVtVq1ZVZmam9YiIiNDmzZtvqU8AwK0hcAEA7hienp5q3769Jk6cqG3btmnZsmU6f/683njjjWuul5qaqtatW+vw4cMaP3681q5dq82bN6tu3bq6ePFivvRWtWpVff3110pOTtbjjz+usmXLKjIyUkeOHMnzNnv37q0TJ05o6dKlysjI0Ny5c9WrVy/rnrVLAgMDXZ77+fnJw8NDx48fl/Tn/Wbbtm2Th4eHyyM2Nlbx8fF57g8AcOu4pBAAcMdq06aN6tatqz179lyzbv369Tp69Ki+/vpr1a1b1xpPTk5W+fLlr7uf4sWLKz093WXs9OnTOeratm2rtm3bKiUlRcuWLdOQIUP0t7/9TatWrbrBI3JVvnx5tW3bVh9++KGysrJ04sQJ/e1vf8tRd/nvkElSUlKSMjIyrElG/P39VadOHc2cOTNPfQAA7EPgAgDcEf744w8FBQW5jF24cEHx8fGqWbOmNebp6ZnjrNWFCxesZZfExcXp0KFDOdZNS0vLse/y5cvr6NGjOnv2rEqVKiVJWrFixVV79fX1VdeuXbVx40Z9/PHHN3GUOfXr109dunRRYmKi/vrXv6pSpUo5ar766iuNHz/euqzw888/l8Ph0AMPPCBJatmypZYuXarQ0FCFhobeUj8AgPxF4AIA3BFq166tTp06qU2bNgoJCdGxY8c0adIknTx5UoMHD7bqqlevrtWrV2vFihXy8/NTpUqV1KhRI5UqVUoDBgzQSy+9pN9//10xMTEqV66cyz6qV6+uzMxMvfvuu2rSpIl8fX1VrVo1de7cWf/85z/Vu3dv9evXT7t379YHH3zgsu6MGTMUFxendu3aKSQkRAcPHtS8efNy3G91szp06KCyZctq/fr1WrBgQa41aWlpeuyxxxQVFaWDBw/qxRdfVJcuXVS9enVJUo8ePTRjxgw1b95cw4cPV9WqVXXmzBlt27ZN6enpio2NvaUeAQC3wAAAcAeYMmWKadu2rSlXrpzx9PQ0oaGhpm3btmb16tUudbt27TJNmzY1Pj4+RpKZNWuWMcaYb775xtSsWdMUL17c1KlTxyxdutQ0a9bMdOjQwVo3IyPDREVFmaCgIONwOEyzZs2sZR999JH5y1/+YkqUKGFatWplfvzxR5ftx8XFmQ4dOpiQkBDj6elpKlSoYAYPHmxSUlJu6PhmzZplJJkTJ07kWNa/f3/j5+dnLly4kGOZJBMbG2uGDh1q/P39TalSpUz37t1NcnKyS11ycrIZMmSIqVChgvHw8DAhISGmffv25uuvv76h/gAA9nAYY0zBRj4AAIqu7OxsVa5cWR07dtSkSZNyLHc4HHr77bc1fPjwAugOAHCruKQQAIACkJ6erh07duizzz5TfHy8Bg4cWNAtAQBsQOACAKAAHDt2TA8++KDKli2ryZMnq1q1agXdEgDABlxSCAAAAAA24YePAQAAAMAmBC4AAAAAsAmBCwAAAABsQuACAAAAAJsQuAAAAADAJgQuAAAAALAJgQsAAAAAbELgAgAAAACb/D8vnyBgtk+1XAAAAABJRU5ErkJggg==",
      "text/plain": [
       "<Figure size 1000x600 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "## DATA EXPLORATION ##\n",
    "\n",
    "unique_status_types_count = fb_live['status_type'].value_counts()\n",
    "\n",
    "colors = ['Blue', 'Red', 'Green']\n",
    "\n",
    "plt.figure(figsize = (10,6))\n",
    "sns.barplot(x = unique_status_types_count.index, y = unique_status_types_count.values, alpha = 0.8, palette = colors)\n",
    "\n",
    "plt.title('Frequency Distribution of Status Types')\n",
    "plt.ylabel('Frequency', fontsize    = 11)\n",
    "plt.xlabel('Status Type', fontsize = 11)\n",
    "\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "**Insights:**\n",
    "\n",
    "This bar chart shows the frequency distribution of different status types — photo, video, and text — in the dataset. From the chart, I can see  that photos are the most frequently posted content type, followed by videos and then text posts.\n",
    "\n",
    "This means a few thing, first, despite photos being the most common type of content, earlier analysis indicated that videos are leading in terms of total engagement. This suggests that while users or content creators may post more photos, it's the video content that garners more interaction overall. The higher engagement rates for videos suggest that they are more effective at capturing user attention and encouraging interactions such as likes, comments, and shares compared to photos and text.\n",
    "\n",
    "Even though they are less frequent, videos seem to have a stronger impact per post. This could be due to the dynamic nature of videos, which can convey more information and emotion, providing a richer and more immersive experience. The data implies that while users may encounter more photos in their feeds, they choose to engage more deeply with video content. For content strategists and social media marketers, this insight underscores the importance of investing in video content as part of their digital marketing efforts to maximize audience engagement."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Transform & Drop Features"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "metadata": {},
   "outputs": [],
   "source": [
    "########################################\n",
    "# Transform 'Status_type' features\n",
    "######################################### \n",
    "# turn status type into integers\n",
    "fb_live['status_type'] = fb_live['status_type'].map({'video': 1,'text': 0, 'photo' : 0})"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 10,
   "metadata": {},
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "/var/folders/hh/3r8kbn6x7w5345pgy8wcmpgh0000gn/T/ipykernel_89518/559422812.py:18: MatplotlibDeprecationWarning: Auto-removal of overlapping axes is deprecated since 3.6 and will be removed two minor releases later; explicitly call ax.remove() as needed.\n",
      "  plt.subplot(3, 3, i)  # Preparing subplots dynamically\n"
     ]
    },
    {
     "data": {
      "image/png": "",
      "text/plain": [
       "<Figure size 1200x800 with 8 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "from datetime import datetime\n",
    "\n",
    "# Assuming 'fb_live' DataFrame is already defined and loaded with data\n",
    "\n",
    "# Setting figure size for the plots\n",
    "fig, ax = plt.subplots(figsize=(12, 8))\n",
    "\n",
    "# Rearranging the columns from dataframe to focus on engagement metrics, explicitly excluding 'time_published' and 'status_type' for visualization\n",
    "engagement_columns = ['num_comments', 'num_shares', 'num_likes', 'num_loves', \n",
    "                      'num_wows', 'num_hahas', 'num_sads', 'num_angrys']\n",
    "engagement_df = fb_live[engagement_columns + ['time_published', 'status_type']]\n",
    "\n",
    "# Convert the date string to a datetime object marking when reactions were introduced\n",
    "line_date = datetime.strptime('2016-03-01', '%Y-%m-%d')\n",
    "\n",
    "# Looping through the engagement metrics to create visualizations\n",
    "for i, col in enumerate(engagement_columns, start=1):  # Using enumerate to manage the loop index\n",
    "    plt.subplot(3, 3, i)  # Preparing subplots dynamically\n",
    "    \n",
    "    # Creating scatterplot for each engagement metric over time, colored by 'status_type'\n",
    "    sns.scatterplot(data=fb_live, x='time_published', y=col, hue='status_type')\n",
    "    \n",
    "    plt.xlabel(col)\n",
    "    plt.ylabel('Count')\n",
    "    plt.axvline(x=line_date, color='purple', linestyle='--')  # Line indicating when reactions were introduced\n",
    "    \n",
    "    if i == len(engagement_columns):  # Break if the last engagement metric is plotted\n",
    "        break\n",
    "\n",
    "plt.tight_layout()  # Adjust layout to not overlap subplots\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "**Scatter plots Insights:**\n",
    "\n",
    "These scatter plots show the relationship between various Facebook engagement metrics—such as comments, shares, and reactions—and the publication time of posts, differentiated by the media type present in the dataset. Here, video represents statuts_type 1 (in orange), whereas non-video media type (photo and text) is defined in blue. Additionally, the vertical purple line in each graph marks March 2016, which is the moment when Facebook introduced a 'broader' choice of reactions beyond the simple \"like,\" which includes \"love\", \"haha\", \"wow\", \"sad\", and \"angry\" (Dehouche, 2020). We can see that after the introduction of such features, the data is significantly higher, meaning that interaction on Facebook increased.\n",
    "   \n",
    "In her 2018 article, Jan Fox explores how these reactions can be habit-forming. She notes the overwhelming preference for the \"love\" reaction—a whopping 300 billion times used—since its inception, indicating its prime role in user interactions (Fox, 2018). \n",
    "\n",
    "Another interesting observation from these plots is the increase in video shares, where the orange dots are significantly higher in frequency than the blue. This hints at increased user behavior, tilting towards video sharing. \n",
    "\n",
    "However, the reasons behind sharing and commenting are hard to 'pinpoint' and layered—humor, engagement, awareness—especially recently on social media, where people are increasingly using the platform to raise awareness on certain current conflicts. \n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 11,
   "metadata": {},
   "outputs": [],
   "source": [
    "########################################\n",
    "# Add & create a Reaction feature\n",
    "######################################### \n",
    "# add and create post genres\n",
    "fb_live['loved']    = fb_live['num_loves'] + fb_live['num_wows'] # create the 'love' reaction based on numbers of love and wows\n",
    "fb_live['funny']     = fb_live['num_hahas'] # create the 'funny' reaction based on numbers of 'haha'\n",
    "fb_live['unhappy'] = fb_live['num_sads'] + fb_live['num_angrys'] # create the 'unhappy' reaction based on numbers of sads and angrys.\n",
    "\n",
    "# Note I did not include 'like' as they could apply for all 3 and also are not 'new' reactions\n",
    "# Also, I did not change numbers of comments or shares since, \n",
    "# as discussed above, these are hard to categorize into just one category. \n",
    "\n",
    "# create a new column 'Reaction' that contains the genre with the value for each post\n",
    "fb_live['Reaction'] = fb_live[['loved', 'funny', 'unhappy']].idxmax(axis=1)\n",
    "\n",
    "# Turn Reaction into integers\n",
    "fb_live['Reaction']  = fb_live['Reaction'].map({'loved': 1, 'funny': 2, 'unhappy': 3})"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 12,
   "metadata": {},
   "outputs": [],
   "source": [
    "########################################\n",
    "# Transform  'Time Published' features\n",
    "########################################\n",
    "\n",
    "# extract and convert date types\n",
    "fb_live['year'] = fb_live['time_published'].dt.year #extract the year\n",
    "fb_live['month'] = fb_live['time_published'].dt.month # extract the month\n",
    "fb_live['date'] = fb_live['time_published'].dt.day # extract the date\n",
    "fb_live['time'] = fb_live['time_published'].dt.hour * 60 + fb_live['time_published'].dt.minute # extract the time\n",
    "\n",
    "# create time bins\n",
    "fb_live['time'] = pd.cut(fb_live['time'], bins=[0, 9*60, 18*60, np.inf], \n",
    "                         labels=['morning', 'day', 'evening']) # divide time into morning, day, evening "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 13,
   "metadata": {},
   "outputs": [],
   "source": [
    "########################################\n",
    "# Drop and Transform features\n",
    "########################################\n",
    "# drop the original columns for the converted information\n",
    "fb_data = fb_live.drop(labels = ['time_published', \n",
    "                                 'status_type', \n",
    "                                 'time'], axis   = 1)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "<hr style=\"height:.9px;border:none;color:#333;background-color:#333;\" /><br>\n",
    "\n",
    "<strong>Check that the features were changed/created.</strong><br>\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 14,
   "metadata": {
    "scrolled": true
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>status_id</th>\n",
       "      <th>num_comments</th>\n",
       "      <th>num_shares</th>\n",
       "      <th>num_likes</th>\n",
       "      <th>num_loves</th>\n",
       "      <th>num_wows</th>\n",
       "      <th>num_hahas</th>\n",
       "      <th>num_sads</th>\n",
       "      <th>num_angrys</th>\n",
       "      <th>loved</th>\n",
       "      <th>funny</th>\n",
       "      <th>unhappy</th>\n",
       "      <th>Reaction</th>\n",
       "      <th>year</th>\n",
       "      <th>month</th>\n",
       "      <th>date</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>1</td>\n",
       "      <td>512</td>\n",
       "      <td>262</td>\n",
       "      <td>432</td>\n",
       "      <td>92</td>\n",
       "      <td>3</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>95</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>2018</td>\n",
       "      <td>4</td>\n",
       "      <td>22</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>2</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>204</td>\n",
       "      <td>9</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>9</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>2018</td>\n",
       "      <td>4</td>\n",
       "      <td>18</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>3</td>\n",
       "      <td>614</td>\n",
       "      <td>72</td>\n",
       "      <td>418</td>\n",
       "      <td>70</td>\n",
       "      <td>10</td>\n",
       "      <td>2</td>\n",
       "      <td>0</td>\n",
       "      <td>3</td>\n",
       "      <td>80</td>\n",
       "      <td>2</td>\n",
       "      <td>3</td>\n",
       "      <td>1</td>\n",
       "      <td>2018</td>\n",
       "      <td>4</td>\n",
       "      <td>18</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>4</td>\n",
       "      <td>9</td>\n",
       "      <td>1</td>\n",
       "      <td>167</td>\n",
       "      <td>3</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>3</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>2018</td>\n",
       "      <td>4</td>\n",
       "      <td>11</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>5</td>\n",
       "      <td>4</td>\n",
       "      <td>0</td>\n",
       "      <td>213</td>\n",
       "      <td>5</td>\n",
       "      <td>4</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>9</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>2018</td>\n",
       "      <td>4</td>\n",
       "      <td>9</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "   status_id  num_comments  num_shares  num_likes  num_loves  num_wows  num_hahas  num_sads  num_angrys  loved  funny  unhappy  Reaction  year  month  date\n",
       "0          1           512         262        432         92         3          1         1           0     95      1        1         1  2018      4    22\n",
       "1          2             0           0        204          9         0          0         0           0      9      0        0         1  2018      4    18\n",
       "2          3           614          72        418         70        10          2         0           3     80      2        3         1  2018      4    18\n",
       "3          4             9           1        167          3         0          0         0           0      3      0        0         1  2018      4    11\n",
       "4          5             4           0        213          5         4          0         0           0      9      0        0         1  2018      4     9"
      ]
     },
     "execution_count": 14,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# Check that the columns were dropped in fb_data\n",
    "fb_data.head(n=5)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "<hr style=\"height:.9px;border:none;color:#333;background-color:#333;\" /><br>\n",
    "\n",
    "<strong>User-Defined Functions</strong><br>\n",
    "Run the following code to load user-defined functions."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 15,
   "metadata": {
    "code_folding": []
   },
   "outputs": [],
   "source": [
    "########################################\n",
    "# scree_plot\n",
    "########################################\n",
    "def scree_plot(pca_object, export = False):\n",
    "    # building a scree plot\n",
    "\n",
    "    # setting plot size\n",
    "    fig, ax = plt.subplots(figsize=(10, 8))\n",
    "    features = range(pca_object.n_components_)\n",
    "\n",
    "\n",
    "    # developing a scree plot\n",
    "    plt.plot(features,\n",
    "             pca_object.explained_variance_ratio_,\n",
    "             linewidth = 2,\n",
    "             marker = 'o',\n",
    "             markersize = 10,\n",
    "             markeredgecolor = 'black',\n",
    "             markerfacecolor = 'grey')\n",
    "\n",
    "    # setting more plot options\n",
    "    plt.title('Scree Plot')\n",
    "    plt.xlabel('PCA feature')\n",
    "    plt.ylabel('Explained Variance')\n",
    "    plt.xticks(features)\n",
    "    \n",
    "    # drawing a cutoff line if specified\n",
    "    if cutoff_line is not None:\n",
    "        plt.axvline(x=cutoff_line, color='red', linestyle='--', linewidth=2)\n",
    "        plt.text(cutoff_line + 0.1, plt.gca().get_ylim()[1] * 0.9, \n",
    "                 'Cutoff at Component {}'.format(cutoff_line), color='red')\n",
    "\n",
    "\n",
    "    if export == True:\n",
    "    \n",
    "        # exporting the plot\n",
    "        plt.savefig('./analysis_images/top_customers_correlation_scree_plot.png')\n",
    "        \n",
    "    # displaying the plot\n",
    "    plt.show()\n",
    "    \n",
    "    \n",
    "# I couldn't add the red line cut'off so I create another scree_plot. \n",
    "\n",
    "def scree_plot(pca_object, cutoff_line=None, export=False):\n",
    "    # setting plot size\n",
    "    fig, ax = plt.subplots(figsize=(10, 8))\n",
    "    features = range(pca_object.n_components_)\n",
    "\n",
    "    # developing a scree plot\n",
    "    plt.plot(features,\n",
    "             pca_object.explained_variance_ratio_,\n",
    "             linewidth=2,\n",
    "             marker='o',\n",
    "             markersize=10,\n",
    "             markeredgecolor='black',\n",
    "             markerfacecolor='grey')\n",
    "\n",
    "    # setting more plot options\n",
    "    plt.title('Scree Plot')\n",
    "    plt.xlabel('PCA feature')\n",
    "    plt.ylabel('Explained Variance')\n",
    "    plt.xticks(features)\n",
    "    \n",
    "    # drawing a cutoff line if specified\n",
    "    if cutoff_line is not None:\n",
    "        plt.axvline(x=cutoff_line, color='red', linestyle='--', linewidth=2)\n",
    "        plt.text(cutoff_line + 0.1, plt.gca().get_ylim()[1] * 0.9, \n",
    "                 'Cutoff at Component {}'.format(cutoff_line), color='red')\n",
    "\n",
    "    if export:\n",
    "        # exporting the plot\n",
    "        plt.savefig('./analysis_images/top_customers_correlation_scree_plot.png')\n",
    "\n",
    "    # displaying the plot\n",
    "    plt.show()\n",
    "\n",
    "########################################\n",
    "# unsupervised_scaler\n",
    "########################################\n",
    "def scaler(df):\n",
    "    \"\"\"\n",
    "    Standardizes a dataset (mean = 0, variance = 1). Returns a new DataFrame.\n",
    "    Requires sklearn.preprocessing.StandardScaler()\n",
    "    \n",
    "    PARAMETERS\n",
    "    ----------\n",
    "    df     | DataFrame to be used for scaling\n",
    "    \"\"\"\n",
    "\n",
    "    # INSTANTIATING a StandardScaler() object\n",
    "    scaler = StandardScaler(copy = True)\n",
    "\n",
    "\n",
    "    # FITTING the scaler with the data\n",
    "    scaler.fit(df)\n",
    "\n",
    "\n",
    "    # TRANSFORMING our data after fit\n",
    "    x_scaled = scaler.transform(df)\n",
    "\n",
    "    \n",
    "    # converting scaled data into a DataFrame\n",
    "    new_df = pd.DataFrame(x_scaled)\n",
    "\n",
    "\n",
    "    # reattaching column names\n",
    "    new_df.columns = list(df.columns)\n",
    "    \n",
    "    return new_df"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "<hr style=\"height:.9px;border:none;color:#333;background-color:#333;\" /><br>\n",
    "\n",
    "<h4>Scale the data.</h4>"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 16,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "status_id       439684.000000\n",
      "num_comments    600747.659991\n",
      "num_shares       15777.648758\n",
      "num_likes       199283.755500\n",
      "num_loves         1623.436268\n",
      "num_wows           103.026569\n",
      "num_hahas            8.475518\n",
      "num_sads             2.985442\n",
      "num_angrys           0.306909\n",
      "loved             2131.340537\n",
      "funny                8.475518\n",
      "unhappy              3.573000\n",
      "Reaction             0.062159\n",
      "year                 3.658704\n",
      "month               13.026085\n",
      "date                76.553768\n",
      "dtype: float64\n",
      "status_id       1.0\n",
      "num_comments    1.0\n",
      "num_shares      1.0\n",
      "num_likes       1.0\n",
      "num_loves       1.0\n",
      "num_wows        1.0\n",
      "num_hahas       1.0\n",
      "num_sads        1.0\n",
      "num_angrys      1.0\n",
      "loved           1.0\n",
      "funny           1.0\n",
      "unhappy         1.0\n",
      "Reaction        1.0\n",
      "year            1.0\n",
      "month           1.0\n",
      "date            1.0\n",
      "dtype: float64\n"
     ]
    }
   ],
   "source": [
    "# applying the unsupervised_scaler function\n",
    "fb_live_scaled = scaler(df = fb_data)\n",
    "\n",
    "\n",
    "\n",
    "# checking pre- and post-scaling variance\n",
    "print(np.var(fb_data)) #pre-scaled data\n",
    "print(np.var(fb_live_scaled)) # scaled data"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "<hr style=\"height:.9px;border:none;color:#333;background-color:#333;\" /><br>\n",
    "\n",
    "<h2>Part II: Principal Component Analysis</h2>\n",
    "\n",
    "<h4>a) Develop a PCA object with no limit to principal components and analyze its scree plot.</h4>"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 17,
   "metadata": {},
   "outputs": [],
   "source": [
    "relevant_features = ['num_comments', 'num_shares', 'num_likes', 'num_loves',\n",
    "                     'num_wows', 'num_hahas', 'num_sads', 'num_angrys',\n",
    "                     'loved', 'funny', 'unhappy', 'Reaction'] # picking the relevant features for my analysis"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "<h4>b) Develop a scree plot and determine how many principal components to retain.</h4>"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 18,
   "metadata": {
    "scrolled": false
   },
   "outputs": [
    {
     "data": {
      "image/png": "",
      "text/plain": [
       "<Figure size 1000x800 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "               PC0   PC1\n",
      "num_comments  0.29 -0.00\n",
      "num_shares    0.38 -0.13\n",
      "num_likes     0.12 -0.07\n",
      "num_loves     0.41 -0.15\n",
      "num_wows      0.24 -0.18\n",
      "num_hahas     0.32 -0.07\n",
      "num_sads      0.17  0.60\n",
      "num_angrys    0.28  0.09\n",
      "loved         0.41 -0.17\n",
      "funny         0.32 -0.07\n",
      "unhappy       0.23  0.57\n",
      "Reaction      0.05  0.44\n",
      "               PC0   PC1\n",
      "num_comments  0.29 -0.00\n",
      "num_shares    0.38 -0.13\n",
      "num_likes     0.12 -0.07\n",
      "num_loves     0.41 -0.15\n",
      "num_wows      0.24 -0.18\n",
      "num_hahas     0.32 -0.07\n",
      "num_sads      0.17  0.60\n",
      "num_angrys    0.28  0.09\n",
      "loved         0.41 -0.17\n",
      "funny         0.32 -0.07\n",
      "unhappy       0.23  0.57\n",
      "Reaction      0.05  0.44\n"
     ]
    }
   ],
   "source": [
    "# INSTANTIATING a PCA object with no limit to principal components\n",
    "pca = PCA(n_components=None, random_state=702)\n",
    "\n",
    "# FITTING and TRANSFORMING the scaled data\n",
    "fb_live_pca = pca.fit_transform(fb_live_scaled[relevant_features])\n",
    "\n",
    "# Calling the scree_plot function with the cutoff_line parameter set to 1, \n",
    "# so that it aligns with the elbow and I will have 2 PCA (PC0 and PC1)\n",
    "\n",
    "# generating the plot and include a cutoff line at component 1.\n",
    "scree_plot(pca_object=pca, cutoff_line=1)\n",
    "\n",
    "# Presenting the factor loadings for the retained principal components\n",
    "factor_loadings = pd.DataFrame(pca.components_[:2].T, columns=['PC0', 'PC1'], index=relevant_features)\n",
    "print(factor_loadings.round(2))\n",
    "\n",
    "# Presenting the factor loadings for the retained principal components\n",
    "factor_loadings = pd.DataFrame(pca.components_[:2].T, columns=['PC0', 'PC1'], index=relevant_features)\n",
    "print(factor_loadings.round(2))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 19,
   "metadata": {},
   "outputs": [],
   "source": [
    "# INSTANTIATING a new model using the first three principal components\n",
    "pca_2 = PCA(n_components = 2, # according to scree plot (elbow criteria) and variance\n",
    "            random_state = 702)\n",
    "\n",
    "\n",
    "# FITTING and TRANSFORMING the purchases_scaled\n",
    "#fb_live_pca_3 = pca_3.fit_transform(fb_live_scaled[relevant_features])\n",
    "fb_live_pca = pca_2.fit_transform(fb_live_scaled[relevant_features])\n",
    "\n",
    "\n",
    "fb_df = pd.DataFrame(data = fb_live_pca)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Question 3 \n",
    "\n",
    "I decided to draw the cutoff line at the second principal component in the scree plot for several reason:\n",
    "\n",
    "- Elbow Criteria: The most significant drop in the explained variance occurs after the second component, which is indicative of the \"elbow\" in the scree plot. This is a widely used metrics that suggests that components beyond the elbow will not add substantial value to our model.\n",
    "\n",
    "- Variance Retention: The first two components collectively explain a significant portion of the total variance within the dataset. This retention is crucial for capturing the essence of the data without overly complexifying the model or doing data dumping.\n",
    "\n",
    "- Interpretability: With two components, the model remains interpretable and manageable. Each principal component can be understood and described in terms of original features, which aligns well with the goals of PCA to reduce dimensionality while preserving the meaning and accuracy/reliability behind the data.\n",
    "\n",
    "- Simplicity and Parsimony: Retaining fewer principal components aligns with the principle of parsimony, avoiding overfitting and making the model simpler and more generalizable.\n",
    "\n",
    "- Strategic Analysis: From a strategic standpoint, focusing on three dimensions allows for a concentrated analysis of content engagement patterns. It will enables me to create a more targeted approach in advising on content creation, especially for video content, which thrives on high engagement, emotional connection, and entertainment value."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "<hr style=\"height:.9px;border:none;color:#333;background-color:#333;\" /><br>\n",
    "\n",
    "<strong>OPTIONAL STEP</strong><br>Run the following code to compare the variance of the unlimited PCA model with the variance of the reduced PCA model to  show that the explained variance for each principal component does not change after dropping smaller PCs."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "<h4>c) Present the factor loadings for the retained principal components.</h4>"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 20,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\n",
      "MAX Components Factor Loadings\n",
      "------------------------------\n",
      "                0     1     2     3     4     5     6     7     8     9     10    11\n",
      "num_comments  0.29 -0.00 -0.05  0.43 -0.38 -0.03  0.44  0.60 -0.17 -0.00  0.00 -0.00\n",
      "num_shares    0.38 -0.13 -0.16  0.22 -0.04  0.01  0.24 -0.35  0.76 -0.00  0.00  0.00\n",
      "num_likes     0.12 -0.07 -0.17 -0.73 -0.61  0.14  0.16 -0.04 -0.00 -0.00 -0.00 -0.00\n",
      "num_loves     0.41 -0.15 -0.19  0.09  0.09  0.05  0.02 -0.36 -0.46 -0.53  0.37  0.00\n",
      "num_wows      0.24 -0.18 -0.30 -0.36  0.41 -0.43 -0.13  0.51  0.19 -0.13  0.09  0.00\n",
      "num_hahas     0.32 -0.07  0.60 -0.10 -0.04 -0.11 -0.10  0.01  0.02  0.01 -0.00  0.71\n",
      "num_sads      0.17  0.60 -0.11  0.04 -0.16 -0.31 -0.20 -0.08  0.00 -0.38 -0.54  0.00\n",
      "num_angrys    0.28  0.09 -0.03 -0.03  0.17  0.81 -0.30  0.29  0.10 -0.12 -0.17  0.00\n",
      "loved         0.41 -0.17 -0.23 -0.00  0.17 -0.05 -0.01 -0.20 -0.36  0.61 -0.43 -0.01\n",
      "funny         0.32 -0.07  0.60 -0.10 -0.04 -0.11 -0.10  0.01  0.02 -0.01  0.00 -0.71\n",
      "unhappy       0.23  0.57 -0.11  0.03 -0.10 -0.04 -0.27  0.01  0.03  0.42  0.59 -0.00\n",
      "Reaction      0.05  0.44  0.15 -0.27  0.45  0.12  0.69 -0.04 -0.05  0.00  0.00  0.00\n",
      "\n",
      "\n",
      "3 Components Factor Loadings\n",
      "------------------------------\n",
      "                 0     1\n",
      "num_comments  0.29 -0.00\n",
      "num_shares    0.38 -0.13\n",
      "num_likes     0.12 -0.07\n",
      "num_loves     0.41 -0.15\n",
      "num_wows      0.24 -0.18\n",
      "num_hahas     0.32 -0.07\n",
      "num_sads      0.17  0.60\n",
      "num_angrys    0.28  0.09\n",
      "loved         0.41 -0.17\n",
      "funny         0.32 -0.07\n",
      "unhappy       0.23  0.57\n",
      "Reaction      0.05  0.44\n",
      "\n"
     ]
    }
   ],
   "source": [
    "####################\n",
    "### Max PC Model ###\n",
    "####################\n",
    "# transposing pca components (pc = MAX)\n",
    "factor_loadings = pd.DataFrame(np.transpose(pca.components_))\n",
    "\n",
    "# naming rows as original features\n",
    "factor_loadings.index = relevant_features \n",
    "\n",
    "\n",
    "##################\n",
    "### 3 PC Model ###\n",
    "##################\n",
    "# transposing pca components (pc = 3)\n",
    "factor_loadings_2 = pd.DataFrame(np.transpose(pca_2.components_))\n",
    "\n",
    "# naming rows as original features\n",
    "factor_loadings_2.index = relevant_features \n",
    "\n",
    "\n",
    "# checking the results\n",
    "print(f\"\"\"\n",
    "MAX Components Factor Loadings\n",
    "------------------------------\n",
    "{factor_loadings.round(2)}\n",
    "\n",
    "\n",
    "3 Components Factor Loadings\n",
    "------------------------------\n",
    "{factor_loadings_2.round(2)}\n",
    "\"\"\")\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "<hr style=\"height:.9px;border:none;color:#333;background-color:#333;\" /><br>\n",
    "\n",
    "<h4> Question 3 : Interpret & Rename each of the retained principal components</h4>"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 21,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Buzz Factor</th>\n",
       "      <th>Heartstring Tug</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>loved</th>\n",
       "      <td>0.409860</td>\n",
       "      <td>-0.166397</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>num_loves</th>\n",
       "      <td>0.408585</td>\n",
       "      <td>-0.146277</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>num_shares</th>\n",
       "      <td>0.378479</td>\n",
       "      <td>-0.132569</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>num_hahas</th>\n",
       "      <td>0.317956</td>\n",
       "      <td>-0.074303</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>funny</th>\n",
       "      <td>0.317956</td>\n",
       "      <td>-0.074303</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>num_comments</th>\n",
       "      <td>0.292105</td>\n",
       "      <td>-0.004897</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>num_angrys</th>\n",
       "      <td>0.277029</td>\n",
       "      <td>0.086490</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>num_wows</th>\n",
       "      <td>0.242272</td>\n",
       "      <td>-0.176172</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>unhappy</th>\n",
       "      <td>0.234035</td>\n",
       "      <td>0.571431</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>num_sads</th>\n",
       "      <td>0.167208</td>\n",
       "      <td>0.597407</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>num_likes</th>\n",
       "      <td>0.118687</td>\n",
       "      <td>-0.068459</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Reaction</th>\n",
       "      <td>0.045310</td>\n",
       "      <td>0.442314</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "              Buzz Factor  Heartstring Tug\n",
       "loved            0.409860        -0.166397\n",
       "num_loves        0.408585        -0.146277\n",
       "num_shares       0.378479        -0.132569\n",
       "num_hahas        0.317956        -0.074303\n",
       "funny            0.317956        -0.074303\n",
       "num_comments     0.292105        -0.004897\n",
       "num_angrys       0.277029         0.086490\n",
       "num_wows         0.242272        -0.176172\n",
       "unhappy          0.234035         0.571431\n",
       "num_sads         0.167208         0.597407\n",
       "num_likes        0.118687        -0.068459\n",
       "Reaction         0.045310         0.442314"
      ]
     },
     "execution_count": 21,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "### how do I know what to call these?? Like what they represent??? \n",
    "\n",
    "\n",
    "# Naming each principal component for the 3 PC model\n",
    "factor_loadings_2.columns = ['Buzz Factor', \n",
    "                             'Heartstring Tug']\n",
    "\n",
    "# Checking the result for the first five rows\n",
    "factor_loadings_2.sort_values(by = 'Buzz Factor', ascending = False)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "**Insights per features for each PCA:**\n",
    "- **num_comments:** Moderately positively correlated with the Buzz Factor, indicating higher comments often lead to more engagement. However, it's negligibly correlated with the Heartstring Tug dimension, suggesting comments don't strongly evoke emotions.\n",
    "\n",
    "- **num_shares:** Strongly positively correlated with the Buzz Factor, implying widely shared posts garner higher engagement. But it moderately negatively correlates with the Heartstring Tug, implying highly shared posts may not evoke strong emotional responses.\n",
    "\n",
    "- **num_likes:** Weakly positively correlated with the Buzz Factor, suggesting more likes slightly increase engagement. However, it negligibly correlates with emotional engagement.\n",
    "\n",
    "- **num_loves:** Strongly positively correlated with both Buzz Factor and Heartstring Tug, implying posts with more love reactions have higher engagement and evoke emotions.\n",
    "\n",
    "- **num_sads:** Strongly positively correlated with Heartstring Tug, suggesting posts with more sad reactions evoke - stronger emotions. But it weakly correlates with the Buzz Factor, implying sad reactions don't significantly increase engagement.\n",
    "\n",
    "- **num_angrys:** Moderately positively correlated with Heartstring Tug, indicating posts with more anger reactions evoke strong emotions. However, it weakly correlates with the Buzz Factor, implying anger reactions don't substantially increase engagement.\n",
    "\n",
    "- **loved:** Strongly positively correlated with both Buzz Factor and Heartstring Tug, implying posts receiving more \"loved\" reactions have higher engagement and evoke emotions.\n",
    "\n",
    "- **funny:** Moderately positively correlated with Buzz Factor, suggesting funny posts increase engagement. But it strongly negatively correlates with Heartstring Tug, implying humor may not evoke strong emotions.\n",
    "\n",
    "- **unhappy:** Strongly positively correlated with Heartstring Tug, suggesting posts evoking more unhappiness generate strong emotional responses. But it weakly correlates with the Buzz Factor, implying unhappiness may not increase engagement significantly.\n",
    "\n",
    "- **Reaction:** Weakly correlates positively with the Buzz Factor and Heartstring Tug dimensions. This implies that posts with more diverse reactions tend to have slightly higher overall engagement and may evoke mild emotional responses from the audience. However, its impact on engagement levels or emotional resonance is not as strong as other features.\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "**Answer QUestion 3 b), c) & d):**\n",
    "\n",
    "Principal Component 1 (PC0): \"**\"Buzz Factor\"\"**\n",
    "PC1, the \"Buzz Factor,\" is characterized by high loadings in features associated with active and positive user engagement, such as 'num_loves' and 'num_shares'. A higher score on this component is likely reflective of content that generates a significant amount of social interaction, indicating that the audience not only notices the content but is moved to engage with it through actions that signal approval or endorsement. On the opposite end, a lower score might suggest content that, while possibly viewed, fails to stimulate a similar level of active response, indicating a potential area for creative improvement. This component is critical for identifying content with the potential for virality and high visibility. In essence, it's a gauge of the magnetic pull of content – how well it draws in and holds the audience's attention.\n",
    "\n",
    "Principal Component 2 (PC1): **\"\"Heartstring Tug\"\"**\n",
    "PC2, which I've termed \"Heartstring Tug,\" represents the emotional charge of content, particularly capturing negative emotional reactions such as sadness, as indicated by strong positive loadings on 'num_sads' and 'unhappy'. This dimension can be thought of as the depth of emotional engagement; high values here might be posts that evoke sympathy, thoughtfulness, or a shared sense of grief, which can lead to a strong viewer connection. On the other side, content that scores lower on this component may be less likely to evoke such deep emotional responses and might benefit from more emotive storytelling or content strategies to engage the audience on an emotional level. The \"Heartstring Tug\" is thus indicative of the emotional resonance of content – its power to move the audience emotionally and create a memorable impact."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 22,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Buzz Factor</th>\n",
       "      <th>Heartstring Tug</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>2.572016</td>\n",
       "      <td>-0.518176</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>-0.586794</td>\n",
       "      <td>-0.137111</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>3.714511</td>\n",
       "      <td>0.372471</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>-0.704337</td>\n",
       "      <td>-0.089141</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>-0.527981</td>\n",
       "      <td>-0.193421</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "   Buzz Factor  Heartstring Tug\n",
       "0     2.572016        -0.518176\n",
       "1    -0.586794        -0.137111\n",
       "2     3.714511         0.372471\n",
       "3    -0.704337        -0.089141\n",
       "4    -0.527981        -0.193421"
      ]
     },
     "execution_count": 22,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# analyzing factor strengths per customer\n",
    "factor_loadings = pca_2.transform(fb_live_scaled[relevant_features])\n",
    "\n",
    "# converting to a DataFrame\n",
    "#factor_loadings_df = pd.DataFrame(data= factor_loadings_3)\n",
    "factor_loadings_df = pd.DataFrame(data= factor_loadings)\n",
    "\n",
    "# renaming columns\n",
    "factor_loadings_df.columns = factor_loadings_2.columns\n",
    "\n",
    "\n",
    "# Checking the results for the first 15 rows\n",
    "factor_loadings_df.head(n=5)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "<hr style=\"height:.9px;border:none;color:#333;background-color:#333;\" /><br>\n",
    "\n",
    "<h2>Part III: Intro to Clustering</h2><br>\n",
    "First, build an agglomerative clustering model, note that we are interested in the <strong>dendrogram</strong> and the <strong>inertia plot</strong>. \n",
    "The goal is to develop an idea as to how many clusters would be appropriate given our analysis of these tools, and then to apply this number of clusters to a k-Means model. \n",
    "\n",
    "<strong> a) Check Variance amongst clusters and rescale our data since the variance amongst our features is no longer equal."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 23,
   "metadata": {
    "deletable": false,
    "editable": false
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "Buzz Factor        4.803013\n",
       "Heartstring Tug    2.037917\n",
       "dtype: float64"
      ]
     },
     "execution_count": 23,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# checking variance amongst clusters\n",
    "np.var(factor_loadings_df)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "<hr style=\"height:.9px;border:none;color:#333;background-color:#333;\" /><br>\n",
    "\n",
    "<h4>b) Generate a scaled version of the factor loadings dataset.</h4>"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 24,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Buzz Factor        4.803013\n",
      "Heartstring Tug    2.037917\n",
      "dtype: float64 \n",
      "\n",
      "\n",
      "Buzz Factor        1.0\n",
      "Heartstring Tug    1.0\n",
      "dtype: float64\n"
     ]
    }
   ],
   "source": [
    "# applying the unsupervised_scaler function\n",
    "pca_rescaled = scaler( df = factor_loadings_df)\n",
    "\n",
    "\n",
    "# checking pre- and post-scaling variance\n",
    "print(np.var(factor_loadings_df), '\\n\\n')\n",
    "print(np.var(pca_rescaled))"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "<hr style=\"height:.9px;border:none;color:#333;background-color:#333;\" /><br>\n",
    "\n",
    "<h2>Part IV: Agglomerative Clustering</h2><br>\n",
    "Agglomerative clustering starts with each observation in its own cluster. From here, it links observations  based on distance. There are three primary methods for calculating distance:<br><br>\n",
    "\n",
    "    ward (default) - groups observations into clusters in a way that minimizes \n",
    "    the variance amongst all clusters. Leads to clusters that are relatively\n",
    "    equal in size\n",
    "\n",
    "    average - merges clusters that have the smallest average distance\n",
    "    between all their points\n",
    "\n",
    "    complete - merges clusters that have the smallest maximum distance\n",
    "    between their points\n",
    "\n",
    "<br><br>\n",
    "<u>Primary Advantage</u><br>\n",
    "Able to generate a dendrogram to better understand data groupings and help determine the final number of clusters to develop.\n",
    "<br><br>\n",
    "<u>Primary Disadvantage</u><br>\n",
    "Unable to predict on new data.<br><br>"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 25,
   "metadata": {
    "deletable": false,
    "editable": false,
    "scrolled": false
   },
   "outputs": [
    {
     "data": {
      "image/png": "",
      "text/plain": [
       "<Figure size 1200x1200 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "# grouping data based on Ward distance\n",
    "standard_mergings_ward = linkage(y = pca_rescaled,\n",
    "                                 method = 'ward',\n",
    "                                 optimal_ordering = True)\n",
    "\n",
    "\n",
    "# setting plot size\n",
    "fig, ax = plt.subplots(figsize=(12, 12))\n",
    "\n",
    "# developing a dendrogram\n",
    "dendrogram(Z = standard_mergings_ward,\n",
    "           leaf_rotation  = 90       ,\n",
    "           leaf_font_size = 6        )\n",
    "\n",
    "\n",
    "# rendering the plot\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "**Dendogram Insights + Question 4) a):**\n",
    "\n",
    "The dendrogram shows two main clusters, indicated by the longest vertical branch separating one cluster from the rest. This visual graph, therefore, suggests that two clusters should capture enough structural differences in the data without overcomplicating the model. The Ward method, known for creating compact and balanced clusters by minimizing within-cluster variance, also reinforces the choice for 2 clusters by indicating how distinct the data points within each of these two clusters are.\n",
    "\n",
    "Selecting two clusters is also consistent with the PCA analysis I performed earlier, which showed that two principal components accounted for a substantial portion of the variance in the data. A two-cluster would probably reflect the underlying patterns identified by PCA, hence providing a coherent and interpretable clustering that aligns with the principal component structure. \n",
    "\n",
    "Finally, a simpler model with fewer clusters tends to be more robust and generalizable, reducing the risk of overfitting that often comes with too many clusters. Therefore, based on the dendrogram, the PCA results, and my goal to create a simple and interpretable model, I decided that two clusters would be the best choice for this analysis and dataset.\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "<hr style=\"height:.9px;border:none;color:#333;background-color:#333;\" /><br>\n",
    "\n",
    "<h4>a) Develop a k-Means model with three clusters.</h4>"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 26,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "Cluster\n",
       "0          0.95\n",
       "1          0.05\n",
       "Name: proportion, dtype: float64"
      ]
     },
     "execution_count": 26,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# INSTANTIATING a k-Means object with five clusters\n",
    "fb_live_k_pca = KMeans(n_clusters   = 2     ,\n",
    "                        n_init       = 'auto',\n",
    "                        random_state = 702   )\n",
    "\n",
    "\n",
    "# fitting the object to the data\n",
    "fb_live_k_pca.fit(pca_rescaled)\n",
    "\n",
    "\n",
    "# converting the clusters to a DataFrame\n",
    "fb_live_kmeans_pca = pd.DataFrame({'Cluster': fb_live_k_pca.labels_})\n",
    "\n",
    "\n",
    "# checking the results\n",
    "fb_live_kmeans_pca.value_counts(normalize=True).round(decimals=2)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "**Insights** :\n",
    "\n",
    "Based upon all the scree plot and the dendogram, the proportion I just found, it appears that the two clusters would explain 100% of the data, which aligns with my prior asusmption and reinforce my choice for the number of clusters (see Q4)a)). Again, when using only two principal components, a two-cluster solution provides a simple yet effective way to understand the data's structure. "
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "<hr style=\"height:.9px;border:none;color:#333;background-color:#333;\" /><br>\n",
    "\n",
    "<h4>b) Display the centroids (mean values) for each cluster.</h4>\n",
    "When you are finished, interpret their meaning. "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 27,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Buzz Factor</th>\n",
       "      <th>Heartstring Tug</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>-0.19</td>\n",
       "      <td>-0.04</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>3.39</td>\n",
       "      <td>0.67</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "   Buzz Factor  Heartstring Tug\n",
       "0        -0.19            -0.04\n",
       "1         3.39             0.67"
      ]
     },
     "execution_count": 27,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# storing cluster centers\n",
    "centroids_pca = fb_live_k_pca.cluster_centers_\n",
    "\n",
    "\n",
    "# converting cluster centers into a DataFrame\n",
    "centroids_pca_df = pd.DataFrame(centroids_pca).round(decimals = 2)\n",
    "\n",
    "\n",
    "# renaming principal components\n",
    "centroids_pca_df.columns = ['Buzz Factor', \n",
    "                            'Heartstring Tug']  # changed after\n",
    "\n",
    "\n",
    "# checking results (clusters = rows, pc = columns)\n",
    "centroids_pca_df.round(2)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "**Insights:**\n",
    "\n",
    "Cluster 0 has negative values for both the Buzz Factor and Heartstring Tug dimensions. This suggests that posts in this cluster generally receive lower engagement levels and produce less emotional responses.\n",
    "\n",
    "In contrast, Cluster 1 exhibits significantly higher values for both the Buzz Factor and Heartstring Tug dimensions. This indicates that posts in this cluster experience much higher engagement levels and evoke stronger emotional responses from the audience compared to Cluster 0.\n",
    "\n",
    "Overall,  Cluster 1 represents posts with exceptionally high engagement and emotional resonance, while Cluster 0 represents posts with lower levels of engagement and emotional impact."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Based upon this, let's answer **Question 4 c)** : Rename each segment based on interpretation\n",
    "\n",
    "- Cluster 0: **\"Mild Engagement and Emotional Resonance\"** (Buzz Factor: -0.19, Heartstring Tug: -0.04)\n",
    "Explanation: This cluster represents posts with moderate levels of engagement and a slight emotional appeal. Indeed, the cluster represents a group with steady yet moderate engagement levels and emotional responses, as indicated by the closer-to-zero centroid values for 'Buzz Factor' and 'Heartstring Tug'. While they may not generate extensive interaction, they still manage to evoke mild emotional responses from the audience, indicating a potential for deeper emotional engagement with improved content strategies.\n",
    "<br><br>\n",
    "- Cluster 1: **\"Intense Engagement and Emotional Connection\"** (Buzz Factor: 3.39, Heartstring Tug: 0.67)\n",
    "Explanation: This cluster consists of posts with exceptionally high levels of engagement and strong emotional resonance. These posts not only generate significant social interaction but also provoke intense emotional responses, fostering a deep emotional connection with the audience. I can assume that the post in this cluster have a profound impact on viewers, evoking strong emotions and creating a memorable experience."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "deletable": false,
    "editable": false,
    "run_control": {
     "frozen": true
    }
   },
   "source": [
    "<hr style=\"height:.9px;border:none;color:#333;background-color:#333;\" /><br>\n",
    "\n",
    "<h4>c) Run the following code to concatenate channel, region, and the PCA components into one DataFrame.</h4>"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 28,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Media</th>\n",
       "      <th>Reaction</th>\n",
       "      <th>Cluster</th>\n",
       "      <th>Buzz Factor</th>\n",
       "      <th>Heartstring Tug</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>2.57</td>\n",
       "      <td>-0.52</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>-0.59</td>\n",
       "      <td>-0.14</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>3.71</td>\n",
       "      <td>0.37</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>-0.70</td>\n",
       "      <td>-0.09</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>-0.53</td>\n",
       "      <td>-0.19</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "   Media  Reaction  Cluster  Buzz Factor  Heartstring Tug\n",
       "0      1         1        0         2.57            -0.52\n",
       "1      0         1        0        -0.59            -0.14\n",
       "2      1         1        1         3.71             0.37\n",
       "3      0         1        0        -0.70            -0.09\n",
       "4      0         1        0        -0.53            -0.19"
      ]
     },
     "execution_count": 28,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# Concatenating cluster memberships with principal components\n",
    "clst_pca_df = pd.concat([fb_live_kmeans_pca,\n",
    "                        factor_loadings_df],\n",
    "                        axis=1)\n",
    "\n",
    "# Correcting the rounding step and concatenating\n",
    "final_df = pd.concat([fb_live.loc[ : , ['status_type', 'Reaction']],\n",
    "                      clst_pca_df.round(decimals = 2)],\n",
    "                      axis = 1)\n",
    "\n",
    "# Renaming columns after ensuring your 'factor_loadings_df' aligns with these new names\n",
    "final_df.columns = ['Media', 'Reaction', 'Cluster',\n",
    "                    'Buzz Factor',\n",
    "                    'Heartstring Tug']\n",
    "\n",
    "# Checking the results\n",
    "final_df.head(n=5)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "<hr style=\"height:.9px;border:none;color:#333;background-color:#333;\" /><br>\n",
    "\n",
    "<h2>Part V: Create the clusters</h2><br>\n",
    "\n",
    "As mentionned earlier, I decided to partition the data into two clusters as adding more clusters would not significantly improve the variance in the dataset. \n",
    "\n",
    "By selecting two clusters, we can effectively capture the majority of the variability present in the data while maintaining a model that is relatively simple and interpretable.  Additionally, a two-cluster solution allows for clear differentiation between distinct segments within the dataset, facilitating easier interpretation and actionable insights for subsequent analysis. \n",
    "\n",
    "Now, I will **rename the channel and cluster**"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 29,
   "metadata": {
    "scrolled": true
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "       Media Reaction                                      Cluster  Buzz Factor  Heartstring Tug\n",
      "0      Video    loved      Mild Engagement and Emotional Resonance         2.57            -0.52\n",
      "1  Non-Video    loved      Mild Engagement and Emotional Resonance        -0.59            -0.14\n",
      "2      Video    loved  Intense Engagement and Emotional Connection         3.71             0.37\n",
      "3  Non-Video    loved      Mild Engagement and Emotional Resonance        -0.70            -0.09\n",
      "4  Non-Video    loved      Mild Engagement and Emotional Resonance        -0.53            -0.19\n"
     ]
    }
   ],
   "source": [
    "# renaming channels\n",
    "media_type   = {1 : 'Video',\n",
    "                0 : 'Non-Video'}\n",
    "\n",
    "\n",
    "final_df['Media'].replace(media_type, inplace = True)\n",
    "\n",
    "\n",
    "# renaming time of day\n",
    "#time_of_day  = {'morning' : 'Morning',\n",
    "                #'day'     : 'Day',\n",
    "                #'evening' : 'Evening'}\n",
    "Reaction = {1: 'loved',\n",
    "            2: 'funny', \n",
    "            3: 'unhappy'}\n",
    "\n",
    "\n",
    "final_df['Reaction'].replace(Reaction, inplace = True)\n",
    "\n",
    "\n",
    "# renaming clusters\n",
    "cluster_names = {0 : 'Mild Engagement and Emotional Resonance',\n",
    "                 1 : 'Intense Engagement and Emotional Connection'}\n",
    "\n",
    "\n",
    "final_df['Cluster'].replace(cluster_names, inplace = True)\n",
    "\n",
    "\n",
    "# checking results\n",
    "print(final_df.head(n = 5))"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "<h3>Create first segment: </h3><br>"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 30,
   "metadata": {
    "scrolled": false
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      " -----------------------------------------\n",
      "| Mild Engagement and Emotional Resonance |\n",
      " -----------------------------------------\n",
      "\n",
      "Proportion of Observations\n",
      "--------------------------\n",
      "0.95\n",
      "\n",
      "Centroids\n",
      "---------\n",
      "Buzz Factor       -0.19\n",
      "Heartstring Tug   -0.04\n",
      "\n",
      "Media\n",
      "-----\n",
      "Media\n",
      "Non-Video    0.69\n",
      "Video        0.31\n",
      "\n",
      "Reaction\n",
      "--------------\n",
      "Reaction\n",
      "funny      0.01\n",
      "loved      0.98\n",
      "unhappy    0.01\n",
      "\n"
     ]
    }
   ],
   "source": [
    "print(f\"\"\"\\\n",
    " -----------------------------------------\n",
    "| Mild Engagement and Emotional Resonance |\n",
    " -----------------------------------------\n",
    "\n",
    "Proportion of Observations\n",
    "--------------------------\n",
    "{round(len(final_df.loc[final_df['Cluster'] == 'Mild Engagement and Emotional Resonance']) /\n",
    "       len(final_df), ndigits=2)}\n",
    "\n",
    "Centroids\n",
    "---------\n",
    "{centroids_pca_df.loc[0].to_string(dtype=False, name=False)}\n",
    "\n",
    "Media\n",
    "-----\n",
    "{final_df.loc[final_df['Cluster'] == 'Mild Engagement and Emotional Resonance', 'Media']\n",
    "         .replace({1: 'Video', 0: 'Non-Video'})\n",
    "         .value_counts(normalize=True)\n",
    "         .round(2)\n",
    "         .sort_index()\n",
    "         .to_string()}\n",
    "\n",
    "Reaction\n",
    "--------------\n",
    "{final_df.loc[final_df['Cluster'] == 'Mild Engagement and Emotional Resonance', 'Reaction']\n",
    "         .replace({1: 'loved', 2: 'funny', 3: 'unhappy'})\n",
    "         .value_counts(normalize=True)\n",
    "         .round(2)\n",
    "         .sort_index()\n",
    "         .to_string()}\n",
    "\"\"\")\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "**Question 4)b)** : \n",
    "Present and interpret each segment using cluster centroids and give an example of a \"normal\" post in each segment.\n",
    "\n",
    "**Segment 1: Mild Engagement and Emotional Resonance**\n",
    "This segment represents posts that evoke a mild level of engagement but carry emotional resonance. The proportion of observations in this segment is substantial, accounting for 95% of the dataset. The centroid analysis reveals that the posts in this segment have a slightly negative \"Buzz Factor\" and a negligible \"Heartstring Tug,\" indicating a modest level of excitement and emotional appeal. Interestingly, while the majority of posts are non-videos (69%), a significant portion (31%) are videos, suggesting that sellers in this segment leverage visual content to enhance emotional connections with their audience. Furthermore, the reaction analysis shows that the overwhelming sentiment expressed by viewers is love (98%), indicating that these posts successfully elicit positive emotional responses, fostering a sense of affection and connection among the audience.\n",
    "\n",
    "**Example of a \"normal post\" in this segment:**\n",
    "A typical post in this segment could be a live video featuring a Thai fashion seller showcasing their latest collection (Dehouche, 2020). In the video, the seller could, for example, passionately describes each item, emphasizing its unique features and benefits, while engaging with viewers in real-time through comments and reactions. Especially since we know that the seller's genuine enthusiasm and personalized interaction with the audience can evoke feelings of warmth and appreciation, which would lead to a flood of \"loved\" reactions and supportive comments from viewers. Overall, this would be a great example of a 'normal post' for this segment as it would generate moderate engagement but fosters an emotional connection with the audience, hence improving maybe the number of followers for the online seller and thus - in the long term- improve the brand/sellers sales and profit.\n",
    "\n",
    "**Question 4)c):**\n",
    "\n",
    "In the \"Mild Engagement and Emotional Resonance\" segment, the content is mostly non-video media, with photos and text making up 69% of the posts. This indicates that while videos are included, they do not dominate this cluster as they do in segments with more intense engagement. Interestingly, despite a lower \"Buzz Factor\" and \"Heartstring Tug\" centroids, this segment—encompassing the vast majority of observations at 95%—still maintains a considerable amount of 'loved' reactions, which amount to 98%. This high proportion of 'loved' reactions suggests that even without the dynamic appeal of video content, non-video posts can elicit a warm response from the audience.\n",
    "\n",
    "The relatively low presence of 'funny' and 'unhappy' reactions at 1% each indicates that the content in this cluster typically elicits a positive and consistent, but not highly varied, emotional response. For content creators and marketers aiming at a broad and steady engagement without the peaks associated with more sensational or compelling video content, this cluster's data suggests a strategy of crafting reliably heartwarming or sentimentally engaging content, such as visually appealing images or relatable stories. This approach may not generate the intense buzz of video content but appears to foster a stable and positive connection with a broad user base.\n",
    "\n",
    "\n",
    "<h3>Create second segment: </h3><br>"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 50,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      " --------------------------------------------\n",
      "|Intense Engagement and Emotional Connection |\n",
      " --------------------------------------------\n",
      "\n",
      "Proportion of Observations\n",
      "--------------------------\n",
      "0.05\n",
      "\n",
      "\n",
      "Centroids\n",
      "---------\n",
      "Buzz Factor        3.39\n",
      "Heartstring Tug    0.67\n",
      "\n",
      "\n",
      "Media\n",
      "-----\n",
      "Media\n",
      "Non-Video    0.12\n",
      "Video        0.88\n",
      "  \n",
      "  \n",
      "Reaction\n",
      "--------------\n",
      "Reaction\n",
      "funny      0.03\n",
      "loved      0.89\n",
      "unhappy    0.08\n",
      "\n"
     ]
    }
   ],
   "source": [
    "# dynamic string with value counts for each demographic (cluster 2)\n",
    "print(f\"\"\"\\\n",
    " --------------------------------------------\n",
    "|Intense Engagement and Emotional Connection |\n",
    " --------------------------------------------\n",
    "\n",
    "Proportion of Observations\n",
    "--------------------------\n",
    "{round(len(final_df.loc[ : , \"Cluster\"][final_df.loc[ : , \"Cluster\"] == 'Intense Engagement and Emotional Connection']) /\n",
    "       len(final_df), ndigits = 2)}\n",
    "\n",
    "\n",
    "Centroids\n",
    "---------\n",
    "{centroids_pca_df.loc[1, :].to_string(dtype = False, name = False)}\n",
    "\n",
    "\n",
    "Media\n",
    "-----\n",
    "{final_df.loc[ : , \"Media\"][ final_df.loc[ : , 'Cluster' ] == 'Intense Engagement and Emotional Connection']\n",
    "\n",
    "         .value_counts(normalize = True)\n",
    "         .round(decimals = 2)\n",
    "         .sort_index().to_string(dtype = False, name = False)}\n",
    "  \n",
    "  \n",
    "Reaction\n",
    "--------------\n",
    "{final_df.loc[ : , \"Reaction\"][ final_df.loc[ : , 'Cluster' ] == 'Intense Engagement and Emotional Connection']\n",
    "\n",
    "         .value_counts(normalize = True)\n",
    "         .round(decimals = 2)\n",
    "         .sort_index().to_string(dtype = False, name = False)}\n",
    "\"\"\")\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "**Question 4)b)** : PART II\n",
    "\n",
    "**Segment 2: Intense Engagement and Emotional Connection**\n",
    "This segment comprises posts that create intense engagement and establish deep emotional connections with the audience. However, it only represents 5% of the observation, which is a small proportion of the dataset. The centroid analysis reveals significantly higher values for both the \"Buzz Factor\" and the \"Heartstring Tug,\" indicating a high level of excitement and emotional appeal in these posts. This is interesting since the majority of posts in this segment are videos (88%), which suggest that sellers in this category heavily rely on visual content, particularly live videos, to drive engagement and emotional resonance (Dehouche, 2020). It also implies that video might be a better way to foster response from the audience. The reaction analysis shows a balanced distribution of sentiments, with a notable emphasis on love (89%) - which included 'num_love' and 'num_wow' - indicating that these posts evoke positive emotional responses while also eliciting some humorous and unhappy reactions, but to a much lower extent (only 3% and 8% respectively).\n",
    "\n",
    "**Example of a \"normal post\" in this segment:**\n",
    "A typical post in this segment could be a live video featuring a Thai cosmetics seller hosting a makeup tutorial and Q&A session (Dehouche, 2020). In the video, the seller could, for example, demonstrates various makeup techniques, shares beauty tips, and engages with viewers by answering their questions and addressing their concerns in real-time. The high-energy presentation, combined with personalized interaction and valuable content, could help captivates the audience, which would in return lead to a surge of \"loved\" reactions and enthusiastic comments from viewers. Despite some occasional humorous or unhappy reactions, the overwhelming sentiment expressed by the audience is love. This therefore highlights the effectiveness of the 'hypothetical' post in fostering deep emotional connections and driving meaningful engagement.\n",
    "\n",
    "**Question 4)c):** PART II\n",
    "\n",
    "In the \"Intense Engagement and Emotional Connection\" segment, video content is a significant driver of interaction, making up 88% of the media type within this group. This prevalence of videos corresponds with the segment's high centroid values for \"Buzz Factor\" and \"Heartstring Tug,\" reinforcing the idea that videos are particularly effective at capturing attention and evoking strong emotional responses. The compelling nature of video content, which often includes live videos or interactive 'Facebook live', appears to resonate deeply with users, leading to a high proportion of 'loved' reactions—accounting for 89% of the reaction/responses on those posts. \n",
    "\n",
    "Despite representing a smaller portion of the observations (5%), this 'small' segment highlights the significant impact of videos on user engagement, suggesting that while videos are less frequent compared to other type of content on Facebook (which is text and photos), they have a powerful capacity to generate buzz and connect emotionally with the audience. The data implies that when videos do appear, they are likely to receive more engagement and a warmer reception from the users, which is shown by a dominance of 'loved' reactions. This concentration of positive responses may point towards a strategy for content creators and sellers to focus on producing high-quality video content to foster stronger engagement and build emotional bonds with their audience."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Overall takeways from clusters in regard of content diversity: \n",
    "\n",
    "\n",
    "This assignment aimed to create video content within the context of Facebook Live sellers in Thailand. The dataset shows patterns regarding engagement and media type preferences among users, and - as explained earlier - I divided the data into 2 segments: \"Mild Engagement and Emotional Resonance\" and \"Intense Engagement and Emotional Connection,\" to try and see a nuanced view of user interactions.\n",
    "\n",
    "For the \"Mild Engagement and Emotional Resonance\" segment, which accounts for 95% of observations, the predominant media type is non-video (69%). This aligns with historical trends on Facebook, where the platform initially emphasized photos and text-based content before the advent of video and live streaming capabilities (Nadkarnia et al., 2012). The dominance of non-video content in this segment suggests a lasting legacy of user behavior favoring these types of media, even though video content has gained traction (especially since TikTok with the emergence of 'reals'. The high percentage of 'loved' reactions (98%) within this segment indicates that, although not as dynamic as video, non-video content still successfully generates a positive engagement among users.\n",
    "\n",
    "In contrast, though much smaller, the \"Intense Engagement and Emotional Connection\" segment shows the engagement capability of video content, comprising 88% of the media within this category. The significantly higher values for \"Buzz Factor\" and \"Heartstring Tug\" underscore video content's effectiveness in eliciting strong emotional responses and higher excitement levels compared to non-video posts. This finding supports the company's stance on the high engagement value of videos, particularly in the context of Facebook Live, where sellers leverage live video streams to interact directly with viewers, creating an immersive and interactive shopping experience.\n",
    "\n",
    "So, when it comes to this assignment, I believe that understanding that the \"Mild Engagement and Emotional Resonance\" segment predominantly features non-video content yet still welcomes a lot of engagement just highlights how important it is to have a balanced content strategy. Because though video drives higher-intensity interactions, non-video content remains a significant component of user engagement on Facebook (Nadkarnia et al., 2012). In other words, I believe suggesting our client focus only on video content might overlook the nuanced engagement landscape on Facebook, where a mix of content types—tailored to different audience segments—can maximize reach and engagement and, therefore, profit.\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "<hr style=\"height:.9px;border:none;color:#333;background-color:#333;\" /><br>\n",
    "\n",
    "<h2>Part V: Model Building (Pre Steps)</h2><br>"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 32,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "Cluster\n",
       "0    2177\n",
       "1     120\n",
       "Name: count, dtype: int64"
      ]
     },
     "execution_count": 32,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "from sklearn.preprocessing import StandardScaler\n",
    "\n",
    "# standardizing the data for clustering\n",
    "scaler = StandardScaler()\n",
    "pca_rescaled = scaler.fit_transform(pd.DataFrame(data=fb_live_pca))\n",
    "\n",
    "\n",
    "# INSTANTIATING a k-Means object with clusters\n",
    "fb_live_k_pca = KMeans(n_clusters   = 2 ,\n",
    "                         n_init       = 'auto',\n",
    "                         random_state = 702   )\n",
    "\n",
    "\n",
    "# fitting the object to the data\n",
    "fb_live_k_pca.fit(pca_rescaled)\n",
    "\n",
    "\n",
    "# converting the clusters to a DataFrame\n",
    "fb_live_kmeans_pca = pd.DataFrame(data = {'Cluster': fb_live_k_pca.labels_})\n",
    "\n",
    "\n",
    "# checking cluster populations\n",
    "fb_live_kmeans_pca.iloc[: , 0].value_counts()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 33,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "Cluster_1\n",
       "1             120\n",
       "0            2177\n",
       "Name: count, dtype: int64"
      ]
     },
     "execution_count": 33,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# factorizing cluster results \n",
    "cluster_dummies = pd.get_dummies(data=fb_live_kmeans_pca['Cluster'], prefix='Cluster', \n",
    "                                 drop_first=True).astype(int)\n",
    "\n",
    "# checking results\n",
    "cluster_dummies.value_counts(normalize=False).sort_index(ascending=False)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 34,
   "metadata": {
    "scrolled": true
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Cluster</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "   Cluster\n",
       "0        0\n",
       "1        0\n",
       "2        1\n",
       "3        0\n",
       "4        0"
      ]
     },
     "execution_count": 34,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# checking which observations belong to each cluster\n",
    "fb_live_kmeans_pca.head(n = 5)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 35,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>status_type</th>\n",
       "      <th>is_video</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "   status_type  is_video\n",
       "0            1         1\n",
       "1            0         0\n",
       "2            1         1\n",
       "3            0         0\n",
       "4            0         0"
      ]
     },
     "execution_count": 35,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "## freate binary indicator for video content\n",
    "\n",
    "fb_live['is_video'] = (fb_live['status_type'] == 1).astype(int)\n",
    "\n",
    "# Preview the new column\n",
    "fb_live[['status_type', 'is_video']].head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 36,
   "metadata": {
    "scrolled": true
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "   Cluster_1\n",
      "0      False\n",
      "1      False\n",
      "2       True\n",
      "3      False\n",
      "4      False\n"
     ]
    }
   ],
   "source": [
    "# Creating dummy variables from the cluster labels for logistic regression\n",
    "cluster_df = pd.get_dummies(data=fb_live_kmeans_pca['Cluster'], prefix='Cluster', drop_first=True)\n",
    "\n",
    "# Previewing the first few rows\n",
    "print(cluster_df.head())"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 37,
   "metadata": {
    "scrolled": false
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Cluster_1    0.052242\n",
      "dtype: float64\n"
     ]
    }
   ],
   "source": [
    "# To see the distribution as a percentage\n",
    "cluster_distribution = cluster_df.sum() / len(fb_live_kmeans_pca)\n",
    "\n",
    "# Print the distribution\n",
    "print(cluster_distribution)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "<hr style=\"height:.9px;border:none;color:#333;background-color:#333;\" /><br>\n",
    "\n",
    "<h2>Part VI: Create the Models</h2><br>"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "<h3> Model 1: Original (relevant) x-features </h3><br>"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 38,
   "metadata": {},
   "outputs": [],
   "source": [
    "#### Model 1 ####\n",
    "\n",
    "# selecting x- and y-data\n",
    "x_data = fb_live[relevant_features]\n",
    "y_data = fb_live['is_video']\n",
    "\n",
    "\n",
    "# training and testing sets\n",
    "x_train, x_test, y_train, y_test = train_test_split(x_data,\n",
    "                                                    y_data,\n",
    "                                                    test_size    = 0.35,\n",
    "                                                    random_state = 702,\n",
    "                                                    stratify     = y_data)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 39,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\n",
      "Train-Test Gap: 0.015\n",
      "Test AUC Score: 0.717\n",
      "\n"
     ]
    }
   ],
   "source": [
    "# INSTANTIATING a logistic regression model\n",
    "model = sklearn.linear_model.LogisticRegression(solver       = 'lbfgs',\n",
    "                                                C            = 1,\n",
    "                                                max_iter     = 1000, # to avoid the warning abt iteration reached limit\n",
    "                                                random_state = 702)\n",
    "\n",
    "\n",
    "# FITTING the training data\n",
    "model_fit = model.fit(x_train, y_train)\n",
    "\n",
    "\n",
    "# PREDICTING based on the testing set\n",
    "model_pred = model_fit.predict(x_test) # predict_proba for multiclass\n",
    "\n",
    "\n",
    "# checking results\n",
    "train_acc = model_fit.score(x_train, y_train)\n",
    "test_acc  = model_fit.score(x_test , y_test )\n",
    "roc_score = roc_auc_score  (y_true      = y_test,\n",
    "                            y_score     = model_pred)\n",
    "\n",
    "\n",
    "print(f\"\"\"\n",
    "Train-Test Gap: {abs(train_acc - test_acc).round(decimals = 3)}\n",
    "Test AUC Score: {roc_score.round(decimals = 3)}\n",
    "\"\"\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 40,
   "metadata": {
    "scrolled": false
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\n",
      "True Negatives : 516\n",
      "False Positives: 16\n",
      "False Negatives: 146\n",
      "True Positives : 126\n",
      "\n"
     ]
    }
   ],
   "source": [
    "# unpacking the confusion matrix\n",
    "model_tn, \\\n",
    "model_fp, \\\n",
    "model_fn, \\\n",
    "model_tp = confusion_matrix(y_true = y_test, y_pred = model_pred).ravel()\n",
    "\n",
    "\n",
    "# printing each result one-by-one\n",
    "print(f\"\"\"\n",
    "True Negatives : {model_tn}\n",
    "False Positives: {model_fp}\n",
    "False Negatives: {model_fn}\n",
    "True Positives : {model_tp}\n",
    "\"\"\")"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "<h3> Model 2: Retained principal components </h3><br>"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 41,
   "metadata": {},
   "outputs": [],
   "source": [
    "#### Model 2 ####\n",
    "\n",
    "# selecting x- and y-data\n",
    "x_data = pd.DataFrame(data=fb_live_pca)\n",
    "y_data = fb_live['is_video']\n",
    "\n",
    "\n",
    "# training and testing sets\n",
    "x_train, x_test, y_train, y2_test = train_test_split(x_data,\n",
    "                                                    y_data,\n",
    "                                                    test_size    = 0.35,\n",
    "                                                    random_state = 702,\n",
    "                                                    stratify     = y_data)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 42,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\n",
      "Train-Test Gap: 0.002\n",
      "Test AUC Score: 0.698\n",
      "\n"
     ]
    }
   ],
   "source": [
    "# INSTANTIATING a logistic regression model\n",
    "model = sklearn.linear_model.LogisticRegression(solver       = 'lbfgs',\n",
    "                                                C            = 1,\n",
    "                                                random_state = 702)\n",
    "\n",
    "\n",
    "# FITTING the training data\n",
    "model_fit = model.fit(x_train, y_train)\n",
    "\n",
    "\n",
    "# PREDICTING based on the testing set\n",
    "model2_pred = model_fit.predict(x_test) # predict_proba for multiclass\n",
    "\n",
    "\n",
    "# checking results\n",
    "train_acc = model_fit.score(x_train, y_train)\n",
    "test_acc  = model_fit.score(x_test , y2_test )\n",
    "roc_score = roc_auc_score  (y_true      = y2_test,\n",
    "                            y_score     = model2_pred)\n",
    "\n",
    "\n",
    "print(f\"\"\"\n",
    "Train-Test Gap: {abs(train_acc - test_acc).round(decimals = 3)}\n",
    "Test AUC Score: {roc_score.round(decimals = 3)}\n",
    "\"\"\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 43,
   "metadata": {
    "scrolled": true
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\n",
      "True Negatives : 518\n",
      "False Positives: 14\n",
      "False Negatives: 157\n",
      "True Positives : 115\n",
      "\n"
     ]
    }
   ],
   "source": [
    "# unpacking the confusion matrix\n",
    "model2_tn, \\\n",
    "model2_fp, \\\n",
    "model2_fn, \\\n",
    "model2_tp = confusion_matrix(y_true = y2_test, y_pred = model2_pred).ravel()\n",
    "\n",
    "# printing each result one-by-one\n",
    "print(f\"\"\"\n",
    "True Negatives : {model2_tn}\n",
    "False Positives: {model2_fp}\n",
    "False Negatives: {model2_fn}\n",
    "True Positives : {model2_tp}\n",
    "\"\"\")"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "<h3> Model 3: Retained clusters </h3><br>"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 44,
   "metadata": {},
   "outputs": [],
   "source": [
    "#### Model 3 ####\n",
    "\n",
    "# selecting x- and y-data\n",
    "x_data = cluster_dummies\n",
    "y_data = fb_live['is_video']\n",
    "\n",
    "\n",
    "# training and testing sets\n",
    "x_train, x_test, y_train, y3_test = train_test_split(x_data,\n",
    "                                                    y_data,\n",
    "                                                    test_size    = 0.35,\n",
    "                                                    random_state = 702,\n",
    "                                                    stratify     = y_data)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 45,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\n",
      "Train-Test Gap: 0.009\n",
      "Test AUC Score: 0.554\n",
      "\n"
     ]
    }
   ],
   "source": [
    "# Import packages\n",
    "from sklearn.linear_model import LogisticRegression\n",
    "from sklearn.metrics import roc_auc_score\n",
    "\n",
    "# INSTANTIATING a logistic regression model\n",
    "model = sklearn.linear_model.LogisticRegression(solver       = 'lbfgs',\n",
    "                                                C            = 1,\n",
    "                                                random_state = 702)\n",
    "\n",
    "\n",
    "# FITTING the training data\n",
    "model_fit = model.fit(x_train, y_train)\n",
    "\n",
    "\n",
    "# PREDICTING based on the testing set\n",
    "model3_pred = model_fit.predict(x_test) # predict_proba for multiclass\n",
    "\n",
    "\n",
    "# checking results\n",
    "train_acc = model_fit.score(x_train, y_train)\n",
    "test_acc  = model_fit.score(x_test , y3_test )\n",
    "roc_score = roc_auc_score  (y_true      = y3_test,\n",
    "                            y_score     = model3_pred)\n",
    "\n",
    "\n",
    "print(f\"\"\"\n",
    "Train-Test Gap: {abs(train_acc - test_acc).round(decimals = 3)}\n",
    "Test AUC Score: {roc_score.round(decimals = 3)}\n",
    "\"\"\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 46,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>0</th>\n",
       "      <th>1</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>-0.19</td>\n",
       "      <td>-0.04</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>3.39</td>\n",
       "      <td>0.67</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "      0     1\n",
       "0 -0.19 -0.04\n",
       "1  3.39  0.67"
      ]
     },
     "execution_count": 46,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# storing cluster centers\n",
    "centroids_pca = pd.DataFrame(data = fb_live_k_pca.cluster_centers_)\n",
    "\n",
    "\n",
    "# checking cluster centers\n",
    "centroids_pca.round(decimals = 2)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 47,
   "metadata": {
    "scrolled": true
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\n",
      "True Negatives : 527\n",
      "False Positives: 5\n",
      "False Negatives: 240\n",
      "True Positives : 32\n",
      "\n"
     ]
    }
   ],
   "source": [
    "# unpacking the confusion matrix\n",
    "model3_tn, \\\n",
    "model3_fp, \\\n",
    "model3_fn, \\\n",
    "model3_tp = confusion_matrix(y_true = y3_test, y_pred = model3_pred).ravel()\n",
    "\n",
    "\n",
    "# printing each result one-by-one\n",
    "print(f\"\"\"\n",
    "True Negatives : {model3_tn}\n",
    "False Positives: {model3_fp}\n",
    "False Negatives: {model3_fn}\n",
    "True Positives : {model3_tp}\n",
    "\"\"\")"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Best Model \n",
    "**Question 6:**"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "**Question 6)a)**: rationale for why this is the best model\n",
    "\n",
    "I picked Model 1, which included the orginal x-features. Indeed, considering the unique dynamics of Facebook's social media environment, particularly for Live sellers in Thailand, the selected model stands out due to its balanced performance metrics. The Train-Test Gap of just 0.015 exemplifies the model's strength and its ability to generalize well to unseen data, minimizing the risk of overfitting, which is often an issue when building predictive models. This is crucial in the rapidly evolving landscape of social media, where user behavior and engagement patterns can shift quickly. Additionally, the Test AUC Score of 0.717 indicates the model's competent ability to distinguish between different levels of user engagement, a critical capability when tailoring content strategies to maximize impact and 'engagement'. The model's predictive performance, especially in identifying true positives and negatives, suggests it can provide actionable insights for optimizing video content to enhance user engagement and interaction on Facebook."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 48,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\n",
      "Train-Test Gap: 0.015\n",
      "Test AUC Score: 0.717\n",
      "\n"
     ]
    }
   ],
   "source": [
    "#### Model 1: Original x-features ####\n",
    "\n",
    "# selecting x- and y-data\n",
    "x_data = fb_live[relevant_features]\n",
    "y_data = fb_live['is_video']\n",
    "\n",
    "\n",
    "# training and testing sets\n",
    "x_train, x_test, y_train, y_test = train_test_split(x_data,\n",
    "                                                    y_data,\n",
    "                                                    test_size    = 0.35,\n",
    "                                                    random_state = 702,\n",
    "                                                    stratify     = y_data)\n",
    "\n",
    "# INSTANTIATING a logistic regression model\n",
    "model = sklearn.linear_model.LogisticRegression(solver       = 'lbfgs',\n",
    "                                                C            = 1,\n",
    "                                                max_iter     = 1000, # to avoid the warning abt iteration reached limit\n",
    "                                                random_state = 702)\n",
    "\n",
    "# FITTING the training data\n",
    "model_fit = model.fit(x_train, y_train)\n",
    "\n",
    "\n",
    "# PREDICTING based on the testing set\n",
    "model_pred = model_fit.predict(x_test) # predict_proba for multiclass\n",
    "\n",
    "\n",
    "# checking results\n",
    "train_acc = model_fit.score(x_train, y_train)\n",
    "test_acc  = model_fit.score(x_test , y_test )\n",
    "roc_score = roc_auc_score  (y_true      = y_test,\n",
    "                            y_score     = model_pred)\n",
    "\n",
    "\n",
    "print(f\"\"\"\n",
    "Train-Test Gap: {abs(train_acc - test_acc).round(decimals = 3)}\n",
    "Test AUC Score: {roc_score.round(decimals = 3)}\n",
    "\"\"\")"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "**Question 6)b)**: Model results: train-test gap based on accuracy & AUC score based on the results of the .predict step\n",
    "\n",
    "The model's performance metrics, notably the Train-Test Gap and the Test AUC Score highlight its practical utility for targeting and engaging audiences on Facebook Live. With a Train-Test Gap of just 0.015, the model showcases excellent consistency across both training and testing datasets, indicating robust generalization capabilities. This small gap indicates that the model accurately captures and predicts user behavior without being too tailored to the training data alone — a common issue called overfitting that often arise when building predictive models . Furthermore, a Test AUC Score of 0.717 signifies the model's solid ability to distinguish between users likely to engage with content and those not. This ranking ability, as opposed to simple binary classification, is especially beneficial for Facebook Live sellers looking to allocate their efforts more efficiently, ensuring that they focus on creating content that resonates with the most receptive segments of their audience."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 49,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Confusion Matrix\n"
     ]
    },
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>False</th>\n",
       "      <th>True</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>False</th>\n",
       "      <td>516</td>\n",
       "      <td>16</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>True</th>\n",
       "      <td>146</td>\n",
       "      <td>126</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "       False  True\n",
       "False    516    16\n",
       "True     146   126"
      ]
     },
     "execution_count": 49,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "confusion_df = pd.DataFrame(confusion_matrix(y_true = y_test, y_pred = model_pred), columns=['False', 'True'], index = ['False', 'True'])\n",
    "print('Confusion Matrix')\n",
    "confusion_df.head()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "**Question 6)c)** : Confusion matrix: error & risks explanation.\n",
    "\n",
    "The confusion matrix for this model reveals critical insights into its predictive performance in the context of Facebook Live sellers in Thailand. With 516 True Negatives, the model can correctly identify instances where users are not engaged, helping prevent wasteful allocation of resources towards less effective content. The 126 True Positives indicate the model's utility in identifying engaging content, which is crucial for optimizing content strategy. However, the 16 False Positives could mislead sellers into overvaluing certain content types or strategies that might not drive engagement, potentially misdirecting marketing efforts. More significantly, the 146 False Negatives represent a substantial missed opportunity in recognizing engaging content, which could lead to the underutilization of highly effective content types or themes. This is especially critical in the fast-paced social media marketing environment, where capturing and maintaining user interest is paramount for success. Reducing False Negatives could significantly enhance a seller's ability to engage users and drive meaningful interactions, underscoring the need for model refinement focused on improving sensitivity toward creating 'real' engaging content."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## References\n",
    "\n",
    "\n",
    "Dehouche, N. (2020). Dataset on usage and engagement patterns for Facebook Live sellers in Thailand. Data in Brief, 30, 105661. Retrieved March 17th, 2024, from www.elsevier.com/locate/dib\n",
    "\n",
    "Fox, J. (2018). An unlikeable truth: Social media like buttons are designed to be addictive. They’re impacting our ability to think rationally. Index on Censorship, 47(3). Retrieved March 20th, 2024, from https://journals.sagepub.com/doi/full/10.1177/0306422018800245\n",
    "\n",
    "Grammarly. (n.d.). Retrieved March 20th, 2024, from https://www.grammarly.com\n",
    "\n",
    "Nadkarni, A., & Hofmann, S. G. (2012). Why do people use Facebook? Personality and Individual Differences, 52(3), 243–249. Retrieve March 19th, 2024, from https://www.ncbi.nlm.nih.gov/pmc/articles/PMC3335399/\n",
    "\n",
    "\n",
    "\n",
    "OpenAI. (n.d.). Retrieved March 20th, 2024, from https://openai.com\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "deletable": false,
    "editable": false,
    "run_control": {
     "frozen": true
    }
   },
   "source": [
    "<br>"
   ]
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3 (ipykernel)",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.11.5"
  },
  "toc": {
   "base_numbering": 1,
   "nav_menu": {},
   "number_sections": false,
   "sideBar": true,
   "skip_h1_title": false,
   "title_cell": "Table of Contents",
   "title_sidebar": "Contents",
   "toc_cell": false,
   "toc_position": {
    "height": "calc(100% - 180px)",
    "left": "10px",
    "top": "150px",
    "width": "288px"
   },
   "toc_section_display": true,
   "toc_window_display": false
  },
  "varInspector": {
   "cols": {
    "lenName": 16,
    "lenType": 16,
    "lenVar": 40
   },
   "kernels_config": {
    "python": {
     "delete_cmd_postfix": "",
     "delete_cmd_prefix": "del ",
     "library": "var_list.py",
     "varRefreshCmd": "print(var_dic_list())"
    },
    "r": {
     "delete_cmd_postfix": ") ",
     "delete_cmd_prefix": "rm(",
     "library": "var_list.r",
     "varRefreshCmd": "cat(var_dic_list()) "
    }
   },
   "types_to_exclude": [
    "module",
    "function",
    "builtin_function_or_method",
    "instance",
    "_Feature"
   ],
   "window_display": false
  }
 },
 "nbformat": 4,
 "nbformat_minor": 2
}
