{
 "cells": [
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "<hr style=\"height:.9px;border:none;color:#333;background-color:#333;\" />\n",
    "<hr style=\"height:.9px;border:none;color:#333;background-color:#333;\" />\n",
    "\n",
    "<br> <h2> Modeling Case Study</h2>\n",
    "<h4>DAT-5329 | Introduction to Machine learning & Ai </h4>\n",
    "Ester Van de Put <br>\n",
    "Hult International Business School<br><br><br>\n",
    "\n",
    "<hr style=\"height:.9px;border:none;color:#333;background-color:#333;\" />\n",
    "<hr style=\"height:.9px;border:none;color:#333;background-color:#333;\" />\n",
    "\n",
    "<h3>Introduction</h3><br>\n",
    "<hr style=\"height:.7x;border:none;color:#333;background-color:#333;\" /><br>\n",
    "This regression modeling case study focuses on developing a predictive model to analyze and forecast birthweight, a critical determinant of neonatal health and future development. Pregnancy is a crucial phase where the baby's health is paramount to both parents and healthcare professionals. Among various health indicators monitored during this period, birthweight is a vital sign of a newborn's well-being. Deviations from the normal weight range can indicate potential health issues, prompting the need for early intervention.\n",
    "\n",
    "Public health researchers tirelessly work to uncover and mitigate factors leading to adverse birth outcomes, aiming to enhance the understanding of birthweight's implications. This endeavor seeks to ensure that pregnancies are as healthy as possible, culminating in the birth of thriving infants.\n",
    "\n",
    "In this comprehensive case study, I will delve into the intricate relationships between various factors and birthweight. The objective is to navigate the complexities of birthweight-related outcomes and establish a predictive model that could serve as a proactive tool in healthcare management. This model aims to make it easier for professionals to identify pregnancies at risk of resulting in low birthweight infants and, therefore, enable precise, targeted interventions.\n",
    "\n",
    "This analysis aims to create a sophisticated predictive model encompassing the various factors and dynamics affecting birthweight. By understanding factors such as genetic predispositions, environmental influences, and maternal health, this model aims to empower healthcare professionals and parents with actionable insights. Consequently, this will improve prenatal care strategies and interventions, potentially decreasing the incidence of low birthweight and associated health complications."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "deletable": false,
    "editable": false,
    "run_control": {
     "frozen": true
    }
   },
   "source": [
    "<hr style=\"height:.9px;border:none;color:#333;background-color:#333;\" /><br>\n",
    "\n",
    "<h2>Part I: Imports and Data Check</h2>"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 1,
   "metadata": {
    "deletable": false,
    "editable": false
   },
   "outputs": [],
   "source": [
    "## importing libraries ##\n",
    "\n",
    "# standard libraries\n",
    "import numpy as np # mathematical essentials\n",
    "import pandas  as pd  # data science essentials\n",
    "import matplotlib.pyplot as plt # graphical output\n",
    "import seaborn as sns # enhancing graphical output\n",
    "\n",
    "# classficiation libraries\n",
    "import phik #phi coefficient\n",
    "import sklearn.linear_model # linear models\n",
    "import statsmodels.formula.api as smf # predictive modeling \n",
    "\n",
    "# preprocessing and testing\n",
    "from sklearn.preprocessing import power_transform    # yeo-johnson\n",
    "from sklearn.preprocessing import StandardScaler     # standard scaler\n",
    "from sklearn.model_selection import train_test_split # train-test split\n",
    "from sklearn.metrics import (confusion_matrix,\n",
    "                             roc_auc_score, precision_score, recall_score)\n",
    "from sklearn.model_selection import (train_test_split, \n",
    "                                     RandomizedSearchCV, GridSearchCV) # train/test split\n",
    "from sklearn.ensemble import GradientBoostingClassifier\n",
    "from sklearn.linear_model import RidgeClassifier\n",
    "from sklearn.preprocessing import StandardScaler\n",
    "\n",
    "\n",
    "#!###############################!#\n",
    "#!# import additional libraries #!#\n",
    "#!###############################!#\n",
    "\n",
    "\n",
    "from datetime import datetime # to show date and time\n",
    "import sklearn.neighbors # import neighbors\n",
    "from sklearn.impute import SimpleImputer # to handle missing values in the data\n",
    "import sklearn.tree # import tree module\n",
    "\n",
    "import warnings # manages warnings\n",
    "from sklearn.exceptions import FitFailedWarning # catches warnings related to failures during fitting process\n",
    "warnings.filterwarnings('ignore') # ignore warnings to keep the output clean and uncluttered\n",
    "\n",
    "\n",
    "# setting pandas print options (optional)\n",
    "pd.set_option('display.max_rows', 500)\n",
    "pd.set_option('display.max_columns', 500)\n",
    "pd.set_option('display.width', 1000)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "deletable": false,
    "editable": false,
    "run_control": {
     "frozen": true
    }
   },
   "source": [
    "<br>"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "metadata": {
    "deletable": false,
    "editable": false
   },
   "outputs": [],
   "source": [
    "## Importing data ##\n",
    "\n",
    "# Upload and read excel data into a DataFrame.\n",
    "file =\"./birthweight.xlsx\"\n",
    "\n",
    "# Naming the DataFrame as df_train\n",
    "df_train = pd.read_excel(io=file, \n",
    "                      header = 0, \n",
    "                      index_col = 'obs_id') #setting 'obs_id' as the index column.\n",
    "\n",
    "\n",
    "# Upload the testing dataset from a csv file into a DataFrame.\n",
    "testing_data = './kaggle_test_data.csv'\n",
    "\n",
    "# Naming the DataFrame as df_test\n",
    "df_test = pd.read_csv (filepath_or_buffer = testing_data,\n",
    "                        header     = 0,\n",
    "                        index_col  = 'obs_id') #setting 'obs_id' as the index column."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "**Creating and Defining the User-defined functions for the analysis** "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "metadata": {
    "deletable": false,
    "editable": false
   },
   "outputs": [],
   "source": [
    "###############################\n",
    "# standard_scaler\n",
    "###############################\n",
    "\n",
    "def standard_scaler(df):\n",
    "    \"\"\"\n",
    "    Standardizes a dataset (mean = 0, variance = 1). Returns a new DataFrame.\n",
    "    Requires sklearn.preprocessing.StandardScaler()\n",
    "    \n",
    "    PARAMETERS\n",
    "    ----------\n",
    "    df     | DataFrame to be used for scaling\n",
    "    \"\"\"\n",
    "\n",
    "    # INSTANTIATING a StandardScaler() object\n",
    "    scaler = StandardScaler(copy = True)\n",
    "    \n",
    "    # FITTING the scaler with the data\n",
    "    scaler.fit(df)\n",
    "\n",
    "    # TRANSFORMING our data after fit\n",
    "    x_scaled = scaler.transform(df)\n",
    "\n",
    "    # converting scaled data into a DataFrame\n",
    "    new_df = pd.DataFrame(x_scaled)\n",
    "\n",
    "    # reattaching column names\n",
    "    new_df.columns = list(df.columns)\n",
    "    \n",
    "    return new_df\n",
    "\n",
    "###############################\n",
    "## visual_cm\n",
    "###############################\n",
    "\n",
    "def visual_cm(true_y, pred_y, labels = None):\n",
    "    \"\"\"\n",
    "Creates a visualization of a confusion matrix.\n",
    "\n",
    "PARAMETERS\n",
    "----------\n",
    "true_y : true values for the response variable\n",
    "pred_y : predicted values for the response variable\n",
    "labels : , default None\n",
    "    \"\"\"\n",
    "    # visualizing the confusion matrix\n",
    "\n",
    "    # setting labels\n",
    "    lbls = labels\n",
    "\n",
    "    # declaring a confusion matrix object\n",
    "    cm = confusion_matrix(y_true = true_y,\n",
    "                          y_pred = pred_y)\n",
    "    # heatmap\n",
    "    sns.heatmap(cm,\n",
    "                annot       = True,\n",
    "                xticklabels = lbls,\n",
    "                yticklabels = lbls,\n",
    "                cmap        = 'Blues',\n",
    "                fmt         = 'g')\n",
    "\n",
    "    plt.xlabel('Predicted')\n",
    "    plt.ylabel('Actual')\n",
    "    plt.title('Confusion Matrix of the Classifier')\n",
    "    plt.show()\n",
    "\n",
    "#########################\n",
    "# mv_flagger\n",
    "#########################\n",
    "def mv_flagger(df):\n",
    "    \"\"\"\n",
    "Flags all columns that have missing values with 'm-COLUMN_NAME'.\n",
    "\n",
    "PARAMETERS\n",
    "----------\n",
    "df : DataFrame to flag missing values\n",
    "\n",
    "\n",
    "RETURNS\n",
    "-------\n",
    "DataFrame with missing value flags.\"\"\"\n",
    "\n",
    "\n",
    "    for col in df:\n",
    "\n",
    "        if df[col].isnull().astype(int).sum() > 0:\n",
    "            df['m_'+col] = df[col].isnull().astype(int)\n",
    "            \n",
    "    return df\n",
    "\n",
    "\n",
    "#########################\n",
    "# text_split_feature\n",
    "#########################\n",
    "def text_split_feature(col, df, sep=' ', new_col_name='number_of_names'):\n",
    "    \"\"\"\n",
    "Splits values in a string Series (as part of a DataFrame) and sums the number\n",
    "of resulting items. Automatically appends summed column to original DataFrame.\n",
    "\n",
    "PARAMETERS\n",
    "----------\n",
    "col          : column to split\n",
    "df           : DataFrame where column is located\n",
    "sep          : string sequence to split by, default ' '\n",
    "new_col_name : name of new column after summing split, default\n",
    "               'number_of_names'\n",
    "\"\"\"\n",
    "    \n",
    "    df[new_col_name] = 0\n",
    "    \n",
    "    \n",
    "    for index, val in df.iterrows():\n",
    "        df.loc[index, new_col_name] = len(df.loc[index, col].split(sep = ' '))\n",
    "        \n",
    "        \n",
    "########################################\n",
    "# plot_feature_importances\n",
    "########################################\n",
    "def plot_feature_importances(model, train, export = False):\n",
    "    \"\"\"\n",
    "    Plots the importance of features from a CART model.\n",
    "    \n",
    "    PARAMETERS\n",
    "    ----------\n",
    "    model  : CART model\n",
    "    train  : explanatory variable training data\n",
    "    export : whether or not to export as a .png image, default False\n",
    "    \"\"\"\n",
    "    \n",
    "    # declaring the number\n",
    "    n_features = train.shape[1]\n",
    "    \n",
    "    # setting plot window\n",
    "    fig, ax = plt.subplots(figsize=(12,9))\n",
    "    \n",
    "    plt.barh(range(n_features), model.feature_importances_, align='center')\n",
    "    plt.yticks(np.arange(n_features), train.columns)\n",
    "    plt.xlabel(\"Feature importance\")\n",
    "    plt.ylabel(\"Feature\")\n",
    "    \n",
    "    if export == True:\n",
    "        plt.savefig('./analysis_images/Feature_Importance.png')"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "deletable": false,
    "editable": false,
    "run_control": {
     "frozen": true
    }
   },
   "source": [
    "<br>"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "metadata": {
    "deletable": false,
    "editable": false
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>mage</th>\n",
       "      <th>meduc</th>\n",
       "      <th>monpre</th>\n",
       "      <th>npvis</th>\n",
       "      <th>fage</th>\n",
       "      <th>feduc</th>\n",
       "      <th>omaps</th>\n",
       "      <th>fmaps</th>\n",
       "      <th>cigs</th>\n",
       "      <th>drink</th>\n",
       "      <th>male</th>\n",
       "      <th>mwhte</th>\n",
       "      <th>mblck</th>\n",
       "      <th>moth</th>\n",
       "      <th>fwhte</th>\n",
       "      <th>fblck</th>\n",
       "      <th>foth</th>\n",
       "      <th>bwght</th>\n",
       "      <th>set</th>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>obs_id</th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>id_0001</th>\n",
       "      <td>33</td>\n",
       "      <td>12.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>5.0</td>\n",
       "      <td>31.0</td>\n",
       "      <td>11.0</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>360.0</td>\n",
       "      <td>Not Kaggle</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>id_0002</th>\n",
       "      <td>30</td>\n",
       "      <td>14.0</td>\n",
       "      <td>2.0</td>\n",
       "      <td>6.0</td>\n",
       "      <td>31.0</td>\n",
       "      <td>14.0</td>\n",
       "      <td>4.0</td>\n",
       "      <td>6.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>506.0</td>\n",
       "      <td>Not Kaggle</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>id_0003</th>\n",
       "      <td>28</td>\n",
       "      <td>14.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>7.0</td>\n",
       "      <td>29.0</td>\n",
       "      <td>16.0</td>\n",
       "      <td>2.0</td>\n",
       "      <td>5.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>680.0</td>\n",
       "      <td>Not Kaggle</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>id_0005</th>\n",
       "      <td>26</td>\n",
       "      <td>NaN</td>\n",
       "      <td>5.0</td>\n",
       "      <td>2.0</td>\n",
       "      <td>21.0</td>\n",
       "      <td>NaN</td>\n",
       "      <td>4.0</td>\n",
       "      <td>7.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>697.0</td>\n",
       "      <td>Not Kaggle</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>id_0006</th>\n",
       "      <td>31</td>\n",
       "      <td>16.0</td>\n",
       "      <td>2.0</td>\n",
       "      <td>5.0</td>\n",
       "      <td>32.0</td>\n",
       "      <td>16.0</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>737.0</td>\n",
       "      <td>Not Kaggle</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "         mage  meduc  monpre  npvis  fage  feduc  omaps  fmaps  cigs  drink  male  mwhte  mblck  moth  fwhte  fblck  foth  bwght         set\n",
       "obs_id                                                                                                                                      \n",
       "id_0001    33   12.0     1.0    5.0  31.0   11.0    NaN    NaN   0.0    0.0     1      1      0     0      1      0     0  360.0  Not Kaggle\n",
       "id_0002    30   14.0     2.0    6.0  31.0   14.0    4.0    6.0   0.0    0.0     0      1      0     0      1      0     0  506.0  Not Kaggle\n",
       "id_0003    28   14.0     1.0    7.0  29.0   16.0    2.0    5.0   0.0    0.0     0      1      0     0      1      0     0  680.0  Not Kaggle\n",
       "id_0005    26    NaN     5.0    2.0  21.0    NaN    4.0    7.0   0.0    0.0     1      0      1     0      0      1     0  697.0  Not Kaggle\n",
       "id_0006    31   16.0     2.0    5.0  32.0   16.0    NaN    NaN   0.0    0.0     1      1      0     0      1      0     0  737.0  Not Kaggle"
      ]
     },
     "execution_count": 4,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# Concatenating datasets together for mv analysis and feature engineering.\n",
    "df_train['set'] = 'Not Kaggle'\n",
    "df_test ['set'] = 'Kaggle'\n",
    "\n",
    "# Concatenating both datasets together for mv and feature engineering.\n",
    "df_full = pd.concat(objs = [df_train, df_test],\n",
    "                    axis = 0,\n",
    "                    ignore_index = False)\n",
    "\n",
    "\n",
    "# Checking data.\n",
    "df_full.head(n = 5)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "deletable": false,
    "editable": false,
    "run_control": {
     "frozen": true
    }
   },
   "source": [
    "<br>"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "metadata": {
    "deletable": false,
    "editable": false
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "Index(['mage', 'meduc', 'monpre', 'npvis', 'fage', 'feduc', 'omaps', 'fmaps', 'cigs', 'drink', 'male', 'mwhte', 'mblck', 'moth', 'fwhte', 'fblck', 'foth', 'bwght', 'set'], dtype='object')"
      ]
     },
     "execution_count": 5,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# Checking available features in the df_full.\n",
    "df_full.columns"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "deletable": false,
    "editable": false,
    "run_control": {
     "frozen": true
    }
   },
   "source": [
    "<br>"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "metadata": {
    "deletable": false,
    "editable": false
   },
   "outputs": [],
   "source": [
    "#!##############################!#\n",
    "#!# set your response variable #!#\n",
    "#!##############################!#\n",
    "y_variable = 'low_bwght' # this should be a string"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "<br><hr style=\"height:.9px;border:none;color:#333;background-color:#333;\" /><br>\n",
    "\n",
    "<hr style=\"height:.7x;border:none;color:#333;background-color:#333;\" /><br>\n",
    "\n",
    "<h2>  Part II: Data Preparation & Descriptive Analysis </h2>\n",
    "<br><hr style=\"height:.9px;border:none;color:#333;background-color:#333;\" /><br>\n",
    "<h3> (1) Descriptive Analysis</h3>\n",
    "\n",
    "This section delves into the dataset, offering better insights into the training, testing, and overall data. We start by examining the dataset's size, the variety of data types it includes, and any missing values. \n",
    "\n",
    "A key part of our analysis involves looking at descriptive statistics for each feature, including means, standard deviations, minimums, and maximums, which will provide us with a better picture of how the data is distributed and the scale of each feature.\n",
    "\n",
    "Through this process, if any aspect seems particularly intriguing, we will investigate further to uncover patterns that could be helpful to the creation of our model. "
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### 1.1. Feature Descriptions\n",
    "\n",
    "The table below describes each feature included in the dataset. \n",
    "I included this description to ensure clarity and facilitate understanding of the variables at play in the predictive model. \n",
    "\n",
    "| Feature Number | Label | Description |\n",
    "|----------------|-------|-------------|\n",
    "| 1 | `mage` | Mother's age in years |\n",
    "| 2 | `meduc` | Mother's education in years |\n",
    "| 3 | `monpre` | Month of pregnancy prenatal care began |\n",
    "| 4 | `npvis` | Total prenatal visits |\n",
    "| 5 | `fage` | Father's age in years |\n",
    "| 6 | `feduc` | Father's education in years |\n",
    "| 7 | `omaps` | One minute Apgar score |\n",
    "| 8 | `fmaps` | Five minute Apgar score |\n",
    "| 9 | `cigs` | Avg. cigarettes/day by mother |\n",
    "| 10 | `drink` | Avg. drinks/week by mother |\n",
    "| 11 | `male` | 1 if baby is male |\n",
    "| 12 | `mwhte` | 1 if mother is white |\n",
    "| 13 | `mblck` | 1 if mother is black |\n",
    "| 14 | `moth` | 1 if mother is neither black nor white |\n",
    "| 15 | `fwhte` | 1 if father is white |\n",
    "| 16 | `fblck` | 1 if father is black |\n",
    "| 17 | `foth` | 1 if father is neither black nor white |\n",
    "| 18 | `bwght` | Birthweight in grams |\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "metadata": {
    "deletable": false,
    "editable": false,
    "scrolled": true
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>mage</th>\n",
       "      <th>meduc</th>\n",
       "      <th>monpre</th>\n",
       "      <th>npvis</th>\n",
       "      <th>fage</th>\n",
       "      <th>feduc</th>\n",
       "      <th>omaps</th>\n",
       "      <th>fmaps</th>\n",
       "      <th>cigs</th>\n",
       "      <th>drink</th>\n",
       "      <th>male</th>\n",
       "      <th>mwhte</th>\n",
       "      <th>mblck</th>\n",
       "      <th>moth</th>\n",
       "      <th>fwhte</th>\n",
       "      <th>fblck</th>\n",
       "      <th>foth</th>\n",
       "      <th>bwght</th>\n",
       "      <th>set</th>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>obs_id</th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>id_0001</th>\n",
       "      <td>33</td>\n",
       "      <td>12.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>5.0</td>\n",
       "      <td>31.0</td>\n",
       "      <td>11.0</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>360.0</td>\n",
       "      <td>Not Kaggle</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>id_0002</th>\n",
       "      <td>30</td>\n",
       "      <td>14.0</td>\n",
       "      <td>2.0</td>\n",
       "      <td>6.0</td>\n",
       "      <td>31.0</td>\n",
       "      <td>14.0</td>\n",
       "      <td>4.0</td>\n",
       "      <td>6.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>506.0</td>\n",
       "      <td>Not Kaggle</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>id_0003</th>\n",
       "      <td>28</td>\n",
       "      <td>14.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>7.0</td>\n",
       "      <td>29.0</td>\n",
       "      <td>16.0</td>\n",
       "      <td>2.0</td>\n",
       "      <td>5.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>680.0</td>\n",
       "      <td>Not Kaggle</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "         mage  meduc  monpre  npvis  fage  feduc  omaps  fmaps  cigs  drink  male  mwhte  mblck  moth  fwhte  fblck  foth  bwght         set\n",
       "obs_id                                                                                                                                      \n",
       "id_0001    33   12.0     1.0    5.0  31.0   11.0    NaN    NaN   0.0    0.0     1      1      0     0      1      0     0  360.0  Not Kaggle\n",
       "id_0002    30   14.0     2.0    6.0  31.0   14.0    4.0    6.0   0.0    0.0     0      1      0     0      1      0     0  506.0  Not Kaggle\n",
       "id_0003    28   14.0     1.0    7.0  29.0   16.0    2.0    5.0   0.0    0.0     0      1      0     0      1      0     0  680.0  Not Kaggle"
      ]
     },
     "execution_count": 7,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# Displaying the first 5 rows of the DataFrame df_test to analyze the initial data\n",
    "\n",
    "df_full.head(n=3) # Set limit to 3 to avoid datadumping."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "metadata": {
    "deletable": false,
    "editable": false
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "<class 'pandas.core.frame.DataFrame'>\n",
      "Index: 1832 entries, id_0001 to id_0302\n",
      "Data columns (total 19 columns):\n",
      " #   Column  Non-Null Count  Dtype  \n",
      "---  ------  --------------  -----  \n",
      " 0   mage    1832 non-null   int64  \n",
      " 1   meduc   1802 non-null   float64\n",
      " 2   monpre  1827 non-null   float64\n",
      " 3   npvis   1764 non-null   float64\n",
      " 4   fage    1826 non-null   float64\n",
      " 5   feduc   1785 non-null   float64\n",
      " 6   omaps   1829 non-null   float64\n",
      " 7   fmaps   1829 non-null   float64\n",
      " 8   cigs    1722 non-null   float64\n",
      " 9   drink   1717 non-null   float64\n",
      " 10  male    1832 non-null   int64  \n",
      " 11  mwhte   1832 non-null   int64  \n",
      " 12  mblck   1832 non-null   int64  \n",
      " 13  moth    1832 non-null   int64  \n",
      " 14  fwhte   1832 non-null   int64  \n",
      " 15  fblck   1832 non-null   int64  \n",
      " 16  foth    1832 non-null   int64  \n",
      " 17  bwght   1648 non-null   float64\n",
      " 18  set     1832 non-null   object \n",
      "dtypes: float64(10), int64(8), object(1)\n",
      "memory usage: 286.2+ KB\n"
     ]
    }
   ],
   "source": [
    "# Displaying detailed information about the DataFrame df_full,\n",
    "# Including the variable dtype, the columns name, non-null counts\n",
    "\n",
    "df_full.info(verbose=True) #  Setting 'Verbose' to True to ensure all column information are printed. "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "metadata": {
    "deletable": false,
    "editable": false
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>mage</th>\n",
       "      <th>meduc</th>\n",
       "      <th>monpre</th>\n",
       "      <th>npvis</th>\n",
       "      <th>fage</th>\n",
       "      <th>feduc</th>\n",
       "      <th>omaps</th>\n",
       "      <th>fmaps</th>\n",
       "      <th>cigs</th>\n",
       "      <th>drink</th>\n",
       "      <th>male</th>\n",
       "      <th>mwhte</th>\n",
       "      <th>mblck</th>\n",
       "      <th>moth</th>\n",
       "      <th>fwhte</th>\n",
       "      <th>fblck</th>\n",
       "      <th>foth</th>\n",
       "      <th>bwght</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>count</th>\n",
       "      <td>1648.00</td>\n",
       "      <td>1623.00</td>\n",
       "      <td>1644.00</td>\n",
       "      <td>1592.00</td>\n",
       "      <td>1642.00</td>\n",
       "      <td>1611.00</td>\n",
       "      <td>1645.00</td>\n",
       "      <td>1645.00</td>\n",
       "      <td>1547.00</td>\n",
       "      <td>1543.00</td>\n",
       "      <td>1648.00</td>\n",
       "      <td>1648.00</td>\n",
       "      <td>1648.00</td>\n",
       "      <td>1648.00</td>\n",
       "      <td>1648.00</td>\n",
       "      <td>1648.00</td>\n",
       "      <td>1648.00</td>\n",
       "      <td>1648.00</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>mean</th>\n",
       "      <td>29.52</td>\n",
       "      <td>13.74</td>\n",
       "      <td>2.13</td>\n",
       "      <td>11.60</td>\n",
       "      <td>31.87</td>\n",
       "      <td>13.92</td>\n",
       "      <td>8.39</td>\n",
       "      <td>9.00</td>\n",
       "      <td>1.13</td>\n",
       "      <td>0.02</td>\n",
       "      <td>0.52</td>\n",
       "      <td>0.88</td>\n",
       "      <td>0.06</td>\n",
       "      <td>0.05</td>\n",
       "      <td>0.89</td>\n",
       "      <td>0.06</td>\n",
       "      <td>0.05</td>\n",
       "      <td>3405.56</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>std</th>\n",
       "      <td>4.76</td>\n",
       "      <td>2.09</td>\n",
       "      <td>1.26</td>\n",
       "      <td>3.74</td>\n",
       "      <td>5.66</td>\n",
       "      <td>2.26</td>\n",
       "      <td>1.11</td>\n",
       "      <td>0.48</td>\n",
       "      <td>4.34</td>\n",
       "      <td>0.30</td>\n",
       "      <td>0.50</td>\n",
       "      <td>0.32</td>\n",
       "      <td>0.24</td>\n",
       "      <td>0.23</td>\n",
       "      <td>0.32</td>\n",
       "      <td>0.24</td>\n",
       "      <td>0.22</td>\n",
       "      <td>576.12</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>min</th>\n",
       "      <td>16.00</td>\n",
       "      <td>3.00</td>\n",
       "      <td>0.00</td>\n",
       "      <td>0.00</td>\n",
       "      <td>18.00</td>\n",
       "      <td>3.00</td>\n",
       "      <td>0.00</td>\n",
       "      <td>2.00</td>\n",
       "      <td>0.00</td>\n",
       "      <td>0.00</td>\n",
       "      <td>0.00</td>\n",
       "      <td>0.00</td>\n",
       "      <td>0.00</td>\n",
       "      <td>0.00</td>\n",
       "      <td>0.00</td>\n",
       "      <td>0.00</td>\n",
       "      <td>0.00</td>\n",
       "      <td>360.00</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>25%</th>\n",
       "      <td>26.00</td>\n",
       "      <td>12.00</td>\n",
       "      <td>1.00</td>\n",
       "      <td>10.00</td>\n",
       "      <td>28.00</td>\n",
       "      <td>12.00</td>\n",
       "      <td>8.00</td>\n",
       "      <td>9.00</td>\n",
       "      <td>0.00</td>\n",
       "      <td>0.00</td>\n",
       "      <td>0.00</td>\n",
       "      <td>1.00</td>\n",
       "      <td>0.00</td>\n",
       "      <td>0.00</td>\n",
       "      <td>1.00</td>\n",
       "      <td>0.00</td>\n",
       "      <td>0.00</td>\n",
       "      <td>3080.00</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>50%</th>\n",
       "      <td>29.00</td>\n",
       "      <td>14.00</td>\n",
       "      <td>2.00</td>\n",
       "      <td>12.00</td>\n",
       "      <td>31.00</td>\n",
       "      <td>14.00</td>\n",
       "      <td>9.00</td>\n",
       "      <td>9.00</td>\n",
       "      <td>0.00</td>\n",
       "      <td>0.00</td>\n",
       "      <td>1.00</td>\n",
       "      <td>1.00</td>\n",
       "      <td>0.00</td>\n",
       "      <td>0.00</td>\n",
       "      <td>1.00</td>\n",
       "      <td>0.00</td>\n",
       "      <td>0.00</td>\n",
       "      <td>3430.00</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>75%</th>\n",
       "      <td>32.25</td>\n",
       "      <td>16.00</td>\n",
       "      <td>2.00</td>\n",
       "      <td>12.25</td>\n",
       "      <td>35.00</td>\n",
       "      <td>16.00</td>\n",
       "      <td>9.00</td>\n",
       "      <td>9.00</td>\n",
       "      <td>0.00</td>\n",
       "      <td>0.00</td>\n",
       "      <td>1.00</td>\n",
       "      <td>1.00</td>\n",
       "      <td>0.00</td>\n",
       "      <td>0.00</td>\n",
       "      <td>1.00</td>\n",
       "      <td>0.00</td>\n",
       "      <td>0.00</td>\n",
       "      <td>3770.00</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>max</th>\n",
       "      <td>44.00</td>\n",
       "      <td>17.00</td>\n",
       "      <td>9.00</td>\n",
       "      <td>40.00</td>\n",
       "      <td>62.00</td>\n",
       "      <td>17.00</td>\n",
       "      <td>10.00</td>\n",
       "      <td>10.00</td>\n",
       "      <td>40.00</td>\n",
       "      <td>8.00</td>\n",
       "      <td>1.00</td>\n",
       "      <td>1.00</td>\n",
       "      <td>1.00</td>\n",
       "      <td>1.00</td>\n",
       "      <td>1.00</td>\n",
       "      <td>1.00</td>\n",
       "      <td>1.00</td>\n",
       "      <td>5204.00</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "          mage    meduc   monpre    npvis     fage    feduc    omaps    fmaps     cigs    drink     male    mwhte    mblck     moth    fwhte    fblck     foth    bwght\n",
       "count  1648.00  1623.00  1644.00  1592.00  1642.00  1611.00  1645.00  1645.00  1547.00  1543.00  1648.00  1648.00  1648.00  1648.00  1648.00  1648.00  1648.00  1648.00\n",
       "mean     29.52    13.74     2.13    11.60    31.87    13.92     8.39     9.00     1.13     0.02     0.52     0.88     0.06     0.05     0.89     0.06     0.05  3405.56\n",
       "std       4.76     2.09     1.26     3.74     5.66     2.26     1.11     0.48     4.34     0.30     0.50     0.32     0.24     0.23     0.32     0.24     0.22   576.12\n",
       "min      16.00     3.00     0.00     0.00    18.00     3.00     0.00     2.00     0.00     0.00     0.00     0.00     0.00     0.00     0.00     0.00     0.00   360.00\n",
       "25%      26.00    12.00     1.00    10.00    28.00    12.00     8.00     9.00     0.00     0.00     0.00     1.00     0.00     0.00     1.00     0.00     0.00  3080.00\n",
       "50%      29.00    14.00     2.00    12.00    31.00    14.00     9.00     9.00     0.00     0.00     1.00     1.00     0.00     0.00     1.00     0.00     0.00  3430.00\n",
       "75%      32.25    16.00     2.00    12.25    35.00    16.00     9.00     9.00     0.00     0.00     1.00     1.00     0.00     0.00     1.00     0.00     0.00  3770.00\n",
       "max      44.00    17.00     9.00    40.00    62.00    17.00    10.00    10.00    40.00     8.00     1.00     1.00     1.00     1.00     1.00     1.00     1.00  5204.00"
      ]
     },
     "execution_count": 9,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# Generating descriptive statistics of the Dataframe df_full\n",
    "# including count, mean, standard deviaition, minimum and maximum values. \n",
    "\n",
    "# Generating the descriptive statistics only for numeric data\n",
    "df_train_stats = df_train.iloc[ :, : ].describe(include = 'number').round(decimals =2) # rounding decimals\n",
    "# checking results\n",
    "df_train_stats"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### 1.2. Dropping unnecessary columns"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 10,
   "metadata": {
    "deletable": false,
    "editable": false
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "Index(['mage', 'meduc', 'monpre', 'npvis', 'fage', 'feduc', 'cigs', 'drink', 'male', 'mwhte', 'mblck', 'moth', 'fwhte', 'fblck', 'foth', 'bwght', 'set'], dtype='object')"
      ]
     },
     "execution_count": 10,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# dropping post-event horizon features\n",
    "df_full = df_full.drop(labels = [\"omaps\",\"fmaps\"],\n",
    "                         axis   = 1)\n",
    "\n",
    "# checking results\n",
    "df_full.columns"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "<br><br>\n",
    "<h3>(2) Base Modeling</h3>"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 11,
   "metadata": {
    "deletable": false,
    "editable": false,
    "scrolled": true
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\n",
      "Size of Original Dataset\n",
      "------------------------\n",
      "Observations (rows): 1832\n",
      "Features (columns) : 17\n",
      "\n"
     ]
    }
   ],
   "source": [
    "## Base Modeling ##\n",
    "\n",
    "# Initial exploration to determine the dataset size.\n",
    "# Printing the number of obersations (row) and feature (column) in df_full.\n",
    "\n",
    "# Formatting and printing the dimensions of the full dataset.\n",
    "\n",
    "print(f\"\"\"\n",
    "Size of Original Dataset\n",
    "------------------------\n",
    "Observations (rows): {df_full.shape[0]}\n",
    "Features (columns) : {df_full.shape[1]}\n",
    "\"\"\")"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### (3) Correlation Matrix with Birthweight"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 12,
   "metadata": {
    "deletable": false,
    "editable": false
   },
   "outputs": [
    {
     "data": {
      "image/png": "",
      "text/plain": [
       "<Figure size 800x600 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "# Develop a histogram with HISTPLOT to visualize the distribution of 'bwght' \n",
    "\n",
    "# Set the histogram figure size.\n",
    "plt.figure(figsize = (8,6))\n",
    "\n",
    "\n",
    "sns.histplot(data = df_full['bwght'],\n",
    "             bins = 20,\n",
    "             kde = True)# KDE added for smooth distribution curve.\n",
    "\n",
    "# Adding title and axis labels to the graph \n",
    "plt.title (label = 'Birth Weight ditribution') \n",
    "plt.xlabel (xlabel = 'Birth Weight') # avoiding using dataset labels\n",
    "plt.ylabel (ylabel = 'Counts')\n",
    "\n",
    "# lines of \"mean\"\n",
    "plt.axvline(df_train[\"bwght\"].mean(),  # \"AXis Vertical, LINE\" = \"axvline\"\n",
    "            color=\"red\")\n",
    "# lines of \"median\"\n",
    "plt.axvline(df_train[\"bwght\"].median(),  \n",
    "            color=\"black\")\n",
    "\n",
    "# Display the histogram to visualize the distribution. \n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 13,
   "metadata": {
    "deletable": false,
    "editable": false,
    "scrolled": true
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "bwght     1.00\n",
       "npvis     0.10\n",
       "fage      0.07\n",
       "male      0.07\n",
       "fwhte     0.07\n",
       "feduc     0.05\n",
       "mwhte     0.05\n",
       "meduc     0.04\n",
       "mage      0.03\n",
       "monpre   -0.00\n",
       "drink    -0.02\n",
       "mblck    -0.02\n",
       "fblck    -0.02\n",
       "moth     -0.05\n",
       "foth     -0.07\n",
       "cigs     -0.09\n",
       "Name: bwght, dtype: float64"
      ]
     },
     "execution_count": 13,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# Correlation pearson within the babies dataset\n",
    "df_full_corr = df_full.corr (method = 'pearson', \n",
    "                              numeric_only = True). round(decimals=2)\n",
    "\n",
    "# checking results\n",
    "df_full_corr.loc[:,'bwght'].sort_values(ascending = False)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 14,
   "metadata": {
    "deletable": false,
    "editable": false,
    "scrolled": false
   },
   "outputs": [
    {
     "data": {
      "image/png": "",
      "text/plain": [
       "<Figure size 1200x1000 with 2 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "## Visualizing the correlation matrix ##\n",
    "\n",
    "# Set the figure size for the heatmap.\n",
    "plt.figure(figsize=(12, 10))\n",
    "\n",
    "# Calculate the correlation matrix for numerical columns ONLY in df_full to analyze the inter-variables relationship.\n",
    "corr = df_full.corr(numeric_only=True).round(decimals=2)\n",
    "\n",
    "# To avoid data dumping: \n",
    "\n",
    "# (1) Create a mask for correlations greater than 0.5 in absolute value\n",
    "high_corr_mask = abs(corr) > 0.5\n",
    "\n",
    "# (2) Adjust the mask to also exclude correlations of exactly 1\n",
    "final_mask = high_corr_mask & (corr != 1) \n",
    "\n",
    "# Creating a heatmap to visualize the important correlations with the mask applied.\n",
    "# Using the 'final_mask' to exclude both: correlations of 1 and those below the absolute value of 0.5\n",
    "sns.heatmap(corr, annot=True, fmt=\".2f\", cmap='coolwarm', square=True, mask=~final_mask)\n",
    "\n",
    "# Display the visualization.\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Based on this initial correlation analysis, here are the main insights I gathered:\n",
    "\n",
    "**Strong correlations:**\n",
    "\n",
    "- Intergenerational Health: A notable correlation (0.70) exists between the mother's (mage) and father's (fage) ages, reflecting common patterns where partners are often close in age. This trend aligns with research indicating that advanced parental age can be associated with increased risk of complications, which can influence a newborn's weight (Wang. et al, 2020). \n",
    "\n",
    "\n",
    "- Educational Pairing: Parents' education levels also correlate significantly (meduc and feduc with a correlation of 0.58), indicating educational homogamy. This relation could reflect broader socioeconomic patterns influencing family health behaviors and prenatal care decisions.\n",
    "\n",
    "- Racial Homogeneity: High correlations between the race of the mother and father (mwhte with fwhte, and mblck with fblck, both at 0.89) point towards racial homogeneity in pairings, which may have socioeconomic and cultural implications for birthweight outcomes.\n",
    "\n",
    "- Maternal Habits and Prenatal Health: While smoking (cigs) did not exceed the 0.5 threshold for strong correlation with birth weight (bwght), its clinical significance in prenatal health is well-established and warrants further investigation despite a lower correlation in this particular dataset.\n",
    "\n",
    "**Lesser but noteworthy correlations :**\n",
    "\n",
    "- Prenatal Care: The analysis also revealed a correlation between increased prenatal visits (npvis) and the start of prenatal care (monpre) with birth weights, suggesting that access to and utilization of prenatal care can positively influence the health of newborns. However, it's important to approach these findings with caution. The frequency of prenatal visits and the timing of care initiation can be influenced by various factors, including the parents' age and socioeconomic status, such as wealth and access to healthcare (Alexander & Korenbrot, 1995).\n",
    "\n",
    "- Parental Age and Education's Subtle Influence: Oppositely to my assumptions, parental ages (mage, fage) and mothers' education (meduc) demonstrated weaker correlations with birth weight. This nuanced finding suggests that age and education, in isolation, might not be as influential on birth weight as previously thought within the dataset.\n",
    "\n",
    "- Maternal Alcohol Consumption's Ambiguous Role: Maternal drinking habits (drink) showed a negligible correlation with birth weight, presenting an ambiguous picture, which implies that within the dataset's range, maternal alcohol consumption doesn't play a significant role in influencing birth weight, or the data does not capture the full spectrum of drinking behaviors."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 15,
   "metadata": {
    "deletable": false,
    "editable": false,
    "scrolled": false
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "                            OLS Regression Results                            \n",
      "==============================================================================\n",
      "Dep. Variable:                  bwght   R-squared:                       0.034\n",
      "Model:                            OLS   Adj. R-squared:                  0.026\n",
      "Method:                 Least Squares   F-statistic:                     4.288\n",
      "Date:                Sun, 10 Mar 2024   Prob (F-statistic):           1.03e-06\n",
      "Time:                        20:41:51   Log-Likelihood:                -11323.\n",
      "No. Observations:                1461   AIC:                         2.267e+04\n",
      "Df Residuals:                    1448   BIC:                         2.274e+04\n",
      "Df Model:                          12                                         \n",
      "Covariance Type:            nonrobust                                         \n",
      "==============================================================================\n",
      "                 coef    std err          t      P>|t|      [0.025      0.975]\n",
      "------------------------------------------------------------------------------\n",
      "Intercept   1658.0538     88.628     18.708      0.000    1484.201    1831.907\n",
      "npvis         15.7678      4.119      3.828      0.000       7.688      23.848\n",
      "fage           5.4450      3.661      1.487      0.137      -1.737      12.627\n",
      "male          72.7422     29.749      2.445      0.015      14.387     131.097\n",
      "fwhte        639.6567     80.007      7.995      0.000     482.715     796.598\n",
      "feduc         11.7186      7.016      1.670      0.095      -2.044      25.482\n",
      "mwhte        554.2030     78.674      7.044      0.000     399.875     708.531\n",
      "mage          -1.0923      4.452     -0.245      0.806      -9.825       7.640\n",
      "monpre        27.7732     12.756      2.177      0.030       2.751      52.795\n",
      "drink        -17.6378     48.960     -0.360      0.719    -113.677      78.401\n",
      "mblck        393.2615    122.675      3.206      0.001     152.621     633.902\n",
      "fblck        789.2884    119.672      6.595      0.000     554.540    1024.037\n",
      "moth         710.5893    106.009      6.703      0.000     502.641     918.537\n",
      "foth         229.1087    115.955      1.976      0.048       1.650     456.567\n",
      "cigs          -9.8213      3.686     -2.664      0.008     -17.052      -2.590\n",
      "==============================================================================\n",
      "Omnibus:                      134.780   Durbin-Watson:                   0.067\n",
      "Prob(Omnibus):                  0.000   Jarque-Bera (JB):              305.308\n",
      "Skew:                          -0.552   Prob(JB):                     5.05e-67\n",
      "Kurtosis:                       4.949   Cond. No.                     3.02e+17\n",
      "==============================================================================\n",
      "\n",
      "Notes:\n",
      "[1] Standard Errors assume that the covariance matrix of the errors is correctly specified.\n",
      "[2] The smallest eigenvalue is 3.61e-29. This might indicate that there are\n",
      "strong multicollinearity problems or that the design matrix is singular.\n"
     ]
    }
   ],
   "source": [
    "# Used the statsmodels package for linear regression analysis.\n",
    "\n",
    "# (1) Instantiate a model object with specific features to predict 'RENTALS'.\n",
    "# Used 'ols' method to evaluate the relationship between 'RENTALS' and different features.\n",
    "lm_best = smf.ols(formula=\"\"\"bwght ~ npvis +\n",
    "                                fage +\n",
    "                                male +\n",
    "                                fwhte +\n",
    "                                feduc +\n",
    "                                mwhte +\n",
    "                                mage +\n",
    "                                monpre +\n",
    "                                drink +\n",
    "                                mblck +\n",
    "                                fblck +\n",
    "                                moth +\n",
    "                                foth +\n",
    "                                cigs\"\"\",\n",
    "                  data=df_full)\n",
    "\n",
    "\n",
    "# (2) Fitting the model with the dataset.\n",
    "# This will compute the best-fitting line for predicting 'RENTALS' from the features I selected.\n",
    "results = lm_best.fit()\n",
    "\n",
    "# (3) analyze the SUMMARY output of the model fit.\n",
    "print(results.summary())"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "**Insights from OLS Regression Analysis:**\n",
    "\n",
    "- Prenatal Visits (**npvis**): Positive relationship between the number of prenatal visits and birth weight, suggesting that increased prenatal care is associated with higher birth weights. This could be due to improved health monitoring and access to healthcare during pregnancy.\n",
    "\n",
    "- Male Babies (**male**): Positive coefficient, indicating that, on average, male babies tend to have a higher birth weight than female babies. \n",
    "\n",
    "- Parental Race (fwhte, mwhte, mblck, fblck): Both parents being white (**fwhte, mwhte**) or black (**mblck, fblck**) show positive coefficients. This might reflect underlying socioeconomic, genetic, or healthcare access differences. The substantial coefficients for parents identified as black may underline a complex interplay of factors that would affect birth weight, which would be interesting to analyze further.  \n",
    "\n",
    "- Mother's Pre-pregnancy Education (**feduc**) and Father's Age (**fage**): These variables show a positive but not statistically significant relationship with birth weight, indicating that while there might be an association, further research is needed to confirm these findings.\n",
    "\n",
    "- Mother's Age (**mage**): The analysis indicates a negligible and statistically insignificant effect of the mother's age on birth weight, suggesting that other factors not captured in this model might be more influential in determining birth weight.\n",
    "\n",
    "- **Monpre** (Month Prenatal Care Began): Starting prenatal care earlier is positively associated with birth weight, reinforcing the importance of early and consistent prenatal care. \n",
    "\n",
    "- Smoking Habits (**cigs**): As expected, smoking has a negative impact on birth weight, aligning with the extensive literature on the adverse effects of maternal smoking on fetal development (CDC, n.d.).\n",
    "\n",
    "- Mother's Race (**moth**) and Father's Race (**foth**) other than Black or White: These variables show positive coefficients, indicating a complex relationship between parental race and birth weight that may involve socioeconomic and healthcare access factors.\n",
    "\n",
    "\n",
    "Overall, the low R-squared value suggests that while the factors analyzed contribute to variations in birth weight, a significant portion of the variability remains unexplained by this model. This highlights the complexity of factors influencing birth weight, including genetic, environmental, socioeconomic, and healthcare-related issues, and emphasizes the need to further our research (by adding other features) to be able to 'grasp' a better picture of 'birth weight' and ultimately build a more robust predictive model. "
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### 1.4. Deeper initial Analysis of my data based on assumption\n",
    "\n",
    "Checking for the demographics of my data as a pre-analysis of my data to better understand my dataset. I will check for boys vs girls birth ratio, the race, the female age, and other. My hope is to bget better insights to know what to look at. "
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "**(1) Babies' Gender Ratio in Dataset**"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 16,
   "metadata": {
    "deletable": false,
    "editable": false,
    "scrolled": false
   },
   "outputs": [
    {
     "data": {
      "image/png": "",
      "text/plain": [
       "<Figure size 640x480 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "### (1) Checking Boys vs Girl ratio in babies birth in my data \n",
    "\n",
    "# Male column, indicating 1 for male (boys)\n",
    "\n",
    "# Dividing my data into boys and girls based on 'male' feature\n",
    "boys_data = df_full[df_full['male'] == 1]['male']\n",
    "girls_data = df_full[df_full['male'] == 0]['male']\n",
    "\n",
    "# Plotting the distribution of girls vs boys using a bar chart\n",
    "plt.bar([0, 1], [len(girls_data), len(boys_data)], color=['red', 'blue'])\n",
    "\n",
    "# Adding titles and labels:\n",
    "plt.title('Distribution of Girls vs Boys Babies')\n",
    "plt.ylabel('Count')\n",
    "plt.xticks([0, 1], ['Girls', 'Boys'])\n",
    "plt.ylim(600, 1000) # Sets the limits of the y-axis to range from 600 to 1000\n",
    "plt.yticks(range(600, 1000, 50)) #Sets the tick marks on the y-axis at 50, starting from 600 to 1000\n",
    "\n",
    "# Display the visualization:\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "**Insights:**\n",
    "\n",
    "The bar chart illustrates the gender distribution of newborns in the dataset, with a nearly equal count of girls (red bar) and boys (blue bar). This even distribution implies that the dataset does not exhibit a gender bias, which will be beneficial when analyzing birth weight across a gender-balanced sample. For this analysis, which is focused on factors affecting birth weight, the balanced gender proportion allows me to consider and compare the impact of prenatal factors without the confounding effect of a skewed gender ratio. Thus, any differences I will observe in birth weight outcomes between girls and boys can be investigated without concerns of underlying sample bias due to gender distribution."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "**(2)Race ratio within the dataset**"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 17,
   "metadata": {
    "deletable": false,
    "editable": false,
    "scrolled": false
   },
   "outputs": [
    {
     "data": {
      "image/png": "iVBORw0KGgoAAAANSUhEUgAAA1sAAAIhCAYAAAC48qAWAAAAOXRFWHRTb2Z0d2FyZQBNYXRwbG90bGliIHZlcnNpb24zLjcuMiwgaHR0cHM6Ly9tYXRwbG90bGliLm9yZy8pXeV/AAAACXBIWXMAAA9hAAAPYQGoP6dpAAA9+ElEQVR4nO3de1hVdd7//9dWDirCFkROSWqeBsVyPKRYd4BnCx2ruTS9Ii0HTRQjdXTsMJrN6OSMh8o0s9Iyy+m+y2omQ81TMYqJRaaZ2aSlI4gH3IhDgLB+f/R1/driAZGPG+T5uK59Xe213nvxWc2F9py199oOy7IsAQAAAACqVB1PLwAAAAAArkfEFgAAAAAYQGwBAAAAgAHEFgAAAAAYQGwBAAAAgAHEFgAAAAAYQGwBAAAAgAHEFgAAAAAYQGwBAAAAgAHEFgDgqu3atUsPPvigWrRooXr16qlhw4bq1KmT5syZo5MnT3p6eZKkN998UwsWLDBy7CeeeEI33nijvLy81KhRo4vOzZgxQw6Hw354e3vrxhtvVFJSknJycoysDQDgOV6eXgAAoGZbunSpkpOT1bZtW/3+979Xu3btVFJSoszMTL344ovatm2bVq9e7ell6s0339Tu3buVmppapcd9//339ec//1mPP/64BgwYIF9f38u+Ji0tTU6nUwUFBVq3bp3mzp2rrVu3KisrS97e3lW6PgCA5xBbAIBK27Ztm8aOHas+ffrovffecwuNPn36aNKkSUpLS/PgCs3bvXu3JGnChAkKCQmp0Gs6d+6s4OBgSVLv3r11/PhxLVu2TOnp6YqPjze2VgDAtcXbCAEAlTZr1iw5HA699NJLF7yi4+Pjo0GDBtnPy8rKNGfOHP3qV7+Sr6+vQkJC9MADD+jw4cNur2vevLlGjhxZ7nhxcXGKi4uzn2/evFkOh0NvvfWWHn/8cUVERCggIEC9e/fWvn373F734Ycf6ocffnB7G9+lVGStzZs31xNPPCFJCg0NlcPh0IwZMy553Avp0qWLJOno0aP2tmPHjik5OVnt2rVTw4YNFRISop49e+rTTz8t9/qioiLNnDlTUVFRqlevnho3bqz4+Hht3brVnrEsS4sWLVLHjh1Vv359BQYG6re//a2+//57t2N98cUXSkhIUEhIiHx9fRUREaG77rqr3P9GAIDLI7YAAJVSWlqqjRs3qnPnzoqMjKzQa8aOHaupU6eqT58++uCDD/T0008rLS1NPXr00PHjxyu9lscee0w//PCDXn75Zb300kvav3+/Bg4cqNLSUknSokWLdNtttyksLEzbtm2zH1e71tWrV2vUqFGSfn5r4LZt2/S73/3uitd/4MABSVKbNm3sbec+6zZ9+nR9+OGHWrZsmW666SbFxcVp8+bN9tzZs2c1YMAAPf3000pISNDq1au1fPly9ejRQz/++KM9N2bMGKWmpqp379567733tGjRIu3Zs0c9evSwI+/MmTPq06ePjh49qhdeeEHr16/XggULdOONN+r06dNXfF4AUOtZAABUQk5OjiXJuu+++yo0v3fvXkuSlZyc7LZ9+/btliTrscces7c1a9bMGjFiRLljxMbGWrGxsfbzTZs2WZKsO++8023u7bfftiRZ27Zts7fdddddVrNmzap8rdOnT7ckWceOHbvscc/N5uTkWCUlJVZeXp719ttvW35+ftawYcMu+dqzZ89aJSUlVq9evay7777b3v76669bkqylS5de9LXbtm2zJFlz5851237o0CGrfv361pQpUyzLsqzMzExLkvXee+9d9lwAAJfHlS0AwDWxadMmSSr39sBbb71VUVFR2rBhQ6WP/cu3KkrSzTffLEn64YcfKnU8k2uVpLCwMHl7eyswMFBDhgxR586d9dprr5Wbe/HFF9WpUyfVq1dPXl5e8vb21oYNG7R371575qOPPlK9evX00EMPXfTn/fOf/5TD4dD999+vs2fP2o+wsDDdcsst9pWyVq1aKTAwUFOnTtWLL76or7/++qrOEwBqO2ILAFApwcHBatCggf0WuMs5ceKEJCk8PLzcvoiICHt/ZTRu3Njt+bnPjxUWFlbqeCbXKkkff/yxduzYobVr1+ree+/VJ598opSUFLeZefPmaezYserWrZveeecdZWRkaMeOHerfv7/beR07dkwRERGqU+fif6UfPXpUlmUpNDRU3t7ebo+MjAz7bZFOp1NbtmxRx44d9dhjj6l9+/aKiIjQ9OnTVVJSclXnDAC1EXcjBABUSt26ddWrVy999NFHOnz4sJo2bXrJ+XNBlJ2dXW72yJEj9t35JKlevXoqKioqd4zjx4+7zZlyJWutjFtuucU+Rp8+fdSvXz+99NJLGjVqlLp27SpJeuONNxQXF6fFixe7vfb8z041adJE6enpKisru2hwBQcHy+Fw6NNPP73gjUx+ua1Dhw5atWqVLMvSrl27tHz5cs2cOVP169fXH/7wh6s6bwCobbiyBQCotGnTpsmyLCUlJam4uLjc/pKSEv3jH/+QJPXs2VPSzxHxSzt27NDevXvVq1cve1vz5s21a9cut7lvv/3W7Q6DV8rX17fCV7quZK1Xy+Fw6IUXXlDdunXtOxue235+GO3atavcjT0GDBign376ScuXL7/oz0hISJBlWfrPf/6jLl26lHt06NDhguu65ZZbNH/+fDVq1Eiff/751Z0oANRCXNkCAFRaTEyMFi9erOTkZHXu3Fljx45V+/btVVJSoi+++EIvvfSSoqOjNXDgQLVt21ajR4/W888/rzp16mjAgAE6ePCgnnzySUVGRurRRx+1j5uYmKj7779fycnJuvfee/XDDz9ozpw5atKkSaXX2qFDB7377rtavHixOnfurDp16ti3XD/flay1KrRu3VqjR4/WokWLlJ6erttvv10JCQl6+umnNX36dMXGxmrfvn2aOXOmWrRoobNnz9qvHTZsmJYtW6aHH35Y+/btU3x8vMrKyrR9+3ZFRUXpvvvu02233abRo0frwQcfVGZmpu644w75+fkpOztb6enp6tChg8aOHat//vOfWrRokQYPHqybbrpJlmXp3Xff1alTp9SnT58qPWcAqBU8ensOAMB1ISsryxoxYoR14403Wj4+Ppafn5/161//2vrjH/9o5ebm2nOlpaXWM888Y7Vp08by9va2goODrfvvv986dOiQ2/HKysqsOXPmWDfddJNVr149q0uXLtbGjRsvejfC//3f/3V7/YEDByxJ1rJly+xtJ0+etH77299ajRo1shwOh3W5vwIrutbK3I3wQrNHjx61GjZsaMXHx1uWZVlFRUXW5MmTrRtuuMGqV6+e1alTJ+u9996zRowYUe6uioWFhdYf//hHq3Xr1paPj4/VuHFjq2fPntbWrVvd5l599VWrW7dulp+fn1W/fn2rZcuW1gMPPGBlZmZalmVZ33zzjTVs2DCrZcuWVv369S2n02ndeuut1vLlyy97bgCA8hyWZVkerT0AAAAAuA7xmS0AAAAAMIDYAgAAAAADiC0AAAAAMIDYAgAAAAADiC0AAAAAMIDYAgAAAAAD+FLjCiorK9ORI0fk7+8vh8Ph6eUAAAAA8BDL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Gf7ggw/sf167dq2cTqf9vLS0VBs2bFDz5s2rbHEAAAAAUFNdUWwNHjxYkuRwODRixAi3fd7e3mrevLnmzp1bZYsDAAAAgJrqimKrrKxMktSiRQvt2LFDwcHBRhYFAAAAADXdFcXWOQcOHKjqdQAAAADAdaVSsSVJGzZs0IYNG5Sbm2tf8Trn1VdfveqFAQAAAEBNVqnYeuqppzRz5kx16dJF4eHhcjgcVb0uAAAAAKjRKhVbL774opYvX67ExMSqXg8AAAAAXBcq9T1bxcXF6tGjR1WvBQAAAACuG5WKrd/97nd68803q3otAAAAAHDdqNTbCH/66Se99NJL+vjjj3XzzTfL29vbbf+8efOqZHEAAAAAUFNVKrZ27dqljh07SpJ2797tto+bZQAAAABAJWNr06ZNVb0OAAAAALiuVOozWwAAAACAS6vUla34+PhLvl1w48aNlV4QAAAAAFwPKhVb5z6vdU5JSYmysrK0e/dujRgxoirWBQAAAAA1WqVia/78+RfcPmPGDBUUFFzVggAAAADgelCln9m6//779eqrr1blIQEAAACgRqrS2Nq2bZvq1atXlYcEAAAAgBqpUm8jvOeee9yeW5al7OxsZWZm6sknn6yShQEAAABATVap2HI6nW7P69Spo7Zt22rmzJnq27dvlSwMAAAAAGqySsXWsmXLqnodAAAAAHBdqVRsnbNz507t3btXDodD7dq1069//euqWhcAAAAA1GiViq3c3Fzdd9992rx5sxo1aiTLsuRyuRQfH69Vq1apSZMmVb1OAAAAAKhRKnU3wpSUFOXn52vPnj06efKk8vLytHv3buXn52vChAlVvUYAAAAAqHEqdWUrLS1NH3/8saKiouxt7dq10wsvvMANMgAAAABAlbyyVVZWJm9v73Lbvb29VVZWdtWLAgAAAICarlKx1bNnTz3yyCM6cuSIve0///mPHn30UfXq1avKFgcAAAAANVWlYmvhwoU6ffq0mjdvrpYtW6pVq1Zq0aKFTp8+reeff76q1wgAAAAANU6lPrMVGRmpzz//XOvXr9c333wjy7LUrl079e7du6rXBwAAAAA10hVd2dq4caPatWun/Px8SVKfPn2UkpKiCRMmqGvXrmrfvr0+/fRTIwsFAAAAgJrkimJrwYIFSkpKUkBAQLl9TqdTY8aM0bx586pscQAAAABQU11R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559/rlatWqlfv37y9/fXO++8I0nat2+fsrOz9eyzz9qve+211+Tn56ft27drzpw5mjlzptavXy9JsixLd911l3JycrRmzRrt3LlTnTp1Uq9evXTy5En7GN99953efvttvfPOO8rKyrqm541qxgJquU6dOll/+9vfLMuyrMGDB1t//vOfLR8fHys/P9/Kzs62JFl79+61li1bZkmyvvvuO/u1L7zwghUaGmo/HzFihPWb3/zGfh4bG2s98sgjbj/vySeftPr27eu27dChQ5Yka9++fVV/ggBssbGxVlRUlFVWVmZvmzp1qhUVFWVZlmU1a9bMmj9//kVf//bbb1uNGze2nw8bNsy67bbbLvnzHnnkEeuFF16wnE6ntXHjxqs/CQCXVVBQYHl7e1srV660txUXF1sRERHWnDlzrE2bNlmSrLy8PLfXxcbGWrfffrvbtq5du1pTp061LMuyNmzYYAUEBFg//fST20zLli2tJUuWWJZlWdOnT7e8vb2t3NxcA2eGmoYrW6j14uLitHnzZlmWpU8//VS/+c1vFB0drfT0dG3atEmhoaH61a9+JUlq0KCBWrZsab82PDxcubm5V/Tzdu7cqU2bNqlhw4b249zx//3vf1fdiQG4oO7du8vhcNjPY2JitH///gtejdq0aZP69OmjG264Qf7+/nrggQd04sQJnTlzRtL/f2XrUt555x2lpqZq3bp19luXAJj173//WyUlJbrtttvsbd7e3rr11lu1d+/eS7725ptvdnv+y7/rd+7cqYKCAjVu3Njt7/EDBw64/R3erFkzNWnSpArPCDUVN8hArRcXF6dXXnlFX375perUqaN27dopNjZWW7ZsUV5env0WQknlPuDqcDiu+H3YZWVlGjhwoJ555ply+8LDwyt3EgCq3A8//KA777xTDz/8sJ5++mkFBQUpPT1do0aNUklJiSSpfv36lz1Ox44d9fnnn2vZsmXq2rWrW+gBMOPc383n/75ZlnXZ38EL/V1/7rPdZWVlCg8P1+bNm8u97pdfD+Pn51eJVeN6xJUt1HrnPre1YMECxcbGyuFwKDY2Vps3b3b7vFZl+Pj4lPt/yzt16qQ9e/aoefPmatWqlduDP5wB8zIyMso9b926terWreu2PTMzU2fPntXcuXPVvXt3tWnTRkeOHHGbufnmm7Vhw4ZL/ryWLVtq06ZNev/9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",
      "text/plain": [
       "<Figure size 1000x600 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "### (2) Checking the race ratio within my dataset. \n",
    "# knowing there is white, black and other in our dataset\n",
    "# Aggregating the counts for 'white', 'black', and 'other' across both males and females\n",
    "\n",
    "# Aggregate counts for each race across both genders\n",
    "white_count = df_full[['mwhte', 'fwhte']].sum().sum()\n",
    "black_count = df_full[['mblck', 'fblck']].sum().sum()\n",
    "other_count = df_full[['moth', 'foth']].sum().sum()\n",
    "\n",
    "# Store the aggregated counts in a list for easy plotting\n",
    "counts = [white_count, black_count, other_count]\n",
    "\n",
    "# Define the races and indices \n",
    "races = ['white', 'black', 'other']\n",
    "indices = range(len(races))\n",
    "\n",
    "# Visualizing by plotting the result in a bar graph\n",
    "plt.figure(figsize=(10, 6))\n",
    "plt.bar(indices, counts, color=['cornflowerblue', 'plum', 'lightgreen'])\n",
    "\n",
    "# Customize xticks to label the different races\n",
    "plt.xticks(indices, races)\n",
    "\n",
    "# Adding title and axis labels to the graph \n",
    "plt.title('Count of Races')\n",
    "plt.xlabel('Race')\n",
    "plt.ylabel('Count')\n",
    "\n",
    "# Display the results\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "**Insights:**\n",
    "\n",
    "This bar chart presents the racial distribution of the dataset, highlighting a significant majority of white individuals compared to black and other races. This demographic skew is critical to acknowledge as it suggests our dataset may only fully present all racial groups, and such a disparity must be considered during analysis since it's well-documented that race and demographics can influence newborn health outcomes (Office of Minority Health [OMH], n.d.). Therefore, our study's conclusions might be more reflective of the white population's birth trends and may not accurately capture the birthweight dynamics in other racial groups, potentially limiting the generalizability of our findings."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "**(3) Maternal Smoking vs. Birthweight**"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 18,
   "metadata": {
    "deletable": false,
    "editable": false,
    "scrolled": false
   },
   "outputs": [
    {
     "data": {
      "image/png": "",
      "text/plain": [
       "<Figure size 800x600 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "### (4)(2)Scatterplot to explore the correlation between maternal smoking and birthweight\n",
    "\n",
    "# Set the histogram figure size.\n",
    "plt.figure(figsize=(8, 6))\n",
    "\n",
    "# Plotting a scatterplot to visualize the relationship between ‘cigs’ and ‘bwght’ \n",
    "sns.scatterplot(x='cigs', y='bwght', data=df_full, color='skyblue')\n",
    "\n",
    "# Adding title and axis labels to the graph \n",
    "plt.title('Maternal Smoking vs. Birthweight')\n",
    "plt.xlabel('Cigarettes per Day')\n",
    "plt.ylabel('Birthweight (grams)')\n",
    "\n",
    "# Display the histogram to visualize the distribution. \n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "**Insights:**\n",
    "\n",
    "The scatter plot illustrates the relationship between maternal smoking and birth weight, showing varied birth weights across different levels of cigarette consumption. While there is no distinct pattern, the presence of lower birth weights at higher smoking levels aligns with known health risks; smoking is a well-documented risk factor for lower birth weights. The Centers for Disease Control and Prevention (CDC) notes that \"One in every five babies born to mothers who smoke during pregnancy has low birth weight\" (CDC, n.d.). This graph thus proves the broader public health understanding and supports the need for expecting mothers to stop smoking during pregnancy to promote healthier birth outcomes."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    " **(4) Prenatal visit vs birth weight**"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 19,
   "metadata": {
    "deletable": false,
    "editable": false,
    "scrolled": false
   },
   "outputs": [
    {
     "data": {
      "image/png": "",
      "text/plain": [
       "<Figure size 800x600 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "# Creating a Scatter plot for prenatal visits vs. birthweight\n",
    "\n",
    "##Setting up the figure size for the plot\n",
    "plt.figure(figsize=(8, 6))\n",
    "\n",
    "# Plotting a scatterplot to visualize the relationship.\n",
    "sns.scatterplot(x='npvis', y='bwght', data=df_full)\n",
    "\n",
    "# Adding title and labels\n",
    "plt.title('Prenatal Visits vs. Birthweight')\n",
    "plt.xlabel('Total Prenatal Visits')\n",
    "plt.ylabel('Birthweight (grams)')\n",
    "\n",
    "# Displaying the graph\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "**Insights:**\n",
    "\n",
    "The scatter plot shows the relationship between the total number of prenatal visits and birth weight in grams. The distribution of dots suggests that there isn't a robust and clear trend between more prenatal visits and higher birth weights, as the points are widely spread out. Most data points are clustered at the lower end of prenatal visits, which is expected since standard prenatal care schedules typically recommend a certain number of visits unless complications arise (Wang. et al., 2020). However, there are several outliers, particularly with higher birth weights spread across the range of prenatal visits, which shows that other factors may also play a significant role in determining birth weight. Additionally, no distinct cluster of points indicates a definitive pattern, underscoring the complexity of factors that influence birth weight."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "<br><h2> Missing Value Analysis and Imputation</h2>"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 20,
   "metadata": {
    "deletable": false,
    "editable": false,
    "scrolled": false
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "mage        0\n",
       "meduc      30\n",
       "monpre      5\n",
       "npvis      68\n",
       "fage        6\n",
       "feduc      47\n",
       "cigs      110\n",
       "drink     115\n",
       "male        0\n",
       "mwhte       0\n",
       "mblck       0\n",
       "moth        0\n",
       "fwhte       0\n",
       "fblck       0\n",
       "foth        0\n",
       "bwght     184\n",
       "set         0\n",
       "dtype: int64"
      ]
     },
     "execution_count": 20,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "## Missing Value Imputation ##\n",
    "\n",
    "# Checking for missing values in df_full to identify columns that require imputation.\n",
    "df_full.isnull().sum(axis=0)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "**Missing values found in the following features:**\n",
    "    \n",
    "- Mother's education in years (meduc):  30 missing values; continuous.  \n",
    "- Month of pregnancy that prenatal care began (monpre) : 45missing values; discrete. \n",
    "- Total number of prenatal visits (npvis) 68 missing values; discrete. \n",
    "- Father's age in years (fage): 6 missing values, continuous. \n",
    "- Father's education in years (feduc): 47 missing values; continuous.\n",
    "- Average cigarettes per day consumed by the mother (cigs): 110 missing values, discrete. \n",
    "- Average drinks per week consumed by the mother (drink): 115 missing values, discrete. "
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "**Before Handling missing values**\n",
    "\n",
    "Creating a  frequency table for 'drink' and 'cigs' to understand the data better:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 21,
   "metadata": {
    "deletable": false,
    "editable": false,
    "scrolled": true
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "drink\n",
       "0.0    1701\n",
       "1.0      11\n",
       "2.0       2\n",
       "6.0       1\n",
       "5.0       1\n",
       "8.0       1\n",
       "Name: count, dtype: int64"
      ]
     },
     "execution_count": 21,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# frequency table for drink\n",
    "df_full['drink'].value_counts()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 22,
   "metadata": {
    "deletable": false,
    "editable": false,
    "scrolled": true
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "cigs\n",
       "0.0     1575\n",
       "10.0      50\n",
       "20.0      39\n",
       "5.0       11\n",
       "4.0        7\n",
       "15.0       7\n",
       "30.0       6\n",
       "6.0        6\n",
       "2.0        5\n",
       "3.0        5\n",
       "40.0       2\n",
       "8.0        2\n",
       "1.0        2\n",
       "12.0       1\n",
       "25.0       1\n",
       "7.0        1\n",
       "9.0        1\n",
       "16.0       1\n",
       "Name: count, dtype: int64"
      ]
     },
     "execution_count": 22,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# frequency table for cigs\n",
    "df_full['cigs'].value_counts()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "After looking at these frequency table, and specifically at drinking habits, I believe there is not enough observation of pregnant women with weekly drinking habit inside the dataset to keep this feature in the daatset"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 23,
   "metadata": {
    "deletable": false,
    "editable": false,
    "scrolled": true
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "Index(['mage', 'meduc', 'monpre', 'npvis', 'fage', 'feduc', 'cigs', 'male', 'mwhte', 'mblck', 'moth', 'fwhte', 'fblck', 'foth', 'bwght', 'set'], dtype='object')"
      ]
     },
     "execution_count": 23,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# dropping \"drink\" feature\n",
    "df_full = df_full.drop(labels = 'drink',\n",
    "                       axis   = 1)\n",
    "\n",
    "# Checking the remaining columns\n",
    "df_full.columns"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "<br><hr style=\"height:.9px;border:none;color:#333;background-color:#333;\" /><br>\n",
    "\n",
    "<hr style=\"height:.7x;border:none;color:#333;background-color:#333;\" /><br>\n",
    "\n",
    "<h2>  Part II: Data Preparation & Descriptive Analysis </h2>\n",
    "<br><hr style=\"height:.9px;border:none;color:#333;background-color:#333;\" /><br>\n",
    "<h3> (1) Flagging Missing Values</h3>\n",
    "\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 24,
   "metadata": {
    "deletable": false,
    "editable": false
   },
   "outputs": [],
   "source": [
    "# running the mv_flagger function\n",
    "df_full = mv_flagger(df= df_full)\n",
    "\n",
    "\n",
    "# checking results\n",
    "df_full.columns\n",
    "\n",
    "# Drop 'm_' prefixed columns except 'm_cigs' directly from the original DataFrame\n",
    "df_full.drop(columns=[col for col in df_full.columns if col.startswith('m_')], inplace=True)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "<h3> (2) Developing a Strategy for Missing Data Imputation Based on Feature Analysis </h3>"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 25,
   "metadata": {
    "deletable": false,
    "editable": false,
    "scrolled": false
   },
   "outputs": [
    {
     "data": {
      "image/png": "",
      "text/plain": [
       "<Figure size 640x480 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "## (1) Missing Value Imputation of meduc (Mother's Education in Years) variable\n",
    "\n",
    "# plotting 'meduc (Mother's Education) variable'\n",
    "sns.histplot(x = 'meduc',\n",
    "            data = df_full,\n",
    "            kde = True, \n",
    "            binwidth=1,\n",
    "            discrete=True)\n",
    "\n",
    "# lines of \"median\"\n",
    "plt.axvline(df_full[\"meduc\"].median(),  \n",
    "            color=\"black\")\n",
    "plt.axvline(df_full['feduc'].mode().iloc[0], color=\"green\") \n",
    "\n",
    "# title and labels\n",
    "plt.title (label  = 'Distribution of meduc (Mothers Education)')\n",
    "plt.xlabel(xlabel = 'meduc (Mothers Education)')\n",
    "plt.ylabel(ylabel = 'Count')\n",
    "\n",
    "# displaying the plot\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 26,
   "metadata": {
    "deletable": false,
    "editable": false,
    "scrolled": false
   },
   "outputs": [
    {
     "data": {
      "image/png": "",
      "text/plain": [
       "<Figure size 640x480 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "## (2) Missing Value Imputation of monpre (Month of pregnancy that Prenatal Care Began)\n",
    "\n",
    "# Plotting 'monpre (Month of pregnancy that Prenatal Care Began)'\n",
    "sns.histplot(x = 'monpre',\n",
    "            data = df_full,\n",
    "            kde = True)\n",
    "\n",
    "# mean and median lines\n",
    "plt.axvline(df_full['monpre'].mean(), color=\"red\")\n",
    "plt.axvline(df_full['monpre'].median(), color=\"blue\")\n",
    "plt.axvline(df_full['monpre'].mode().iloc[0], color=\"green\") \n",
    "\n",
    "# title and labels\n",
    "plt.title (label  = \"Prenatal Care\")\n",
    "plt.xlabel(xlabel = 'Months')\n",
    "plt.ylabel(ylabel = 'Count')\n",
    "\n",
    "\n",
    "# displaying the plot\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 27,
   "metadata": {
    "deletable": false,
    "editable": false,
    "scrolled": false
   },
   "outputs": [
    {
     "data": {
      "image/png": "",
      "text/plain": [
       "<Figure size 640x480 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "## (3) Missing Value Imputation of 'fage'(Father's Age in years) variable\n",
    "\n",
    "# Plotting 'Father's age in years' into a HISTPLOT to decide on method on implantation\n",
    "sns.histplot(x = 'fage',\n",
    "            data = df_full,\n",
    "            kde = True)\n",
    "\n",
    "# mean and median lines\n",
    "plt.axvline(df_full['fage'].mean(), color=\"red\")\n",
    "plt.axvline(df_full['fage'].median(), color=\"blue\")\n",
    "plt.axvline(df_full['fage'].mode().iloc[0], color=\"green\") \n",
    "\n",
    "\n",
    "# title and labels\n",
    "plt.title (label  = \"Father's age\")\n",
    "plt.xlabel(xlabel = 'Years')\n",
    "plt.ylabel(ylabel = 'Count')\n",
    "\n",
    "\n",
    "# displaying the plot\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 28,
   "metadata": {
    "deletable": false,
    "editable": false,
    "scrolled": false
   },
   "outputs": [
    {
     "data": {
      "image/png": "",
      "text/plain": [
       "<Figure size 640x480 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "## (4) Missing Value Imputation of 'feduc'(Father's Education in Years) variable\n",
    "\n",
    "# plotting 'Father's Education in Years'\n",
    "sns.histplot(x = 'feduc',\n",
    "            data = df_full,\n",
    "            kde = True)\n",
    "\n",
    "# mean and median lines\n",
    "plt.axvline(df_full['feduc'].mean(), color=\"red\")\n",
    "plt.axvline(df_full['feduc'].median(), color=\"blue\")\n",
    "plt.axvline(df_full['feduc'].mode().iloc[0], color=\"green\") \n",
    "\n",
    "# title and labels\n",
    "plt.title (label  = \"Father's education\")\n",
    "plt.xlabel(xlabel = 'Years')\n",
    "plt.ylabel(ylabel = 'Count')\n",
    "\n",
    "\n",
    "# displaying the plot\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 29,
   "metadata": {
    "deletable": false,
    "editable": false
   },
   "outputs": [
    {
     "data": {
      "image/png": "",
      "text/plain": [
       "<Figure size 640x480 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "## (5) Missing Value Imputation of 'cigs'(Mother's cigarettes daily consumption') variable\n",
    "\n",
    "# plotting 'Mother's cigarettes daily consumption'\n",
    "sns.histplot(x = 'cigs',\n",
    "            data = df_full,\n",
    "            kde = True)\n",
    "\n",
    "# mean and median lines\n",
    "plt.axvline(df_full['cigs'].mean(), color=\"red\")\n",
    "plt.axvline(df_full['cigs'].median(), color=\"blue\")\n",
    "plt.axvline(df_full['cigs'].mode().iloc[0], color=\"green\") \n",
    "\n",
    "# title and labels\n",
    "plt.title (label  = \"Mother's Daily Cigarretes\")\n",
    "plt.xlabel(xlabel = 'Cigarretes')\n",
    "plt.ylabel(ylabel = 'Count')\n",
    "\n",
    "\n",
    "# displaying the plot\n",
    "plt.show()\n",
    "\n",
    "# Note: the correlation at first, without filling in the missing values was not significant \n",
    "# which maybe that can be explained by the fact that over 100 missing values are in this feature, \n",
    "#which aligns with the fact that often people are ashamed of admitting they smoke"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "<h3> (3) Implementing the missing value based on the strategy I picked </h3>"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 30,
   "metadata": {
    "deletable": false,
    "editable": false
   },
   "outputs": [],
   "source": [
    "# Based on the graph I will now fill in the missing values in my dataset. \n",
    "\n",
    "# First, I create a missing values strategies for each features \n",
    "# depending on the information I gathered from the graph:\n",
    "m_education   = df_full['meduc'].mode()[0] \n",
    "f_education   = df_full['feduc'].median() \n",
    "f_age         = df_full['fage'].median() \n",
    "pren_month    = df_full['monpre'].mean() \n",
    "pren_visits   = df_full['npvis'].mean() \n",
    "m_cigarrettes = df_full['cigs'].median() \n",
    "\n",
    "# Second, I then impute the missing values in the dataset:\n",
    "df_full['meduc'].fillna(value    = m_education, inplace   = True)\n",
    "df_full['feduc'].fillna(value    = f_education, inplace   = True)\n",
    "df_full['fage'].fillna(value     = f_age, inplace         = True)\n",
    "df_full['monpre'].fillna(value   = pren_month, inplace      = True)\n",
    "df_full['npvis'].fillna(value    = pren_visits, inplace     = True)\n",
    "df_full['cigs'].fillna(value     = m_cigarrettes, inplace = True)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "<h3> (4) Check that missing values have been handled </h3>"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 31,
   "metadata": {
    "deletable": false,
    "editable": false,
    "scrolled": false
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "mage        0\n",
       "meduc       0\n",
       "monpre      0\n",
       "npvis       0\n",
       "fage        0\n",
       "feduc       0\n",
       "cigs        0\n",
       "male        0\n",
       "mwhte       0\n",
       "mblck       0\n",
       "moth        0\n",
       "fwhte       0\n",
       "fblck       0\n",
       "foth        0\n",
       "bwght     184\n",
       "set         0\n",
       "dtype: int64"
      ]
     },
     "execution_count": 31,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# Now, checking that ALL missing values (except for 'bwght') have been handled. \n",
    "df_full.isnull().sum(axis=0)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "<br><h2> PART III: Transformation</h2>"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Analyzing the skewness of the data is essential in regression analysis as it helps ensure that the model's assumptions about the normal distribution of variables are met, leading to more reliable and valid predictions. Indeed, highly skewed data can affect the model's estimates and inferences, which makes transformations a critical step in data pre-processing for improved model accuracy. I therefore created a bar plot to show the skewness of each feature in the dataset. "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 32,
   "metadata": {
    "deletable": false,
    "editable": false
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "mage      0.07\n",
       "meduc    -0.34\n",
       "monpre    2.07\n",
       "npvis     1.50\n",
       "fage      0.66\n",
       "feduc    -0.56\n",
       "cigs      4.80\n",
       "male     -0.05\n",
       "mwhte    -2.44\n",
       "mblck     3.73\n",
       "moth      3.95\n",
       "fwhte    -2.49\n",
       "fblck     3.77\n",
       "foth      4.05\n",
       "dtype: float64"
      ]
     },
     "execution_count": 32,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# subsetting X-data\n",
    "x_data = df_full[['mage', 'meduc', 'monpre', 'npvis', 'fage', 'feduc', \n",
    "                      'cigs', 'male', 'mwhte', 'mblck', 'moth', \n",
    "                      'fwhte', 'fblck', 'foth']]\n",
    "\n",
    "# checking skewness\n",
    "x_data.skew().round(decimals=2)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 33,
   "metadata": {
    "deletable": false,
    "editable": false,
    "scrolled": false
   },
   "outputs": [
    {
     "data": {
      "image/png": "",
      "text/plain": [
       "<Figure size 1000x800 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "# Looking at the skewness of ONLY numerical features in the Dataframe df_full.\n",
    "\n",
    "# Selecting only numeric columns from df_full to calculate skewness values.\n",
    "skew_values = df_full.select_dtypes(include ='number').skew()\n",
    "\n",
    "# Visualizing the skewness of each feature using a bar plot. \n",
    "\n",
    "# Setting the figure size for better visualization.\n",
    "plt.figure(figsize = (10,8))\n",
    "\n",
    "# Creating a bar plot of the skewness values.\n",
    "skew_values.plot(kind = 'bar')\n",
    "\n",
    "# Adding axis labels and title\n",
    "plt.title (label = 'Skewness of variable in dataset')\n",
    "plt.xlabel (xlabel = 'Features')\n",
    "plt.ylabel(ylabel = 'Skewness value')\n",
    "\n",
    "# Display the plot to show the skewness of numerical features in df_full.\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "**Skewness Insights on the Data**\n",
    "\n",
    "The skewness further clarifies patterns within the dataset, particularly regarding certain demographic and health-related variables.\n",
    "\n",
    "- Race Variables (**mwhte**, **mblck**, **moth**, **fwhte**, **fblck**, **foth**): A pronounced negative skewness is observed for the variable representing mothers who are white (mwhte), indicating an overrepresentation of white mothers compared to other races. This reflects the underrepresentation in the dataset for other races, so it's important to keep it in mind during the analysis. \n",
    "\n",
    "- Maternal Smoking Per Day(**cigs**, 4.8): The skewness for maternal smoking is significantly positive, indicating that the majority of mothers reported smoking few or no cigarettes, with a smaller number of mothers reporting high cigarette usage. This skewness aligns with the assumption that most women would not smoke during pregnancy as it represents a risk to the health of the baby and simultaneously has a negative effect on babies growth and thus, weight.\n",
    "\n",
    "- **Monpre** (2.1) and **Npvis** (1.5): lean towards earlier and fewer visits. This pattern underscores the need for enhanced prenatal care engagement, as timely and frequent care is crucial for optimal health outcomes.\n",
    "\n",
    "- **Fage** (1.2): A mild positive skewness in the father's age suggests a variation in the dataset, with a lean towards younger fathers.\n",
    "\n",
    "- **Feduc** (0.9): The skewness here is slightly positive, indicating a trend toward lower levels of maternal education in the dataset."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "<br><h2> PART IV: Feature Engineering </h2>"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "**(1) Low birth weight variable**\n",
    "\n",
    "I created a new boolean variable, 'low_bwght'. This variable, derived from the 'bwght' feature already present in our dataset, flags newborns with weights below a critical threshold, indicating potential health risks. I therefore had to do some research, and following the insights from Stanford Medicine on children's health, I set this threshold at 2500 grams. Thus, 'low_bwght' equals '1' for weights under 2500 grams, identifying newborns at a low birth weight and thus increased health risk.\n",
    "\n",
    "## Question 2 :\n",
    "Is there an official threshold that signifies when birthweight gets more dangerous? In other words, is there a cutoff point between a healthy birthweight and a non-healthy birthweight? \n",
    "\n",
    "Yes, doctors and health experts have set a specific weight to look out for that helps them know when a baby's birth weight might be too low and could cause health problems. According to Stanford Children's Health (n.d.), a baby weighing less than 2500 grams (about 5 pounds and 8 ounces) at birth is considered to have a low birth weight. Having a 'healthy' birth weight is important because babies who weigh less at birth can face more health challenges right after they're born and as they grow up. For example, they might have a harder time staying warm, fighting off sickness, and growing strong compared to babies who weigh more. Knowing which babies have low birth weight lets doctors and nurses give them extra care to help them get healthier and stronger. It also shows why it's so important for pregnant women to take good care of themselves, eat healthily, and avoid things that could harm their babies, like smoking. This way, more babies can have a better start in life with fewer health problems."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 34,
   "metadata": {
    "deletable": false,
    "editable": false,
    "scrolled": true
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "low_bwght:\n",
      "Number of 1s: 84\n",
      "Number of 0s: 1748\n"
     ]
    }
   ],
   "source": [
    "# defining the new variable \"low_bwght\"\n",
    "df_full['low_bwght'] = 0\n",
    "\n",
    "# setting a threshold value of 2500 and looping to find low_bwght\n",
    "for index, val in df_full.iterrows():\n",
    "    \n",
    "    \n",
    "    if df_full.loc[index , 'bwght'] < 2500:\n",
    "        df_full.loc[index, 'low_bwght'] = 1\n",
    "        \n",
    "        \n",
    "for column in ['low_bwght']:\n",
    "    value_counts = df_full[column].value_counts()\n",
    "    print(f\"{column}:\")\n",
    "    print(f\"Number of 1s: {value_counts.get(1, 0)}\")\n",
    "    print(f\"Number of 0s: {value_counts.get(0, 0)}\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 35,
   "metadata": {
    "deletable": false,
    "editable": false
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\n",
      "\n",
      "Low Birthweight Data Ratio\n",
      "--------------------------------------------\n",
      "low_bwght\n",
      "0    0.95\n",
      "1    0.05\n",
      "Name: proportion, dtype: float64\n",
      "\n",
      "\n"
     ]
    }
   ],
   "source": [
    "## checking ratio of the data, even though it's already pretty clear\n",
    "\n",
    "# Printing the ratio between low_bwght and bwght\n",
    "print(f\"\"\"\n",
    "\n",
    "Low Birthweight Data Ratio\n",
    "--------------------------------------------\n",
    "{df_full['low_bwght'].value_counts(normalize = True).round(decimals = 2)}\n",
    "\n",
    "\"\"\")"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "**(2) Maternal smoking status feature**\n",
    "\n",
    "I created a feature to determine whether pregnant women are smokers or non-smokers. Since I observed that the majority weren't smokers in the previous analysis, where almost everyone had a '0' for cigarette consumption, this feature will help me understand how Smoking affects birth outcomes. Knowing who smokes and who doesn't, I can better predict factors like birth weight in my model."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 36,
   "metadata": {
    "code_folding": [],
    "deletable": false,
    "editable": false,
    "scrolled": false
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "smoker\n",
      "0    1685\n",
      "1     147\n",
      "Name: count, dtype: int64\n"
     ]
    },
    {
     "data": {
      "image/png": "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OiA1NdVg/9zcXLi6umLSpElo2LChwT5JSUno3bs3EhMTkZycDC8vL4SGhuLSpUvluShERET0DNGIiJhq5k2bNkWTJk2wdOlSpc3X1xfdunVDVFRUieO2atUKjRo1woIFC0rsV1BQACcnJyxatAgRERGlqis7OxsODg64ceMG7O3tSzUOERE9Xfr06aOcBO3m5oY1a9aYuCIqb8Z8f5tsD9Ddu3dx6NAhhIaG6rSHhoZi3759ZTaff/75B3l5eXB2di6zaRIREdGzzWSXwWdkZKCgoABubm467W5ubkhPTy+z+bz33nvw8PBASEhIsX1yc3ORm5urPM/Ozi6z+RMREdHTx+QnQWs0Gp3nIqLX9qjmzJmDtWvXYsOGDdBqtcX2i4qKgoODg/Lw9PQsk/kTERHR08lkAcjFxQVmZmZ6e3uuXr2qt1foUcybNw+zZs1CfHw8GjRoUGLfCRMm4MaNG8rj4sWLjz1/IiIienqZLABZWlrC398fCQkJOu0JCQkIDAx8rGnPnTsXM2fOxNatWxEQEPDQ/lZWVrC3t9d5EBER0b+XSX8KIzIyEuHh4QgICECzZs2wbNkypKamYsiQIQDu7Zm5dOkSVq9erYxz5MgRAEBOTg6uXbuGI0eOwNLSEn5+fgDuHfaaMmUK1qxZg2rVqil7mGxtbWFra/tkF5CIiIieSiYNQL169UJmZiZmzJiBtLQ01KtXD3FxcfD29gZw78aHD94TqHHjxsrfhw4dwpo1a+Dt7Y3z588DuHdjxbt376JHjx46402dOhXTpk0r1+UhIiKiZ4PJfwx12LBhGDZsmMFhq1at0mt72G2LioIQERERUXFMfhUYERER0ZPGAERERESqwwBEREREqsMARERERKrDAERERESqwwBEREREqsMARERERKrDAERERESqwwBEREREqsMARERERKrDAERERESqwwBEREREqsMARERERKrDAERERESqwwBEREREqsMARERERKrDAERERESqwwBEREREqsMARERERKrDAERERESqwwBEREREqsMARERERKrDAERERESqwwBEREREqsMARERERKrDAERERESqwwBEREREqsMARERERKrDAERERESqwwBEREREqsMARERERKrDAERERESqwwBEREREqsMARERERKrDAERERESqwwBEREREqsMARERERKrDAERERESqwwBEREREqsMARERERKrDAERERESqwwBEREREqsMARERERKrDAERERESqwwBEREREqsMARERERKrDAERERESqY/IAtGTJEvj4+ECr1cLf3x979uwptm9aWhr69OmD2rVro0KFChg1apTBfrGxsfDz84OVlRX8/PywcePGcqqeiIiInkUmDUDr16/HqFGjMGnSJKSkpCAoKAgdOnRAamqqwf65ublwdXXFpEmT0LBhQ4N9kpOT0atXL4SHh+Po0aMIDw/Ha6+9hl9++aU8F4WIiIieIRoREVPNvGnTpmjSpAmWLl2qtPn6+qJbt26IiooqcdxWrVqhUaNGWLBggU57r169kJ2djS1btiht7du3h5OTE9auXVuqurKzs+Hg4IAbN27A3t6+9AtERERPjT59+uDKlSsAADc3N6xZs8bEFVF5M+b722R7gO7evYtDhw4hNDRUpz00NBT79u175OkmJyfrTTMsLKzEaebm5iI7O1vnQURERP9eJgtAGRkZKCgogJubm067m5sb0tPTH3m66enpRk8zKioKDg4OysPT0/OR509ERERPP5OfBK3RaHSei4heW3lPc8KECbhx44byuHjx4mPNn4iIiJ5u5qaasYuLC8zMzPT2zFy9elVvD44x3N3djZ6mlZUVrKysHnmeRERE9Gwx2R4gS0tL+Pv7IyEhQac9ISEBgYGBjzzdZs2a6U0zPj7+saZJRERE/y4m2wMEAJGRkQgPD0dAQACaNWuGZcuWITU1FUOGDAFw79DUpUuXsHr1amWcI0eOAABycnJw7do1HDlyBJaWlvDz8wMAjBw5Ei1btsTs2bPRtWtX/PDDD9i+fTv27t37xJePiIiInk4mDUC9evVCZmYmZsyYgbS0NNSrVw9xcXHw9vYGcO/Ghw/eE6hx48bK34cOHcKaNWvg7e2N8+fPAwACAwOxbt06TJ48GVOmTEGNGjWwfv16NG3a9IktFxERET3dTHofoKcV7wNERPTs432A1OeZuA8QERERkakwABEREZHqMAARERGR6jAAERERkeowABEREZHqMAARERGR6jAAERERkeowABEREZHqMAARERGR6jAAERERkeowABEREZHqMAARERGR6jAAERERkeowABEREZHqMAARERGR6jAAERERkeowABEREZHqMAARERGR6jAAERERkeowABEREZHqMAARERGR6jAAERERkeowABEREZHqMAARERGR6jAAERERkeowABEREZHqMAARERGR6jAAERERkeowABEREZHqMAARERGR6jAAERERkeowABEREZHqMAARERGR6jAAERERkeowABEREZHqMAARERGR6jAAERERkeowABEREZHqGB2ABgwYgJs3b+q137p1CwMGDCiTooiIiIjKk9EB6IsvvsDt27f12m/fvo3Vq1eXSVFERERE5cm8tB2zs7MhIhAR3Lx5E1qtVhlWUFCAuLg4VK5cuVyKJCIiIipLpQ5Ajo6O0Gg00Gg0qFWrlt5wjUaD6dOnl2lxREREROWh1AEoMTERIoI2bdogNjYWzs7OyjBLS0t4e3ujatWq5VIkERERUVkqdQAKDg4GAJw7dw6enp6oUIEXkBEREdGzqdQBqIi3tzeuX7+O/fv34+rVqygsLNQZHhERUWbFEREREZUHowPQpk2b0LdvX9y6dQt2dnbQaDTKMI1GwwBERERETz2jj2ONGTNGuRfQ9evX8ffffyuPrKwsowtYsmQJfHx8oNVq4e/vjz179pTYf9euXfD394dWq0X16tURHR2t12fBggWoXbs2KlasCE9PT4wePRp37twxujYiIiL6dzI6AF26dAkjRoyAtbX1Y898/fr1GDVqFCZNmoSUlBQEBQWhQ4cOSE1NNdj/3Llz6NixI4KCgpCSkoKJEydixIgRiI2NVfp8/fXXeO+99zB16lScOnUKMTExWL9+PSZMmPDY9RIREdG/g9EBKCwsDAcPHiyTmc+fPx8DBw7EoEGD4OvriwULFsDT0xNLly412D86OhpeXl5YsGABfH19MWjQIAwYMADz5s1T+iQnJ6N58+bo06cPqlWrhtDQUPTu3bvMaiYiIqJnX6nOAfrxxx+Vvzt16oRx48bh5MmTqF+/PiwsLHT6dunSpVQzvnv3Lg4dOoT33ntPpz00NBT79u0zOE5ycjJCQ0N12sLCwhATE4O8vDxYWFigRYsW+Oqrr7B//368+OKL+PPPPxEXF4d+/fqVqi4iIiL69ytVAOrWrZte24wZM/TaNBoNCgoKSjXjjIwMFBQUwM3NTafdzc0N6enpBsdJT0832D8/Px8ZGRmoUqUKXn/9dVy7dg0tWrSAiCA/Px9Dhw7VC1r3y83NRW5urvI8Ozu7VMtAREREz6ZSHQIrLCws1aO04ed+919FBgAiotf2sP73tyclJeHDDz/EkiVLcPjwYWzYsAGbN2/GzJkzi51mVFQUHBwclIenp6fRy0FERETPDqMvgy8rLi4uMDMz09vbc/XqVb29PEXc3d0N9jc3N0elSpUAAFOmTEF4eDgGDRoEAKhfvz5u3bqFt956C5MmTTJ4A8cJEyYgMjJSeZ6dnc0QRERE9C9mdAD65JNPDLZrNBpotVo8//zzaNmyJczMzEqcjqWlJfz9/ZGQkIBXXnlFaU9ISEDXrl0NjtOsWTNs2rRJpy0+Ph4BAQHKuUj//POPXsgxMzNTfsjVECsrK1hZWZVYLxEREf17GB2APv74Y1y7dg3//PMPnJycICK4fv06rK2tYWtri6tXr6J69epITEx86F6UyMhIhIeHIyAgAM2aNcOyZcuQmpqKIUOGALi3Z+bSpUtYvXo1AGDIkCFYtGgRIiMjMXjwYCQnJyMmJgZr165Vptm5c2fMnz8fjRs3RtOmTXH27FlMmTIFXbp0eWgoIyIiInUw+jL4WbNm4YUXXsCZM2eQmZmJrKwsnD59Gk2bNsXChQuRmpoKd3d3jB49+qHT6tWrFxYsWIAZM2agUaNG2L17N+Li4uDt7Q0ASEtL07knkI+PD+Li4pCUlIRGjRph5syZ+OSTT9C9e3elz+TJkzFmzBhMnjwZfn5+GDhwIMLCwvDZZ58Zu6hERET0L6WR4o4LFaNGjRqIjY1Fo0aNdNpTUlLQvXt3/Pnnn9i3bx+6d++OtLS0sqz1icnOzoaDgwNu3LgBe3t7U5dDRESPoE+fPrhy5QqAe1cMr1mzxsQVUXkz5vvb6D1AaWlpyM/P12vPz89XTlCuWrUqbt68aeykiYiIiJ4IowNQ69at8fbbbyMlJUVpS0lJwdChQ9GmTRsAwK+//gofH5+yq5KIiIioDBkdgGJiYuDs7Ax/f3/l6qmAgAA4OzsjJiYGAGBra4uPPvqozIslIiIiKgtGXwXm7u6OhIQE/Pbbbzh9+jREBHXq1EHt2rWVPq1bty7TIomIiIjK0iPfCLFOnTqoU6dOWdZCRERE9ESUKgBFRkZi5syZsLGx0bljsiHz588vk8KIiIiIykupAlBKSgry8vKUv4tT0m94ERERET0tShWAEhMTDf5NRERE9Cwy+iqwImfPnsW2bdtw+/ZtACj2d7aIiIiInjZGnwSdmZmJ1157DYmJidBoNDhz5gyqV6+OQYMGwdHRkZe/ExEBSJ1R39QlqF7+9UoAzP7v78vcJk8Br/d/NXUJCqP3AI0ePRoWFhZITU2FtbW10t6rVy9s3bq1TIsjIiIiKg9G7wGKj4/Htm3b8Nxzz+m016xZExcuXCizwoiIiIjKi9F7gG7duqWz56dIRkYGrKysyqQoIiIiovJkdABq2bIlVq9erTzXaDQoLCzE3LlzeQdoIiIieiYYfQhs7ty5aNWqFQ4ePIi7d+/i3XffxYkTJ5CVlYWff/65PGokIiIiKlNG7wHy8/PD0aNH8cILL6Bdu3a4desWXn31VaSkpKBGjRrlUSMRERFRmSr1HqAWLVqgTZs2aNWqFQIDAzFjxozyrIuIiIio3JR6D1Dt2rWxZs0ahISEwMnJCa1atcLMmTOxd+9e5WcyiIiIiJ4FpQ5AMTExOHv2LFJTU/HZZ5+hRo0aWLVqFVq2bAlHR0e0a9cOUVFR5VkrERERUZkw+hyg5557DhEREYiJicEff/yBCxcuYPTo0di/fz8mT55cHjUSERERlSmjrwIDgD/++ANJSUnK4/r162jWrBmCg4PLuj4iIiKiMlfqALRy5UokJiYiKSkJN27cQPPmzREcHIzhw4cjICAA5uaPlKWIiIiInrhSp5aBAwfCy8sLkyZNwoABA2BhYVGedRERERGVm1KfA7R48WK89NJLmDZtGipXrozOnTvjo48+wsGDByEi5VkjERERUZkqdQAaOnQo1q1bh7S0NPz888/o2LEj9u/fj5dffhlOTk7o1KkT5s2bV561EhEREZUJo68CA+7dDXro0KFYv349Dh8+jHfeeQd79+7F+PHjy7o+IiIiojJn9JnLV65c0bkC7PTp07C0tETTpk35Y6hERET0TCh1ABo+fDgSExPx+++/w9zcHC+88AJ69OiB1q1bIzAwEFqttjzrJCIiIiozpQ5Ahw8fRrdu3dC6dWs0b94c1tbW5VkXERERUbkpdQBKTk4uzzqIiIiInphHOgmaiIiI6FnGAERERESqwwBEREREqsMARERERKrzyL9gevfuXVy9ehWFhYU67V5eXo9dFBEREVF5MjoAnTlzBgMGDMC+fft02kUEGo0GBQUFZVYcERERUXkwOgD1798f5ubm2Lx5M6pUqQKNRlMedRERERGVG6MD0JEjR3Do0CHUqVOnPOohIiIiKndGnwTt5+eHjIyM8qiFiIiI6IkoVQDKzs5WHrNnz8a7776LpKQkZGZm6gzLzs4u73qJiIiIHlupDoE5OjrqnOsjImjbtq1OH54ETURERM+KUgWgxMTE8q6DiIiI6IkpVQAKDg5W/k5NTYWnp6fe1V8igosXL5ZtdURERETlwOiToH18fHDt2jW99qysLPj4+JRJUURERETlyegAVHSuz4NycnKg1WrLpCgiIiKi8lTq+wBFRkYCADQaDaZMmQJra2tlWEFBAX755Rc0atSozAskIiIiKmulDkApKSkA7u0B+vXXX2FpaakMs7S0RMOGDTF27Niyr5CIiIiojJX6EFhiYiISExMRERGBrVu3Ks8TExOxbds2fPbZZ6hZs6bRBSxZsgQ+Pj7QarXw9/fHnj17Suy/a9cu+Pv7Q6vVonr16oiOjtbrc/36dQwfPhxVqlSBVquFr68v4uLijK6NiIiI/p2MOgcoPz8fX331FS5cuFAmM1+/fj1GjRqFSZMmISUlBUFBQejQoQNSU1MN9j937hw6duyIoKAgpKSkYOLEiRgxYgRiY2OVPnfv3kW7du1w/vx5fPfdd/j999/x+eefw8PDo0xqJiIiomefUb8FZm5uDm9v7zK72eH8+fMxcOBADBo0CACwYMECbNu2DUuXLkVUVJRe/+joaHh5eWHBggUAAF9fXxw8eBDz5s1D9+7dAQArVqxAVlYW9u3bBwsLCwCAt7d3mdRLRERE/w5GXwU2efJkTJgwAVlZWY8147t37+LQoUMIDQ3VaQ8NDcW+ffsMjpOcnKzXPywsDAcPHkReXh4A4Mcff0SzZs0wfPhwuLm5oV69epg1a1aJoS03N5c/6UFERKQiRv8a/CeffIKzZ8+iatWq8Pb2ho2Njc7ww4cPl2o6GRkZKCgogJubm067m5sb0tPTDY6Tnp5usH9+fj4yMjJQpUoV/Pnnn9i5cyf69u2LuLg4nDlzBsOHD0d+fj7ef/99g9ONiorC9OnTS1U3ERERPfuMDkDdunUr0wIM3VHa0H2GSup/f3thYSEqV66MZcuWwczMDP7+/rh8+TLmzp1bbACaMGGCcpk/cO/HXz09PR9peYiIiOjpZ3QAmjp1apnM2MXFBWZmZnp7e65evaq3l6eIu7u7wf7m5uaoVKkSAKBKlSqwsLCAmZmZ0sfX1xfp6em4e/euzuX7RaysrGBlZfW4i0RERETPCKPPASorlpaW8Pf3R0JCgk57QkICAgMDDY7TrFkzvf7x8fEICAhQTnhu3rw5zp49i8LCQqXP6dOnUaVKFYPhh4iIiNSnVAHI2dkZGRkZAAAnJyc4OzsX+zBGZGQkli9fjhUrVuDUqVMYPXo0UlNTMWTIEAD3Dk1FREQo/YcMGYILFy4gMjISp06dwooVKxATE6NzA8ahQ4ciMzMTI0eOxOnTp/HTTz9h1qxZGD58uFG1ERER0b9XqQ6Bffzxx7CzswMA5RL0stCrVy9kZmZixowZSEtLQ7169RAXF6dctp6WlqZzTyAfHx/ExcVh9OjRWLx4MapWrYpPPvlEuQQeADw9PREfH4/Ro0ejQYMG8PDwwMiRIzF+/Pgyq5uIiIiebRopOouYFNnZ2XBwcMCNGzdgb29v6nKI6BmUOqO+qUtQvbH/q4TM3Hvng1ayKsC8lzJNXBF5vf9ruU7fmO9vo0+Cvp+IIDExEbdv30ZgYCCcnJweZ3JERERET0SpT4K+fv06+vXrh/r162Pw4MHIzs5GUFAQQkJC0LlzZ9SpUwfHjh0rz1qJiIiIykSpA9DYsWORnJyMXr164ddff0X79u1RUFCA5ORk/PLLL/Dz88OkSZPKs1YiIiKiMlHqQ2BbtmzBmjVrEBwcjDfffBOenp7YuXMnmjZtCgCYPXs2unTpUm6FEhEREZWVUu8BunLlCmrVqgUA8PDwgFar1blbspeXF65du1b2FRIRERGVsVIHoMLCQp27K5uZmen8LEVJP19BRERE9DQx6iqw5cuXw9bWFgCQn5+PVatWwcXFBQBw8+bNsq+OiIiIqByUOgB5eXnh888/V567u7vjyy+/1OtDRERE9LQrdQA6f/58OZZBRERE9OSY7MdQiYiIiEzlse4ETfSsGzlypHL1oqurKxYuXGjiioiI6ElgACJVu3btGq5cuWLqMoiI6AnjITAiIiJSHQYgIiIiUh2jA1Dfvn2xbNkynD59ujzqISIiIip3RgcgW1tbzJ8/H3Xq1EHVqlXRu3dvREdH47fffiuP+oiIiIjKnNEB6LPPPsNvv/2Gy5cvY/78+XBwcMDChQtRt25dVKlSpTxqJCIiIipTj3wOkJ2dHZycnODk5ARHR0eYm5vD3d29LGsjIiIiKhdGB6Dx48fjpZdegouLCyZPnoy7d+9iwoQJuHLlClJSUsqjRiIiIqIyZfR9gObOnQtXV1dMnToVXbt2ha+vb3nURURERFRujA5AKSkp2LVrF5KSkvDRRx/BzMwMwcHBaNWqFVq1asVARERERE89owNQw4YN0bBhQ4wYMQIAcPToUSxYsAAjRoxAYWEhCgoKyrxIIiIiorL0SD+FkZKSgqSkJCQlJWHPnj3Izs5Go0aN0Lp167Kuj4iIiKjMGR2AnJyckJOTg4YNG6JVq1YYPHgwWrZsCXt7+/Koj4iIiKjMGR2AvvzySwYeIiIieqYZHYBefvll5e+//voLGo0GHh4eZVoUERERUXky+j5AhYWFmDFjBhwcHODt7Q0vLy84Ojpi5syZKCwsLI8aiYiIiMqU0XuAJk2ahJiYGPz3v/9F8+bNISL4+eefMW3aNNy5cwcffvhhedRJREREVGaMDkBffPEFli9fji5duihtDRs2hIeHB4YNG8YARERERE89ow+BZWVloU6dOnrtderUQVZWVpkURURERFSejA5ADRs2xKJFi/TaFy1ahIYNG5ZJUURERETlyehDYHPmzEGnTp2wfft2NGvWDBqNBvv27cPFixcRFxdXHjUSERERlSmj9wAFBwfj9OnTeOWVV3D9+nVkZWXh1Vdfxe+//46goKDyqJGIiIioTD3ST2FUrVpV72TnixcvYsCAAVixYkWZFEZERERUXozeA1ScrKwsfPHFF2U1OSIiIqJyU2YBiIiIiOhZwQBEREREqsMARERERKpT6pOgX3311RKHX79+/XFrISIiInoiSh2AHBwcHjo8IiLisQsiIiIiKm+lDkArV64szzqIiIiInphHug8QlQ3/catNXYLq2f+do5wIl/Z3DrfJU+DQXO5JJqLyx5OgiYiISHUYgIiIiEh1GICIiIhIdRiAiIiISHVMHoCWLFkCHx8faLVa+Pv7Y8+ePSX237VrF/z9/aHValG9enVER0cX23fdunXQaDTo1q1bGVdNREREzzKTBqD169dj1KhRmDRpElJSUhAUFIQOHTogNTXVYP9z586hY8eOCAoKQkpKCiZOnIgRI0YgNjZWr++FCxcwduxYBAUFlfdiEBER0TPGpAFo/vz5GDhwIAYNGgRfX18sWLAAnp6eWLp0qcH+0dHR8PLywoIFC+Dr64tBgwZhwIABmDdvnk6/goIC9O3bF9OnT0f16tWfxKIQERHRM8RkAeju3bs4dOgQQkNDddpDQ0Oxb98+g+MkJyfr9Q8LC8PBgweRl5entM2YMQOurq4YOHBg2RdOREREzzyT3QgxIyMDBQUFcHNz02l3c3NDenq6wXHS09MN9s/Pz0dGRgaqVKmCn3/+GTExMThy5Eipa8nNzUVubq7yPDs7u/QLQkRERM8ck58ErdFodJ6LiF7bw/oXtd+8eRNvvPEGPv/8c7i4uJS6hqioKDg4OCgPT09PI5aAiIiInjUm2wPk4uICMzMzvb09V69e1dvLU8Td3d1gf3Nzc1SqVAknTpzA+fPn0blzZ2V4YWEhAMDc3By///47atSooTfdCRMmIDIyUnmenZ3NEERERPQvZrIAZGlpCX9/fyQkJOCVV15R2hMSEtC1a1eD4zRr1gybNm3SaYuPj0dAQAAsLCxQp04d/PrrrzrDJ0+ejJs3b2LhwoXFhhorKytYWVk95hIRERHRs8KkP4YaGRmJ8PBwBAQEoFmzZli2bBlSU1MxZMgQAPf2zFy6dAmrV9/7gcohQ4Zg0aJFiIyMxODBg5GcnIyYmBisXbsWAKDValGvXj2deTg6OgKAXjsRERGpl0kDUK9evZCZmYkZM2YgLS0N9erVQ1xcHLy9vQEAaWlpOvcE8vHxQVxcHEaPHo3FixejatWq+OSTT9C9e3dTLQIRERE9g0wagABg2LBhGDZsmMFhq1at0msLDg7G4cOHSz19Q9MgIiIidTP5VWBERERETxoDEBEREakOAxARERGpDgMQERERqQ4DEBEREakOAxARERGpDgMQERERqQ4DEBEREakOAxARERGpDgMQERERqQ4DEBEREakOAxARERGpjsl/DJXIlAotbAz+TUTPPmerAoN/EwEMQKRyObU7mLoEIionExtfN3UJ9BTjITAiIiJSHQYgIiIiUh0GICIiIlIdBiAiIiJSHQYgIiIiUh0GICIiIlIdBiAiIiJSHQYgIiIiUh0GICIiIlIdBiAiIiJSHQYgIiIiUh0GICIiIlIdBiAiIiJSHQYgIiIiUh0GICIiIlIdBiAiIiJSHQYgIiIiUh0GICIiIlIdBiAiIiJSHQYgIiIiUh0GICIiIlIdBiAiIiJSHQYgIiIiUh0GICIiIlIdBiAiIiJSHQYgIiIiUh0GICIiIlIdBiAiIiJSHQYgIiIiUh0GICIiIlIdBiAiIiJSHQYgIiIiUh0GICIiIlIdkwegJUuWwMfHB1qtFv7+/tizZ0+J/Xft2gV/f39otVpUr14d0dHROsM///xzBAUFwcnJCU5OTggJCcH+/fvLcxGIiIjoGWPSALR+/XqMGjUKkyZNQkpKCoKCgtChQwekpqYa7H/u3Dl07NgRQUFBSElJwcSJEzFixAjExsYqfZKSktC7d28kJiYiOTkZXl5eCA0NxaVLl57UYhEREdFTTiMiYqqZN23aFE2aNMHSpUuVNl9fX3Tr1g1RUVF6/cePH48ff/wRp06dUtqGDBmCo0ePIjk52eA8CgoK4OTkhEWLFiEiIqJUdWVnZ8PBwQE3btyAvb29kUtVev7jVpfbtImeVYfmlu59+rRLnVHf1CUQPXW83v+1XKdvzPe3yfYA3b17F4cOHUJoaKhOe2hoKPbt22dwnOTkZL3+YWFhOHjwIPLy8gyO888//yAvLw/Ozs7F1pKbm4vs7GydBxEREf17mSwAZWRkoKCgAG5ubjrtbm5uSE9PNzhOenq6wf75+fnIyMgwOM57770HDw8PhISEFFtLVFQUHBwclIenp6eRS0NERETPEpOfBK3RaHSei4he28P6G2oHgDlz5mDt2rXYsGEDtFptsdOcMGECbty4oTwuXrxozCIQERHRM8bcVDN2cXGBmZmZ3t6eq1ev6u3lKeLu7m6wv7m5OSpVqqTTPm/ePMyaNQvbt29HgwYNSqzFysoKVlZWj7AURERE9Cwy2R4gS0tL+Pv7IyEhQac9ISEBgYGBBsdp1qyZXv/4+HgEBATAwsJCaZs7dy5mzpyJrVu3IiAgoOyLJyIiomeaSQ+BRUZGYvny5VixYgVOnTqF0aNHIzU1FUOGDAFw79DU/VduDRkyBBcuXEBkZCROnTqFFStWICYmBmPHjlX6zJkzB5MnT8aKFStQrVo1pKenIz09HTk5OU98+YiIiOjpZLJDYADQq1cvZGZmYsaMGUhLS0O9evUQFxcHb29vAEBaWprOPYF8fHwQFxeH0aNHY/HixahatSo++eQTdO/eXemzZMkS3L17Fz169NCZ19SpUzFt2rQnslxERET0dDPpfYCeVrwPEJHp8D5ARP9evA8QERERkQkxABEREZHqMAARERGR6jAAERERkeowABEREZHqMAARERGR6jAAERERkeowABEREZHqMAARERGR6jAAERERkeowABEREZHqMAARERGR6jAAERERkeowABEREZHqMAARERGR6jAAERERkeowABEREZHqMAARERGR6jAAERERkeowABEREZHqMAARERGR6jAAERERkeowABEREZHqMAARERGR6jAAERERkeowABEREZHqMAARERGR6jAAERERkeowABEREZHqMAARERGR6jAAERERkeowABEREZHqMAARERGR6jAAERERkeowABEREZHqMAARERGR6jAAERERkeowABEREZHqMAARERGR6jAAERERkeowABEREZHqMAARERGR6jAAERERkeowABEREZHqMAARERGR6jAAERERkeqYPAAtWbIEPj4+0Gq18Pf3x549e0rsv2vXLvj7+0Or1aJ69eqIjo7W6xMbGws/Pz9YWVnBz88PGzduLK/yiYiI6Blk0gC0fv16jBo1CpMmTUJKSgqCgoLQoUMHpKamGux/7tw5dOzYEUFBQUhJScHEiRMxYsQIxMbGKn2Sk5PRq1cvhIeH4+jRowgPD8drr72GX3755UktFhERET3lNCIippp506ZN0aRJEyxdulRp8/X1Rbdu3RAVFaXXf/z48fjxxx9x6tQppW3IkCE4evQokpOTAQC9evVCdnY2tmzZovRp3749nJycsHbt2lLVlZ2dDQcHB9y4cQP29vaPungP5T9udblNm+hZdWhuhKlLKBOpM+qbugSip47X+7+W6/SN+f422R6gu3fv4tChQwgNDdVpDw0Nxb59+wyOk5ycrNc/LCwMBw8eRF5eXol9ipsmERERqY+5qWackZGBgoICuLm56bS7ubkhPT3d4Djp6ekG++fn5yMjIwNVqlQptk9x0wSA3Nxc5ObmKs9v3LgB4F6SLE8FubfLdfpEz6Lyft89KTfvFJi6BKKnTnm/v4umX5qDWyYLQEU0Go3OcxHRa3tY/wfbjZ1mVFQUpk+frtfu6elZfOFEVC4cPh1i6hKIqLxEOTyR2dy8eRMODiXPy2QByMXFBWZmZnp7Zq5evaq3B6eIu7u7wf7m5uaoVKlSiX2KmyYATJgwAZGRkcrzwsJCZGVloVKlSiUGJ/p3yM7OhqenJy5evFiu53wR0ZPH97e6iAhu3ryJqlWrPrSvyQKQpaUl/P39kZCQgFdeeUVpT0hIQNeuXQ2O06xZM2zatEmnLT4+HgEBAbCwsFD6JCQk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",
      "text/plain": [
       "<Figure size 640x480 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "# placeholder for 'smoker' feature\n",
    "df_full['smoker'] = 0\n",
    "\n",
    "\n",
    "# replacing values based on a condition\n",
    "for index, val in df_full.iterrows():\n",
    "    \n",
    "    # basing this on cigs \n",
    "    if df_full.loc[index, 'cigs'] > 0:\n",
    "        df_full.loc [index, 'smoker'] = 1\n",
    "\n",
    "\n",
    "# checking results\n",
    "print(df_full['smoker'].value_counts())\n",
    "\n",
    "# Create a bar plot\n",
    "sns.barplot(x='smoker', y='low_bwght', data=df_full)\n",
    "\n",
    "# Add labels and title\n",
    "plt.xlabel('Smoker (0: Non-smoker, 1: Smoker)')\n",
    "plt.ylabel('Low Birth Weight')\n",
    "plt.title('Correlation between Smoker Status and Low Birth Weight')\n",
    "\n",
    "# Display the plot\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "**(3) Prenatal Visit Frequency feature**\n",
    "\n",
    "To help my analysis, I create a new feature (made of booleans variables) categorizing prenatal visit frequency into two levels, inspired by the National Institute of Healht (NIH) guidelines and the findings from Buekens' study. This study indeed identified >10 visits as indicative of high prenatal care engagement in the U.S. \n",
    "I therefore divided the npvis data as: \n",
    "\n",
    "- Under 10 as \"npvis_under_10\" for lower prenatal care.\n",
    "- Between 10 to 12 visit, as 'npvis_10_to_12' \n",
    "- Above 13 visits as 'npvis_13_and_above' for higher number prenatal visit\n",
    "\n",
    "\n",
    "NOTE: The reason for prenatal visit and the =frequency likely depends on features that are not present in our dataset. For instance, if the mother has underlying health issues, hence putting the pregnancy at a higher risk, the patient might need to have more visits. "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 37,
   "metadata": {
    "code_folding": [],
    "deletable": false,
    "editable": false
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>npvis_under_10</th>\n",
       "      <th>npvis_10_to_12</th>\n",
       "      <th>npvis_13_and_above</th>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>obs_id</th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>id_0001</th>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "         npvis_under_10  npvis_10_to_12  npvis_13_and_above\n",
       "obs_id                                                     \n",
       "id_0001               1               0                   0"
      ]
     },
     "execution_count": 37,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# Creating categorical features based on npvis, and converting to Boolean variables\n",
    "df_full['npvis_under_10'] = (df_full['npvis'] < 10).astype(int)\n",
    "df_full['npvis_10_to_12'] = ((df_full['npvis'] >= 10) & (df_full['npvis'] <= 12)).astype(int)\n",
    "df_full['npvis_13_and_above'] = (df_full['npvis'] > 12).astype(int)\n",
    "\n",
    "# Check the DataFrame to see the new columns were created\n",
    "df_full[['npvis_under_10', 'npvis_10_to_12', 'npvis_13_and_above']].head(n=1)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "**(4) Prenatal Care Engagement Score:** \n",
    "\n",
    "I also created the \"prenatal_care_engagement\" feature by summing the total prenatal visits ('npvis') and the month prenatal care began ('monpre') to try and determine if proactive prenatal care had an impact on babies' weight. A higher score suggests diligent parental efforts to ensure a healthy start for their babies. This feature/metric, therefore, will help quantify prenatal care's contribution to newborn health."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 38,
   "metadata": {
    "code_folding": [],
    "deletable": false,
    "editable": false
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "count    1832.000000\n",
       "mean       13.742233\n",
       "std         3.448090\n",
       "min         0.000000\n",
       "25%        12.000000\n",
       "50%        13.620000\n",
       "75%        15.000000\n",
       "max        43.000000\n",
       "Name: prenatal_care_engagement, dtype: float64"
      ]
     },
     "execution_count": 38,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# Calculate the prenatal care index\n",
    "df_full['prenatal_care_engagement'] = (df_full['npvis'] + (df_full['monpre']) ).round(3)\n",
    "\n",
    "\n",
    "# Checking Results\n",
    "df_full['prenatal_care_engagement'].describe()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "**(5) Parent's (Fage & Mage) Age Range:**\n",
    "\n",
    "I created new features that group parents (female and male) into age group category based upon the age range within their own feature to try and see if new correlation with birth weight would arise."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 39,
   "metadata": {
    "code_folding": [],
    "deletable": false,
    "editable": false
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Mother's age range: 16 to 44\n",
      "Father's age range: 18.0 to 64.0\n"
     ]
    }
   ],
   "source": [
    "# (1) Explore the distribution of 'mage' and 'fage'\n",
    "min_mage, max_mage = df_full['mage'].min(), df_full['mage'].max()\n",
    "min_fage, max_fage = df_full['fage'].min(), df_full['fage'].max()\n",
    "\n",
    "print(f\"Mother's age range: {min_mage} to {max_mage}\")\n",
    "print(f\"Father's age range: {min_fage} to {max_fage}\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 40,
   "metadata": {
    "code_folding": [],
    "deletable": false,
    "editable": false,
    "scrolled": false
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "fage_16_to_30    759\n",
      "fage_31_to_40    945\n",
      "fage_41_to_44     84\n",
      "mage_18_to_25    347\n",
      "mage_26_to_30    733\n",
      "mage_31_to_44    746\n",
      "mage_45_to_64      0\n",
      "dtype: int64\n"
     ]
    }
   ],
   "source": [
    "# (2) Creating categorical features based on fage, and converting to Boolean variables\n",
    "\n",
    "# Based on range in the dataset for fage I created 3 category\n",
    "df_full['fage_16_to_30'] = ((df_full['fage'] >= 16) & (df_full['fage'] <= 30)).astype(int)\n",
    "df_full['fage_31_to_40'] = ((df_full['fage'] >= 31) & (df_full['fage'] <= 40)).astype(int)\n",
    "df_full['fage_41_to_44'] = ((df_full['fage'] >= 41) & (df_full['fage'] <= 44)).astype(int)\n",
    "\n",
    "# Similar process but created 4 sice the age range for male was bigger\n",
    "df_full['mage_18_to_25'] = ((df_full['mage'] >= 18) & (df_full['mage'] <= 25)).astype(int)\n",
    "df_full['mage_26_to_30'] = ((df_full['mage'] >= 26) & (df_full['mage'] <= 30)).astype(int)\n",
    "df_full['mage_31_to_44'] = ((df_full['mage'] >= 31) & (df_full['mage'] <= 44)).astype(int)\n",
    "df_full['mage_45_to_64'] = ((df_full['mage'] >= 45) & (df_full['mage'] <= 64)).astype(int)\n",
    "\n",
    "# Sum the DataFrame to see how many entries fall into each category\n",
    "age_category_counts = df_full[['fage_16_to_30', 'fage_31_to_40', 'fage_41_to_44', \n",
    "                               'mage_18_to_25', 'mage_26_to_30', 'mage_31_to_44', 'mage_45_to_64']].sum()\n",
    "\n",
    "# Check the DataFrame to see the new columns were created\n",
    "print(age_category_counts)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "**(6) Cigs a Day smoke by mother and Male feature**\n",
    "\n",
    "Assuming that some smoking mother probably would have a partner that smoke as well, which would mean the baby would be affected also by second hand smoke"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 41,
   "metadata": {
    "code_folding": [],
    "deletable": false,
    "editable": false
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>cigs_mage_interaction</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>count</th>\n",
       "      <td>1832.000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>mean</th>\n",
       "      <td>29.179585</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>std</th>\n",
       "      <td>120.818639</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>min</th>\n",
       "      <td>0.000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>25%</th>\n",
       "      <td>0.000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>50%</th>\n",
       "      <td>0.000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>75%</th>\n",
       "      <td>0.000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>max</th>\n",
       "      <td>1360.000000</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "       cigs_mage_interaction\n",
       "count            1832.000000\n",
       "mean               29.179585\n",
       "std               120.818639\n",
       "min                 0.000000\n",
       "25%                 0.000000\n",
       "50%                 0.000000\n",
       "75%                 0.000000\n",
       "max              1360.000000"
      ]
     },
     "execution_count": 41,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# Interaction features\n",
    "df_full['cigs_mage_interaction'] = df_full['cigs'] * df_full['mage']\n",
    "\n",
    "# Check the DataFrame to see the new columns were created\n",
    "df_full[['cigs_mage_interaction']].describe()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "**(7) Age Difference feature**\n",
    "\n",
    "Created an age difference feature between male and female. "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 42,
   "metadata": {},
   "outputs": [],
   "source": [
    "# Age difference feature between male and female\n",
    "\n",
    "df_full['age_diff'] = (df_full['mage'] - df_full['fage']).abs()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Dealing with the imbalance data distribution:\n",
    "\n",
    "As we can see when creating the 'low_bwght' feature, there are only 84 babies with low birth weight, while there are 1748 babies with an average birth weight. This significant gap can cause problems when we try to understand our data and might lead to wrong conclusions. For example, if we make a simple rule that guesses all babies don't have low birth weight, this rule would still be right about 95% of the time because of how our data is set up. To fix this problem, I will use a new rule and say that low birth weight is now considered below 3375 grams instead, hoping this will help the data be more significant. "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 43,
   "metadata": {
    "deletable": false,
    "editable": false,
    "scrolled": true
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\n",
      "\n",
      "Low Birthweight Data Ratio\n",
      "--------------------------------------------\n",
      "low_bwght\n",
      "0.0    0.54\n",
      "1.0    0.46\n",
      "Name: proportion, dtype: float64\n",
      "\n",
      "\n"
     ]
    }
   ],
   "source": [
    "# Setting a new threshold value of 3500 to help with the imbalance\n",
    "# Then looping to find low_bwght\n",
    "for index, val in df_full.iterrows():\n",
    "    \n",
    "    \n",
    "    if df_full.loc[ index , 'bwght'] <= 3375:\n",
    "        df_full.loc[index, 'low_bwght'] = 1\n",
    "    elif df_full.loc[ index , 'bwght'] > 3375:\n",
    "        df_full.loc[index, 'low_bwght'] = 0\n",
    "    else:\n",
    "        df_full.loc[index, 'low_bwght'] = np.nan\n",
    "        \n",
    "\n",
    "#printing the ratio\n",
    "print(f\"\"\"\n",
    "\n",
    "Low Birthweight Data Ratio\n",
    "--------------------------------------------\n",
    "{df_full['low_bwght'].value_counts(normalize = True).round(decimals = 2)}\n",
    "\n",
    "\"\"\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 44,
   "metadata": {
    "deletable": false,
    "editable": false
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>bwght</th>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>obs_id</th>\n",
       "      <th></th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>id_0860</th>\n",
       "      <td>3380.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>id_0861</th>\n",
       "      <td>3380.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>id_0862</th>\n",
       "      <td>3380.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>id_0863</th>\n",
       "      <td>3380.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>id_0865</th>\n",
       "      <td>3380.0</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "          bwght\n",
       "obs_id         \n",
       "id_0860  3380.0\n",
       "id_0861  3380.0\n",
       "id_0862  3380.0\n",
       "id_0863  3380.0\n",
       "id_0865  3380.0"
      ]
     },
     "execution_count": 44,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "(df_full[df_full['low_bwght'] == 0][['bwght']]).head(n=5)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 45,
   "metadata": {
    "deletable": false,
    "editable": false
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "882"
      ]
     },
     "execution_count": 45,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "(df_full['low_bwght'] == 0).sum()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 46,
   "metadata": {
    "deletable": false,
    "editable": false
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>mage</th>\n",
       "      <th>meduc</th>\n",
       "      <th>monpre</th>\n",
       "      <th>npvis</th>\n",
       "      <th>fage</th>\n",
       "      <th>feduc</th>\n",
       "      <th>cigs</th>\n",
       "      <th>male</th>\n",
       "      <th>mwhte</th>\n",
       "      <th>mblck</th>\n",
       "      <th>moth</th>\n",
       "      <th>fwhte</th>\n",
       "      <th>fblck</th>\n",
       "      <th>foth</th>\n",
       "      <th>bwght</th>\n",
       "      <th>set</th>\n",
       "      <th>low_bwght</th>\n",
       "      <th>smoker</th>\n",
       "      <th>npvis_under_10</th>\n",
       "      <th>npvis_10_to_12</th>\n",
       "      <th>npvis_13_and_above</th>\n",
       "      <th>prenatal_care_engagement</th>\n",
       "      <th>fage_16_to_30</th>\n",
       "      <th>fage_31_to_40</th>\n",
       "      <th>fage_41_to_44</th>\n",
       "      <th>mage_18_to_25</th>\n",
       "      <th>mage_26_to_30</th>\n",
       "      <th>mage_31_to_44</th>\n",
       "      <th>mage_45_to_64</th>\n",
       "      <th>cigs_mage_interaction</th>\n",
       "      <th>age_diff</th>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>obs_id</th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>id_0004</th>\n",
       "      <td>29</td>\n",
       "      <td>12.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>6.000000</td>\n",
       "      <td>31.0</td>\n",
       "      <td>16.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>NaN</td>\n",
       "      <td>Kaggle</td>\n",
       "      <td>NaN</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>7.00</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>2.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>id_0063</th>\n",
       "      <td>33</td>\n",
       "      <td>16.0</td>\n",
       "      <td>2.0</td>\n",
       "      <td>12.000000</td>\n",
       "      <td>34.0</td>\n",
       "      <td>16.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>NaN</td>\n",
       "      <td>Kaggle</td>\n",
       "      <td>NaN</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>14.00</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>1.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>id_0064</th>\n",
       "      <td>25</td>\n",
       "      <td>12.0</td>\n",
       "      <td>3.0</td>\n",
       "      <td>12.000000</td>\n",
       "      <td>29.0</td>\n",
       "      <td>12.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>NaN</td>\n",
       "      <td>Kaggle</td>\n",
       "      <td>NaN</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>15.00</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>4.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>id_0243</th>\n",
       "      <td>26</td>\n",
       "      <td>13.0</td>\n",
       "      <td>3.0</td>\n",
       "      <td>15.000000</td>\n",
       "      <td>25.0</td>\n",
       "      <td>12.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>NaN</td>\n",
       "      <td>Kaggle</td>\n",
       "      <td>NaN</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>18.00</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>1.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>id_0344</th>\n",
       "      <td>29</td>\n",
       "      <td>12.0</td>\n",
       "      <td>2.0</td>\n",
       "      <td>11.620181</td>\n",
       "      <td>31.0</td>\n",
       "      <td>14.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>NaN</td>\n",
       "      <td>Kaggle</td>\n",
       "      <td>NaN</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>13.62</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>2.0</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "         mage  meduc  monpre      npvis  fage  feduc  cigs  male  mwhte  mblck  moth  fwhte  fblck  foth  bwght     set  low_bwght  smoker  npvis_under_10  npvis_10_to_12  npvis_13_and_above  prenatal_care_engagement  fage_16_to_30  fage_31_to_40  fage_41_to_44  mage_18_to_25  mage_26_to_30  mage_31_to_44  mage_45_to_64  cigs_mage_interaction  age_diff\n",
       "obs_id                                                                                                                                                                                                                                                                                                                                                            \n",
       "id_0004    29   12.0     1.0   6.000000  31.0   16.0   0.0     1      1      0     0      1      0     0    NaN  Kaggle        NaN       0               1               0                   0                      7.00              0              1              0              0              1              0              0                    0.0       2.0\n",
       "id_0063    33   16.0     2.0  12.000000  34.0   16.0   0.0     0      0      0     1      0      0     1    NaN  Kaggle        NaN       0               0               1                   0                     14.00              0              1              0              0              0              1              0                    0.0       1.0\n",
       "id_0064    25   12.0     3.0  12.000000  29.0   12.0   0.0     1      1      0     0      1      0     0    NaN  Kaggle        NaN       0               0               1                   0                     15.00              1              0              0              1              0              0              0                    0.0       4.0\n",
       "id_0243    26   13.0     3.0  15.000000  25.0   12.0   0.0     0      1      0     0      1      0     0    NaN  Kaggle        NaN       0               0               0                   1                     18.00              1              0              0              0              1              0              0                    0.0       1.0\n",
       "id_0344    29   12.0     2.0  11.620181  31.0   14.0   0.0     0      1      0     0      1      0     0    NaN  Kaggle        NaN       0               0               1                   0                     13.62              0              1              0              0              1              0              0                    0.0       2.0"
      ]
     },
     "execution_count": 46,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df_full.loc[df_test.index].head()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "<br><h2> PART V: Pearson Correlation & Phi Coefficient : </h2>"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "**Now that I created the new features and 'rebalanced' the data**\n",
    "\n",
    "I will check the correlation between both birth weight and low birth weight and all other features to try and answer Question 1  and well as see if I can gather any new insights."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 47,
   "metadata": {
    "deletable": false,
    "editable": false
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\n",
      "Pearson Correlations (Continuous Variables)\n",
      "-------------------------------------------\n",
      "bwght                       1.0000\n",
      "prenatal_care_engagement    0.1051\n",
      "npvis                       0.1010\n",
      "fage                        0.0699\n",
      "mage                        0.0341\n",
      "age_diff                    0.0187\n",
      "cigs                       -0.0817\n",
      "Name: bwght, dtype: float64\n",
      "\n",
      "\n",
      "Pearson Correlations (Categorical Variables)\n",
      "-------------------------------------------\n",
      "bwght                       1.0000\n",
      "prenatal_care_engagement    0.1051\n",
      "npvis_13_and_above          0.0753\n",
      "male                        0.0663\n",
      "fwhte                       0.0657\n",
      "mwhte                       0.0546\n",
      "mage_26_to_30               0.0460\n",
      "fage_31_to_40               0.0279\n",
      "fage_41_to_44               0.0229\n",
      "npvis_10_to_12              0.0185\n",
      "mage_31_to_44               0.0090\n",
      "fblck                      -0.0202\n",
      "mblck                      -0.0222\n",
      "fage_16_to_30              -0.0380\n",
      "moth                       -0.0535\n",
      "mage_18_to_25              -0.0666\n",
      "foth                       -0.0714\n",
      "npvis_under_10             -0.1006\n",
      "smoker                     -0.1008\n",
      "mage_45_to_64                  NaN\n",
      "Name: bwght, dtype: float64\n",
      "\n",
      "\n",
      "Phi Coefficients (Categorical Variables)\n",
      "----------------------------------------\n",
      "bwght                       1.0000\n",
      "prenatal_care_engagement    0.3659\n",
      "npvis_under_10              0.1854\n",
      "smoker                      0.1389\n",
      "npvis_10_to_12              0.1166\n",
      "fwhte                       0.1005\n",
      "npvis_13_and_above          0.0940\n",
      "foth                        0.0915\n",
      "moth                        0.0814\n",
      "fblck                       0.0772\n",
      "mwhte                       0.0753\n",
      "mage_18_to_25               0.0665\n",
      "mage_26_to_30               0.0639\n",
      "male                        0.0298\n",
      "mage_31_to_44               0.0135\n",
      "mblck                       0.0000\n",
      "fage_16_to_30               0.0000\n",
      "fage_31_to_40               0.0000\n",
      "fage_41_to_44               0.0000\n",
      "Name: bwght, dtype: float64\n",
      "\n"
     ]
    }
   ],
   "source": [
    "# Defining continuous and categorical features based on your dataset\n",
    "continuous_features = ['bwght',\n",
    "                       'npvis', \n",
    "                       'fage', \n",
    "                       'mage', \n",
    "                       'cigs', \n",
    "                       'prenatal_care_engagement', \n",
    "                       'age_diff']\n",
    "\n",
    "categorical_features = ['bwght', \n",
    "                        'prenatal_care_engagement', \n",
    "                        'smoker', \n",
    "                        'male',\n",
    "                        'mwhte', 'mblck', 'moth', \n",
    "                        'fwhte', 'fblck', 'foth',\n",
    "                        'fage_16_to_30', 'fage_31_to_40', 'fage_41_to_44',\n",
    "                        'mage_18_to_25', 'mage_26_to_30', 'mage_31_to_44', 'mage_45_to_64',\n",
    "                        'npvis_under_10', 'npvis_10_to_12', 'npvis_13_and_above']\n",
    "\n",
    "# Pearson correlation for continuous features\n",
    "df_full_corr = df_full[continuous_features].corr(method='pearson').round(decimals=4)\n",
    "\n",
    "df_full_corr_cat = df_full[categorical_features].corr(method='pearson').round(decimals=4)\n",
    "\n",
    "# Import 'phik package' for categorical features, assuming you want to use Phi Coefficient\n",
    "import phik\n",
    "from phik import resources, report\n",
    "\n",
    "# Phi coefficient for non-continuous variables\n",
    "# Explicitly setting interval_cols only\n",
    "df_full_phi_corr = df_full[categorical_features].phik_matrix(interval_cols=categorical_features).round(decimals=4)\n",
    "\n",
    "# Checking results for low birth weight correlations\n",
    "print(f\"\"\"\n",
    "Pearson Correlations (Continuous Variables)\n",
    "-------------------------------------------\n",
    "{df_full_corr.loc[:, 'bwght'].sort_values(ascending=False)}\n",
    "\n",
    "\n",
    "Pearson Correlations (Categorical Variables)\n",
    "-------------------------------------------\n",
    "{df_full_corr_cat.loc[:, 'bwght'].sort_values(ascending=False)}\n",
    "\n",
    "\n",
    "Phi Coefficients (Categorical Variables)\n",
    "----------------------------------------\n",
    "{df_full_phi_corr.loc[:, 'bwght'].sort_values(ascending=False)}\n",
    "\"\"\")\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Question 1:\n",
    "Are there any strong positive or strong negative linear (Pearson) correlations with birthweight? Answer this question based on the original, continuous form of birthweight?\n",
    "\n",
    "Based on the dataset and its respective/existing features, there are no strong positive or negative linear (Pearson) correlations with birthweight in its original, continuous form. The strongest positive correlation observed is with prenatal care engagement, with a coefficient of 0.1051, which shows only a weak association with birth weight. Even the number of prenatal visits (npvis), which has the second highest correlation, is weak, with a coefficient of 0.1010.\n",
    "When it comes to negative correlation, maternal smoking habits (cigs) - that is, average cigarettes/day by mother -  exhibit the most notable correlation with birth weight at -0.0817, which is still a weak relationship. The categorical conversion of smoking into a binary 'smoker' variable - that I added in the feature engineering steps - also does not show a strong correlation, as indicated by a phi coefficient of 0.1389.\n",
    "\n",
    "Overall, the data does not present any correlations that would qualify as \"strong\" by conventional statistical standards when considering the original, continuous measure of birthweight, which could be an issue when creating a predictive model based on this dataset. \n",
    "\n",
    "**Now looking at Pearson and Phi Correlation with the new feature (low_bwght) in the dataset**"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 48,
   "metadata": {
    "deletable": false,
    "editable": false
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\n",
      "Pearson Correlations (Continuous Variables)\n",
      "-------------------------------------------\n",
      "low_bwght                   1.0000\n",
      "cigs                        0.0785\n",
      "age_diff                    0.0104\n",
      "prenatal_care_engagement   -0.0421\n",
      "npvis                      -0.0499\n",
      "mage                       -0.0579\n",
      "fage                       -0.0664\n",
      "Name: low_bwght, dtype: float64\n",
      "\n",
      "\n",
      "Pearson Correlations (Categorical Variables)\n",
      "-------------------------------------------\n",
      "low_bwght                1.0000\n",
      "smoker                   0.1031\n",
      "mage_18_to_25            0.0776\n",
      "cigs_mage_interaction    0.0724\n",
      "fage_16_to_30            0.0561\n",
      "npvis_under_10           0.0415\n",
      "Name: low_bwght, dtype: float64\n",
      "\n",
      "\n",
      "Phi Coefficients (Categorical Variables)\n",
      "----------------------------------------\n",
      "low_bwght                1.0000\n",
      "smoker                   0.1532\n",
      "mage_18_to_25            0.1129\n",
      "cigs_mage_interaction    0.0864\n",
      "fage_16_to_30            0.0770\n",
      "npvis_under_10           0.0496\n",
      "Name: low_bwght, dtype: float64\n",
      "\n"
     ]
    }
   ],
   "source": [
    "# Defining continuous and categorical features based on your dataset\n",
    "continuous_features = ['low_bwght',\n",
    "                       'npvis', \n",
    "                       'fage', \n",
    "                       'mage', \n",
    "                       'cigs', 'prenatal_care_engagement', \n",
    "                       'age_diff']\n",
    "\n",
    "categorical_features = ['low_bwght', 'smoker', \n",
    "                        'fage_16_to_30', \n",
    "                        'mage_18_to_25', 'npvis_under_10', \n",
    "                        'cigs_mage_interaction']\n",
    "\n",
    "# Pearson correlation for continuous features\n",
    "df_full_corr = df_full[continuous_features].corr(method='pearson').round(decimals=4)\n",
    "\n",
    "df_full_corr_cat = df_full[categorical_features].corr(method='pearson').round(decimals=4)\n",
    "\n",
    "# For categorical features, assuming you want to use Phi Coefficient\n",
    "# Note: You'll need the `phik` package, which you can install using pip install phik\n",
    "import phik\n",
    "from phik import resources, report\n",
    "\n",
    "df_full_phi_corr = df_full[categorical_features].phik_matrix(interval_cols=categorical_features).round(decimals=4)\n",
    "\n",
    "# Checking results for low birth weight correlations\n",
    "print(f\"\"\"\n",
    "Pearson Correlations (Continuous Variables)\n",
    "-------------------------------------------\n",
    "{df_full_corr.loc[:, 'low_bwght'].sort_values(ascending=False)}\n",
    "\n",
    "\n",
    "Pearson Correlations (Categorical Variables)\n",
    "-------------------------------------------\n",
    "{df_full_corr_cat.loc[:, 'low_bwght'].sort_values(ascending=False)}\n",
    "\n",
    "\n",
    "Phi Coefficients (Categorical Variables)\n",
    "----------------------------------------\n",
    "{df_full_phi_corr.loc[:, 'low_bwght'].sort_values(ascending=False)}\n",
    "\"\"\")"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "**Insights from the Pearson and Phi Correlation with variable 'low_bwght' :** \n",
    "\n",
    "(1) Direct Smoking Correlation:\n",
    "The Pearson correlation for maternal smoking (cigs) is 0.0785, indicating a modest but noteworthy relationship with low birth weight. This correlation underscores the detrimental impact of smoking during pregnancy on the baby's weight at birth, emphasizing the critical need for women to stop smoking during their pregnancies. \n",
    "\n",
    "(2) Age and Its Influence:\n",
    "- Younger Mothers (mage_18_to_25): With a phi coefficient of 0.1129, this group is correlated with low birth weight, pointing to potential risks associated with younger maternal age. Many factors, such as biological risks, socioeconomic status, and access to healthcare could influence the reason behind this. \n",
    "\n",
    "- Paternal Age Groups: No strong correlations exist for the created paternal age groups (fage_16_to_30, fage_31_to_40, fage_41_to_44) with low birth weight. This implies that while paternal age may play a role, there is no pronounced linear correlation with low birth weight in this dataset.\n",
    "\n",
    "(3) Prenatal Visit Categorization:\n",
    "The categorization of prenatal visits does not show a 'strong' correlation with low birth weight. The highest correlation among these is for npvis_13_and_above with a phi coefficient of 0.0828, signaling that the number of prenatal visits might have a role in birth outcomes, but the link is not strong. This result emphasizes the complexity of prenatal care's impact on birth weight and the possibility of other mediating factors.\n",
    "\n",
    "(4) Race and Socio-Demographic Factors:\n",
    "Mother's Race: The dataset's representation of the mother's race (mwhte, mblck, moth) and their phi coefficients with low birth weight are relatively low, with the highest being for mothers who are neither black nor white (moth) at 0.0715. This suggests a weaker correlation with low birth weight across these racial categories. It's important to consider demographic distribution and the potential for socio-demographic factors to intersect with these findings.\n",
    "\n",
    "\n",
    "In summary, while there are some correlations worth noting, none exhibit a strong linear relationship with low birth weight, which means there is a complex interplay of various factors contributing to birth weight. "
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Question 3:\n",
    "After transforming birthweight (bwght) using this threshold, did correlations and/or phi coefficients improve? Why or why not?\n",
    "\n",
    "\n",
    "The transformation of birthweight (bwght) into a categorical variable for low birth weight (low_bwght) has improved the clarity of some relationships, as evidenced by changes in the correlation and phi coefficients.\n",
    "\n",
    "Indeed, before the transformation, the strongest positive Pearson correlation with continuous 'bwght' was prenatal_care_engagement at 0.1051, suggesting a modest association. After the transformation, the strongest positive Pearson correlation with low_bwght was for the smoker variable at 0.1031, which is slightly lower but suggests a pretty similar strength of association.\n",
    "\n",
    "Also, the phi coefficients, which measure the association between categorical variables, show more substantial values post-transformation. For example, prenatal_care_engagement's phi coefficient with low_bwght is 0.3659, which is a marked improvement and indicates a stronger association when birthweight is categorized into low and not low. \n",
    "\n",
    "Similarly, other variables such as npvis_under_10 and smoker have higher phi coefficients (0.1854 and 0.1532 respectively), showing stronger associations with the categorical version of birthweight.\n",
    "\n",
    "These changes indicate that the categorical transformation of birthweight may capture more nuanced associations between birthweight and other variables, which would have been less 'clear' if only analyzing birthweight as a continuous variable. Categorizing birth weight can reveal more about the factors that have a binary impact on whether a baby's birth weight is considered low or not, rather than the factors that influence the exact weight in grams. So, this will be particularly useful as the main concern is to build a predictive model to help figure out if a baby's birth weight falls below a certain threshold that defines it as 'low' and could put the baby's health at risk.\n",
    "\n",
    "**NOTE:** Since I changed the threshold from 2500 to 3370 to try and alleviate the imbalance in the dataset, it is essential to keep this in mind when looking at the model. "
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "<br><h2> PART VI: Yeo_Johnson Transformation :</h2>\n",
    "\n",
    "**(1) Yeo-Johnson transformation:**\n",
    "\n",
    "Given the observed skewness in our dataset, I will now apply the Yeo-Johnson transformation. This method effectively normalizes data, including positive and negative skewness, and allows me to handle zeros in the dataset. By applying this transformation, I aim to stabilize the variance and make the data more symmetric to improve my analysis's reliability."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 49,
   "metadata": {
    "deletable": false,
    "editable": false
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "mage                       -0.005\n",
      "meduc                      -0.030\n",
      "monpre                     -0.016\n",
      "npvis                       0.292\n",
      "fage                        0.003\n",
      "feduc                      -0.115\n",
      "cigs                        3.093\n",
      "male                       -0.055\n",
      "mwhte                      -2.438\n",
      "mblck                       3.727\n",
      "moth                        3.948\n",
      "fwhte                      -2.491\n",
      "fblck                       3.769\n",
      "foth                        4.045\n",
      "smoker                      3.093\n",
      "npvis_under_10              1.416\n",
      "npvis_10_to_12             -0.184\n",
      "npvis_13_and_above          1.200\n",
      "prenatal_care_engagement    0.439\n",
      "fage_16_to_30               0.348\n",
      "fage_31_to_40              -0.063\n",
      "fage_41_to_44               4.346\n",
      "mage_18_to_25               1.587\n",
      "mage_26_to_30               0.408\n",
      "mage_31_to_44               0.378\n",
      "mage_45_to_64               0.000\n",
      "cigs_mage_interaction       3.093\n",
      "age_diff                    0.001\n",
      "dtype: float64\n"
     ]
    }
   ],
   "source": [
    "# Subsetting X-data to include only numeric columns\n",
    "x_data_numeric = df_full.select_dtypes(include=[np.number]).drop(labels=['bwght', 'low_bwght'], axis=1)\n",
    "\n",
    "# Yeo-Johnson transformation on numeric data\n",
    "x_transformed = power_transform(X=x_data_numeric, method='yeo-johnson', standardize=True)\n",
    "\n",
    "# Storing results as a DataFrame\n",
    "x_transformed_df = pd.DataFrame(data=x_transformed, columns=x_data_numeric.columns, index=x_data_numeric.index)\n",
    "\n",
    "# Checking skewness results after transformation\n",
    "print(x_transformed_df.skew().round(decimals=3))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 50,
   "metadata": {
    "deletable": false,
    "editable": false
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\n",
      "Skewness Reduction:\n",
      "\n",
      "--------------------------------\n",
      "\n",
      "mage                        0.06\n",
      "meduc                       0.33\n",
      "monpre                      2.05\n",
      "npvis                       1.26\n",
      "fage                        0.59\n",
      "feduc                       0.44\n",
      "cigs                        1.68\n",
      "male                        0.00\n",
      "mwhte                       0.00\n",
      "mblck                       0.00\n",
      "moth                        0.00\n",
      "fwhte                       0.00\n",
      "fblck                       0.00\n",
      "foth                        0.00\n",
      "smoker                      0.00\n",
      "npvis_under_10              0.00\n",
      "npvis_10_to_12              0.00\n",
      "npvis_13_and_above          0.00\n",
      "prenatal_care_engagement    1.70\n",
      "fage_16_to_30               0.00\n",
      "fage_31_to_40               0.00\n",
      "fage_41_to_44               0.00\n",
      "mage_18_to_25               0.00\n",
      "mage_26_to_30               0.00\n",
      "mage_31_to_44               0.00\n",
      "mage_45_to_64               0.00\n",
      "cigs_mage_interaction       2.17\n",
      "age_diff                    1.98\n",
      "dtype: float64\n"
     ]
    }
   ],
   "source": [
    "# Subsetting to include only numeric columns, excluding 'bwght' and 'low_bwght'\n",
    "x_data_numeric = df_full.loc[df_train.index].select_dtypes(include=[np.number]).drop(labels=['bwght', 'low_bwght'], axis=1)\n",
    "\n",
    "# Apply Yeo-Johnson transformation\n",
    "x_transformed = power_transform(x_data_numeric, method='yeo-johnson')\n",
    "\n",
    "# Convert the transformed data back to a DataFrame for ease of use\n",
    "x_transformed_df = pd.DataFrame(data=x_transformed, columns=x_data_numeric.columns, index=x_data_numeric.index)\n",
    "\n",
    "# Calculate skewness before and after the transformation\n",
    "original_skewness = x_data_numeric.skew().round(2)\n",
    "transformed_skewness = x_transformed_df.skew().round(2)\n",
    "\n",
    "# Calculating the difference in skewness to see the improvement\n",
    "skewness_difference = abs(original_skewness) - abs(transformed_skewness)\n",
    "\n",
    "print(\"\"\"\n",
    "Skewness Reduction:\n",
    "\n",
    "--------------------------------\n",
    "\"\"\")\n",
    "print(skewness_difference)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "<br><h2> PART VII: Standardization: </h2>\n",
    "\n",
    "Standardization rescales data to a mean of 0 and a standard deviation of 1, ensuring all features contribute equally in my model analysis. This next step will help improve model accuracy and detect patterns more effectively."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 51,
   "metadata": {
    "deletable": false,
    "editable": false
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>mage</th>\n",
       "      <th>meduc</th>\n",
       "      <th>monpre</th>\n",
       "      <th>npvis</th>\n",
       "      <th>fage</th>\n",
       "      <th>feduc</th>\n",
       "      <th>cigs</th>\n",
       "      <th>male</th>\n",
       "      <th>mwhte</th>\n",
       "      <th>mblck</th>\n",
       "      <th>moth</th>\n",
       "      <th>fwhte</th>\n",
       "      <th>fblck</th>\n",
       "      <th>foth</th>\n",
       "      <th>smoker</th>\n",
       "      <th>npvis_under_10</th>\n",
       "      <th>npvis_10_to_12</th>\n",
       "      <th>npvis_13_and_above</th>\n",
       "      <th>prenatal_care_engagement</th>\n",
       "      <th>fage_16_to_30</th>\n",
       "      <th>fage_31_to_40</th>\n",
       "      <th>fage_41_to_44</th>\n",
       "      <th>mage_18_to_25</th>\n",
       "      <th>mage_26_to_30</th>\n",
       "      <th>mage_31_to_44</th>\n",
       "      <th>mage_45_to_64</th>\n",
       "      <th>cigs_mage_interaction</th>\n",
       "      <th>age_diff</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>count</th>\n",
       "      <td>1648.00</td>\n",
       "      <td>1648.00</td>\n",
       "      <td>1648.00</td>\n",
       "      <td>1648.00</td>\n",
       "      <td>1648.00</td>\n",
       "      <td>1648.00</td>\n",
       "      <td>1648.00</td>\n",
       "      <td>1648.00</td>\n",
       "      <td>1648.00</td>\n",
       "      <td>1648.00</td>\n",
       "      <td>1648.00</td>\n",
       "      <td>1648.00</td>\n",
       "      <td>1648.00</td>\n",
       "      <td>1648.00</td>\n",
       "      <td>1648.00</td>\n",
       "      <td>1648.00</td>\n",
       "      <td>1648.00</td>\n",
       "      <td>1648.00</td>\n",
       "      <td>1648.00</td>\n",
       "      <td>1648.00</td>\n",
       "      <td>1648.00</td>\n",
       "      <td>1648.00</td>\n",
       "      <td>1648.00</td>\n",
       "      <td>1648.00</td>\n",
       "      <td>1648.00</td>\n",
       "      <td>1648.0</td>\n",
       "      <td>1648.00</td>\n",
       "      <td>1648.00</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>mean</th>\n",
       "      <td>0.00</td>\n",
       "      <td>0.00</td>\n",
       "      <td>0.00</td>\n",
       "      <td>-0.00</td>\n",
       "      <td>-0.00</td>\n",
       "      <td>-0.00</td>\n",
       "      <td>0.00</td>\n",
       "      <td>-0.00</td>\n",
       "      <td>0.00</td>\n",
       "      <td>-0.00</td>\n",
       "      <td>0.00</td>\n",
       "      <td>0.00</td>\n",
       "      <td>-0.00</td>\n",
       "      <td>0.00</td>\n",
       "      <td>0.00</td>\n",
       "      <td>0.00</td>\n",
       "      <td>-0.00</td>\n",
       "      <td>0.00</td>\n",
       "      <td>-0.00</td>\n",
       "      <td>0.00</td>\n",
       "      <td>0.00</td>\n",
       "      <td>-0.00</td>\n",
       "      <td>0.00</td>\n",
       "      <td>0.00</td>\n",
       "      <td>-0.00</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.00</td>\n",
       "      <td>0.00</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>std</th>\n",
       "      <td>1.00</td>\n",
       "      <td>1.00</td>\n",
       "      <td>1.00</td>\n",
       "      <td>1.00</td>\n",
       "      <td>1.00</td>\n",
       "      <td>1.00</td>\n",
       "      <td>1.00</td>\n",
       "      <td>1.00</td>\n",
       "      <td>1.00</td>\n",
       "      <td>1.00</td>\n",
       "      <td>1.00</td>\n",
       "      <td>1.00</td>\n",
       "      <td>1.00</td>\n",
       "      <td>1.00</td>\n",
       "      <td>1.00</td>\n",
       "      <td>1.00</td>\n",
       "      <td>1.00</td>\n",
       "      <td>1.00</td>\n",
       "      <td>1.00</td>\n",
       "      <td>1.00</td>\n",
       "      <td>1.00</td>\n",
       "      <td>1.00</td>\n",
       "      <td>1.00</td>\n",
       "      <td>1.00</td>\n",
       "      <td>1.00</td>\n",
       "      <td>0.0</td>\n",
       "      <td>1.00</td>\n",
       "      <td>1.00</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>min</th>\n",
       "      <td>-2.96</td>\n",
       "      <td>-3.71</td>\n",
       "      <td>-4.50</td>\n",
       "      <td>-4.46</td>\n",
       "      <td>-3.01</td>\n",
       "      <td>-3.06</td>\n",
       "      <td>-0.30</td>\n",
       "      <td>-1.03</td>\n",
       "      <td>-2.75</td>\n",
       "      <td>-0.26</td>\n",
       "      <td>-0.24</td>\n",
       "      <td>-2.79</td>\n",
       "      <td>-0.25</td>\n",
       "      <td>-0.24</td>\n",
       "      <td>-0.30</td>\n",
       "      <td>-0.53</td>\n",
       "      <td>-1.09</td>\n",
       "      <td>-0.56</td>\n",
       "      <td>-6.10</td>\n",
       "      <td>-0.85</td>\n",
       "      <td>-1.02</td>\n",
       "      <td>-0.22</td>\n",
       "      <td>-0.49</td>\n",
       "      <td>-0.82</td>\n",
       "      <td>-0.82</td>\n",
       "      <td>0.0</td>\n",
       "      <td>-0.30</td>\n",
       "      <td>-1.73</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>25%</th>\n",
       "      <td>-0.73</td>\n",
       "      <td>-0.85</td>\n",
       "      <td>-1.21</td>\n",
       "      <td>-0.40</td>\n",
       "      <td>-0.65</td>\n",
       "      <td>-0.92</td>\n",
       "      <td>-0.30</td>\n",
       "      <td>-1.03</td>\n",
       "      <td>0.36</td>\n",
       "      <td>-0.26</td>\n",
       "      <td>-0.24</td>\n",
       "      <td>0.36</td>\n",
       "      <td>-0.25</td>\n",
       "      <td>-0.24</td>\n",
       "      <td>-0.30</td>\n",
       "      <td>-0.53</td>\n",
       "      <td>-1.09</td>\n",
       "      <td>-0.56</td>\n",
       "      <td>-0.47</td>\n",
       "      <td>-0.85</td>\n",
       "      <td>-1.02</td>\n",
       "      <td>-0.22</td>\n",
       "      <td>-0.49</td>\n",
       "      <td>-0.82</td>\n",
       "      <td>-0.82</td>\n",
       "      <td>0.0</td>\n",
       "      <td>-0.30</td>\n",
       "      <td>-0.75</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>50%</th>\n",
       "      <td>-0.09</td>\n",
       "      <td>-0.16</td>\n",
       "      <td>0.16</td>\n",
       "      <td>0.17</td>\n",
       "      <td>-0.08</td>\n",
       "      <td>-0.06</td>\n",
       "      <td>-0.30</td>\n",
       "      <td>0.97</td>\n",
       "      <td>0.36</td>\n",
       "      <td>-0.26</td>\n",
       "      <td>-0.24</td>\n",
       "      <td>0.36</td>\n",
       "      <td>-0.25</td>\n",
       "      <td>-0.24</td>\n",
       "      <td>-0.30</td>\n",
       "      <td>-0.53</td>\n",
       "      <td>0.92</td>\n",
       "      <td>-0.56</td>\n",
       "      <td>-0.16</td>\n",
       "      <td>-0.85</td>\n",
       "      <td>0.98</td>\n",
       "      <td>-0.22</td>\n",
       "      <td>-0.49</td>\n",
       "      <td>-0.82</td>\n",
       "      <td>-0.82</td>\n",
       "      <td>0.0</td>\n",
       "      <td>-0.30</td>\n",
       "      <td>-0.18</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>75%</th>\n",
       "      <td>0.58</td>\n",
       "      <td>1.13</td>\n",
       "      <td>0.16</td>\n",
       "      <td>0.17</td>\n",
       "      <td>0.61</td>\n",
       "      <td>0.96</td>\n",
       "      <td>-0.30</td>\n",
       "      <td>0.97</td>\n",
       "      <td>0.36</td>\n",
       "      <td>-0.26</td>\n",
       "      <td>-0.24</td>\n",
       "      <td>0.36</td>\n",
       "      <td>-0.25</td>\n",
       "      <td>-0.24</td>\n",
       "      <td>-0.30</td>\n",
       "      <td>-0.53</td>\n",
       "      <td>0.92</td>\n",
       "      <td>-0.56</td>\n",
       "      <td>0.42</td>\n",
       "      <td>1.18</td>\n",
       "      <td>0.98</td>\n",
       "      <td>-0.22</td>\n",
       "      <td>-0.49</td>\n",
       "      <td>1.22</td>\n",
       "      <td>1.22</td>\n",
       "      <td>0.0</td>\n",
       "      <td>-0.30</td>\n",
       "      <td>0.80</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>max</th>\n",
       "      <td>2.94</td>\n",
       "      <td>1.69</td>\n",
       "      <td>2.73</td>\n",
       "      <td>6.02</td>\n",
       "      <td>4.07</td>\n",
       "      <td>1.52</td>\n",
       "      <td>3.35</td>\n",
       "      <td>0.97</td>\n",
       "      <td>0.36</td>\n",
       "      <td>3.87</td>\n",
       "      <td>4.16</td>\n",
       "      <td>0.36</td>\n",
       "      <td>3.93</td>\n",
       "      <td>4.21</td>\n",
       "      <td>3.35</td>\n",
       "      <td>1.90</td>\n",
       "      <td>0.92</td>\n",
       "      <td>1.77</td>\n",
       "      <td>6.50</td>\n",
       "      <td>1.18</td>\n",
       "      <td>0.98</td>\n",
       "      <td>4.46</td>\n",
       "      <td>2.05</td>\n",
       "      <td>1.22</td>\n",
       "      <td>1.22</td>\n",
       "      <td>0.0</td>\n",
       "      <td>3.35</td>\n",
       "      <td>2.95</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "          mage    meduc   monpre    npvis     fage    feduc     cigs     male    mwhte    mblck     moth    fwhte    fblck     foth   smoker  npvis_under_10  npvis_10_to_12  npvis_13_and_above  prenatal_care_engagement  fage_16_to_30  fage_31_to_40  fage_41_to_44  mage_18_to_25  mage_26_to_30  mage_31_to_44  mage_45_to_64  cigs_mage_interaction  age_diff\n",
       "count  1648.00  1648.00  1648.00  1648.00  1648.00  1648.00  1648.00  1648.00  1648.00  1648.00  1648.00  1648.00  1648.00  1648.00  1648.00         1648.00         1648.00             1648.00                   1648.00        1648.00        1648.00        1648.00        1648.00        1648.00        1648.00         1648.0                1648.00   1648.00\n",
       "mean      0.00     0.00     0.00    -0.00    -0.00    -0.00     0.00    -0.00     0.00    -0.00     0.00     0.00    -0.00     0.00     0.00            0.00           -0.00                0.00                     -0.00           0.00           0.00          -0.00           0.00           0.00          -0.00            0.0                   0.00      0.00\n",
       "std       1.00     1.00     1.00     1.00     1.00     1.00     1.00     1.00     1.00     1.00     1.00     1.00     1.00     1.00     1.00            1.00            1.00                1.00                      1.00           1.00           1.00           1.00           1.00           1.00           1.00            0.0                   1.00      1.00\n",
       "min      -2.96    -3.71    -4.50    -4.46    -3.01    -3.06    -0.30    -1.03    -2.75    -0.26    -0.24    -2.79    -0.25    -0.24    -0.30           -0.53           -1.09               -0.56                     -6.10          -0.85          -1.02          -0.22          -0.49          -0.82          -0.82            0.0                  -0.30     -1.73\n",
       "25%      -0.73    -0.85    -1.21    -0.40    -0.65    -0.92    -0.30    -1.03     0.36    -0.26    -0.24     0.36    -0.25    -0.24    -0.30           -0.53           -1.09               -0.56                     -0.47          -0.85          -1.02          -0.22          -0.49          -0.82          -0.82            0.0                  -0.30     -0.75\n",
       "50%      -0.09    -0.16     0.16     0.17    -0.08    -0.06    -0.30     0.97     0.36    -0.26    -0.24     0.36    -0.25    -0.24    -0.30           -0.53            0.92               -0.56                     -0.16          -0.85           0.98          -0.22          -0.49          -0.82          -0.82            0.0                  -0.30     -0.18\n",
       "75%       0.58     1.13     0.16     0.17     0.61     0.96    -0.30     0.97     0.36    -0.26    -0.24     0.36    -0.25    -0.24    -0.30           -0.53            0.92               -0.56                      0.42           1.18           0.98          -0.22          -0.49           1.22           1.22            0.0                  -0.30      0.80\n",
       "max       2.94     1.69     2.73     6.02     4.07     1.52     3.35     0.97     0.36     3.87     4.16     0.36     3.93     4.21     3.35            1.90            0.92                1.77                      6.50           1.18           0.98           4.46           2.05           1.22           1.22            0.0                   3.35      2.95"
      ]
     },
     "execution_count": 51,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "## Standardization ##\n",
    "\n",
    "# standardizing X-data (st = scaled and transformed)\n",
    "x_data_st = standard_scaler(df = x_transformed_df)\n",
    "\n",
    "\n",
    "# checking results\n",
    "x_data_st.describe(include = 'number').round(decimals = 2)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "<br><hr style=\"height:.9px;border:none;color:#333;background-color:#333;\" /><br>\n",
    " \n",
    "<h2> PART VIII: Data Partitioning: </h2><br>\n",
    "\n",
    "Onto the data partitioning, a step which splits the dataset into training and testing sets, enabling the model to learn from one subset and be evaluated on another. This approach will ensures an accurate measure of model performance and guards against overfitting, and is crucial to be able to make reliable predictions.\n",
    "<br>"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 52,
   "metadata": {
    "deletable": false,
    "editable": false
   },
   "outputs": [],
   "source": [
    "## Parsing out testing data ##\n",
    "\n",
    "# Dataset for kaggle\n",
    "kaggle_data = df_full[ df_full['set'] == 'Kaggle' ].copy()\n",
    "\n",
    "\n",
    "# Dataset for model building\n",
    "df = df_full[ df_full['set'] == 'Not Kaggle' ].copy()\n",
    "\n",
    "\n",
    "# Dropping set identifier (kaggle)\n",
    "kaggle_data.drop(labels = 'set',\n",
    "                 axis = 1,\n",
    "                 inplace = True)\n",
    "\n",
    "\n",
    "# Dropping set identifier (model building)\n",
    "df.drop(labels = 'set',\n",
    "        axis = 1,\n",
    "        inplace = True)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 53,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Low birthweight proportions:\n",
      " low_bwght\n",
      "0.0    0.54\n",
      "1.0    0.46\n",
      "Name: proportion, dtype: float64\n"
     ]
    }
   ],
   "source": [
    "# Ensure the predictor variables are in a DataFrame named predictor_variables\n",
    "predictor_variables = x_data_st  # Assuming x_data_st is correctly populated\n",
    "\n",
    "# Ensure the target variable is correctly organized\n",
    "target_variable = df_full.loc[df_train.index]['low_bwght']\n",
    "\n",
    "# Check the balance of the target variable\n",
    "print(\"Low birthweight proportions:\\n\", target_variable.value_counts(normalize=True).round(2))\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 54,
   "metadata": {
    "deletable": false,
    "editable": false
   },
   "outputs": [],
   "source": [
    "# Perform the split\n",
    "x_train, x_test, y_train, y_test = train_test_split(\n",
    "    predictor_variables,\n",
    "    target_variable,\n",
    "    test_size=0.25,\n",
    "    random_state=219,\n",
    "    stratify=target_variable  # Stratify by the target variable to maintain balance\n",
    ")\n",
    "\n",
    "# Combine x_train and y_train into a single DataFrame for modeling\n",
    "x_train['low_bwght'] = y_train.values\n",
    "bwght_train = x_train"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "<br><h3>Building Individual Logistic Regression Models</h3><br>\n",
    "\n",
    "Based on the strong links found with \"low_bwght,\" I'll set up three logistic regression models. These models will look into how \"low_bwght\" connects with \"prenatal_care_engagement,\" \"cigs\" (which looks at if the mom smokes), and \"mage_18_to_25\" (focusing on moms aged 18 to 25). I picked these factors because they seemed to have the strongest relation with the y variable and thus would be best for predicting low birth weight. "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 55,
   "metadata": {
    "deletable": false,
    "editable": false
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Optimization terminated successfully.\n",
      "         Current function value: 0.671598\n",
      "         Iterations 8\n"
     ]
    },
    {
     "data": {
      "text/html": [
       "<table class=\"simpletable\">\n",
       "<tr>\n",
       "        <td>Model:</td>              <td>Logit</td>           <td>Method:</td>          <td>MLE</td>   \n",
       "</tr>\n",
       "<tr>\n",
       "  <td>Dependent Variable:</td>     <td>low_bwght</td>    <td>Pseudo R-squared:</td>    <td>0.028</td>  \n",
       "</tr>\n",
       "<tr>\n",
       "         <td>Date:</td>        <td>2024-03-10 20:41</td>       <td>AIC:</td>         <td>1680.1907</td>\n",
       "</tr>\n",
       "<tr>\n",
       "   <td>No. Observations:</td>        <td>1236</td>             <td>BIC:</td>         <td>1731.3871</td>\n",
       "</tr>\n",
       "<tr>\n",
       "       <td>Df Model:</td>              <td>9</td>         <td>Log-Likelihood:</td>    <td>-830.10</td> \n",
       "</tr>\n",
       "<tr>\n",
       "     <td>Df Residuals:</td>          <td>1226</td>           <td>LL-Null:</td>        <td>-853.59</td> \n",
       "</tr>\n",
       "<tr>\n",
       "      <td>Converged:</td>           <td>1.0000</td>        <td>LLR p-value:</td>    <td>3.9273e-07</td>\n",
       "</tr>\n",
       "<tr>\n",
       "    <td>No. Iterations:</td>        <td>8.0000</td>           <td>Scale:</td>         <td>1.0000</td>  \n",
       "</tr>\n",
       "</table>\n",
       "<table class=\"simpletable\">\n",
       "<tr>\n",
       "              <td></td>               <th>Coef.</th>  <th>Std.Err.</th>    <th>z</th>     <th>P>|z|</th>  <th>[0.025</th>  <th>0.975]</th> \n",
       "</tr>\n",
       "<tr>\n",
       "  <th>Intercept</th>                 <td>-0.1384</td>  <td>0.0583</td>  <td>-2.3736</td> <td>0.0176</td>  <td>-0.2527</td> <td>-0.0241</td>\n",
       "</tr>\n",
       "<tr>\n",
       "  <th>prenatal_care_engagement</th>  <td>-0.1732</td>  <td>0.1602</td>  <td>-1.0810</td> <td>0.2797</td>  <td>-0.4872</td> <td>0.1408</td> \n",
       "</tr>\n",
       "<tr>\n",
       "  <th>smoker</th>                    <td>25.5200</td>  <td>30.1726</td> <td>0.8458</td>  <td>0.3977</td> <td>-33.6173</td> <td>84.6573</td>\n",
       "</tr>\n",
       "<tr>\n",
       "  <th>cigs</th>                     <td>-25.2354</td>  <td>30.1634</td> <td>-0.8366</td> <td>0.4028</td> <td>-84.3546</td> <td>33.8838</td>\n",
       "</tr>\n",
       "<tr>\n",
       "  <th>mage_18_to_25</th>             <td>0.1496</td>   <td>0.0812</td>  <td>1.8432</td>  <td>0.0653</td>  <td>-0.0095</td> <td>0.3086</td> \n",
       "</tr>\n",
       "<tr>\n",
       "  <th>npvis</th>                     <td>0.0194</td>   <td>0.1805</td>  <td>0.1076</td>  <td>0.9143</td>  <td>-0.3343</td> <td>0.3731</td> \n",
       "</tr>\n",
       "<tr>\n",
       "  <th>npvis_under_10</th>            <td>-0.0357</td>  <td>0.0841</td>  <td>-0.4249</td> <td>0.6709</td>  <td>-0.2005</td> <td>0.1291</td> \n",
       "</tr>\n",
       "<tr>\n",
       "  <th>mage</th>                      <td>0.0552</td>   <td>0.1012</td>  <td>0.5454</td>  <td>0.5855</td>  <td>-0.1431</td> <td>0.2535</td> \n",
       "</tr>\n",
       "<tr>\n",
       "  <th>fage</th>                      <td>-0.1714</td>  <td>0.1078</td>  <td>-1.5903</td> <td>0.1118</td>  <td>-0.3826</td> <td>0.0398</td> \n",
       "</tr>\n",
       "<tr>\n",
       "  <th>fage_16_to_30</th>             <td>0.0018</td>   <td>0.0917</td>  <td>0.0200</td>  <td>0.9840</td>  <td>-0.1778</td> <td>0.1815</td> \n",
       "</tr>\n",
       "</table><br/>\n"
      ],
      "text/latex": [
       "\\begin{table}\n",
       "\\caption{Results: Logit}\n",
       "\\label{}\n",
       "\\begin{center}\n",
       "\\begin{tabular}{llll}\n",
       "\\hline\n",
       "Model:              & Logit            & Method:           & MLE         \\\\\n",
       "Dependent Variable: & low\\_bwght       & Pseudo R-squared: & 0.028       \\\\\n",
       "Date:               & 2024-03-10 20:41 & AIC:              & 1680.1907   \\\\\n",
       "No. Observations:   & 1236             & BIC:              & 1731.3871   \\\\\n",
       "Df Model:           & 9                & Log-Likelihood:   & -830.10     \\\\\n",
       "Df Residuals:       & 1226             & LL-Null:          & -853.59     \\\\\n",
       "Converged:          & 1.0000           & LLR p-value:      & 3.9273e-07  \\\\\n",
       "No. Iterations:     & 8.0000           & Scale:            & 1.0000      \\\\\n",
       "\\hline\n",
       "\\end{tabular}\n",
       "\\end{center}\n",
       "\n",
       "\\begin{center}\n",
       "\\begin{tabular}{lrrrrrr}\n",
       "\\hline\n",
       "                           &    Coef. & Std.Err. &       z & P$> |$z$|$ &   [0.025 &  0.975]  \\\\\n",
       "\\hline\n",
       "Intercept                  &  -0.1384 &   0.0583 & -2.3736 &      0.0176 &  -0.2527 & -0.0241  \\\\\n",
       "prenatal\\_care\\_engagement &  -0.1732 &   0.1602 & -1.0810 &      0.2797 &  -0.4872 &  0.1408  \\\\\n",
       "smoker                     &  25.5200 &  30.1726 &  0.8458 &      0.3977 & -33.6173 & 84.6573  \\\\\n",
       "cigs                       & -25.2354 &  30.1634 & -0.8366 &      0.4028 & -84.3546 & 33.8838  \\\\\n",
       "mage\\_18\\_to\\_25           &   0.1496 &   0.0812 &  1.8432 &      0.0653 &  -0.0095 &  0.3086  \\\\\n",
       "npvis                      &   0.0194 &   0.1805 &  0.1076 &      0.9143 &  -0.3343 &  0.3731  \\\\\n",
       "npvis\\_under\\_10           &  -0.0357 &   0.0841 & -0.4249 &      0.6709 &  -0.2005 &  0.1291  \\\\\n",
       "mage                       &   0.0552 &   0.1012 &  0.5454 &      0.5855 &  -0.1431 &  0.2535  \\\\\n",
       "fage                       &  -0.1714 &   0.1078 & -1.5903 &      0.1118 &  -0.3826 &  0.0398  \\\\\n",
       "fage\\_16\\_to\\_30           &   0.0018 &   0.0917 &  0.0200 &      0.9840 &  -0.1778 &  0.1815  \\\\\n",
       "\\hline\n",
       "\\end{tabular}\n",
       "\\end{center}\n",
       "\\end{table}\n",
       "\\bigskip\n"
      ],
      "text/plain": [
       "<class 'statsmodels.iolib.summary2.Summary'>\n",
       "\"\"\"\n",
       "                              Results: Logit\n",
       "==========================================================================\n",
       "Model:                 Logit               Method:              MLE       \n",
       "Dependent Variable:    low_bwght           Pseudo R-squared:    0.028     \n",
       "Date:                  2024-03-10 20:41    AIC:                 1680.1907 \n",
       "No. Observations:      1236                BIC:                 1731.3871 \n",
       "Df Model:              9                   Log-Likelihood:      -830.10   \n",
       "Df Residuals:          1226                LL-Null:             -853.59   \n",
       "Converged:             1.0000              LLR p-value:         3.9273e-07\n",
       "No. Iterations:        8.0000              Scale:               1.0000    \n",
       "--------------------------------------------------------------------------\n",
       "                          Coef.   Std.Err.    z    P>|z|   [0.025   0.975]\n",
       "--------------------------------------------------------------------------\n",
       "Intercept                 -0.1384   0.0583 -2.3736 0.0176  -0.2527 -0.0241\n",
       "prenatal_care_engagement  -0.1732   0.1602 -1.0810 0.2797  -0.4872  0.1408\n",
       "smoker                    25.5200  30.1726  0.8458 0.3977 -33.6173 84.6573\n",
       "cigs                     -25.2354  30.1634 -0.8366 0.4028 -84.3546 33.8838\n",
       "mage_18_to_25              0.1496   0.0812  1.8432 0.0653  -0.0095  0.3086\n",
       "npvis                      0.0194   0.1805  0.1076 0.9143  -0.3343  0.3731\n",
       "npvis_under_10            -0.0357   0.0841 -0.4249 0.6709  -0.2005  0.1291\n",
       "mage                       0.0552   0.1012  0.5454 0.5855  -0.1431  0.2535\n",
       "fage                      -0.1714   0.1078 -1.5903 0.1118  -0.3826  0.0398\n",
       "fage_16_to_30              0.0018   0.0917  0.0200 0.9840  -0.1778  0.1815\n",
       "==========================================================================\n",
       "\n",
       "\"\"\""
      ]
     },
     "execution_count": 55,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# Instantiating a logistic regression model object\n",
    "logistic_full = smf.logit(formula=\"\"\"low_bwght ~\n",
    "                                         prenatal_care_engagement +\n",
    "                                         smoker +\n",
    "                                         cigs +\n",
    "                                         mage_18_to_25 +\n",
    "                                         npvis +\n",
    "                                         npvis_under_10 +\n",
    "                                         mage +\n",
    "                                         fage +\n",
    "                                         fage_16_to_30\"\"\",\n",
    "                          data=bwght_train)\n",
    "\n",
    "# Fitting the model object\n",
    "results_full = logistic_full.fit()\n",
    "\n",
    "# Checking the results SUMMARY\n",
    "results_full.summary2()\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "**Key insights from logistic regression models:**\n",
    "\n",
    "(1) Limited Predictive Power: The model's pseudo-R-squared is 0.028, suggesting that the selected predictors can explain only around 2.8% of the variation in low birth weight. This means we need to do further analysis or include other factors (such as the mother's weight, health habits, etc).\n",
    "\n",
    "(2) Potential Model Instability: Some predictors show large standard errors ( such as 'smoker' and 'cigs), suggesting estimates and, therefore, problems with the model's reliability. \n",
    "\n",
    "(3) Complexity of the prediction: Accurately predicting low birth weight would require considering additional factors beyond those included in the current analysis. This is especially true since birth weight is a complex issue, and other components, such as genetic factors, socioeconomic status, and environmental influences, may also play significant roles in determining birth weight outcomes."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "<br><h3>Train-Test Split</h3><br>"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 56,
   "metadata": {
    "code_folding": [],
    "deletable": false,
    "editable": false,
    "scrolled": false
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\n",
      "Original Dataset Dimensions\n",
      "---------------------------\n",
      "Observations (Rows): 1648\n",
      "Features  (Columns): 30\n",
      "\n",
      "\n",
      "Training Data (X-side)\n",
      "----------------------\n",
      "Observations (Rows): 1236\n",
      "Features  (Columns): 12\n",
      "\n",
      "\n",
      "Training Data (y-side)\n",
      "----------------------\n",
      "Feature Name:        low_bwght\n",
      "Observations (Rows): 1236\n",
      "\n",
      "\n",
      "Testing Data (X-side)\n",
      "---------------------\n",
      "Observations (Rows): 412\n",
      "Features  (Columns): 12\n",
      "\n",
      "\n",
      "Testing Data (y-side)\n",
      "---------------------\n",
      "Feature Name:        low_bwght\n",
      "Observations (Rows): 412\n"
     ]
    }
   ],
   "source": [
    "#!###########################!#\n",
    "#!# choose your x-variables #!#\n",
    "#!###########################!#\n",
    "x_features = [\n",
    "    'mage',  # Mother's age in years\n",
    "    'meduc',  # Mother's education in years\n",
    "    'monpre',  # Month pregnancy care began\n",
    "    'npvis',  # Total prenatal visits\n",
    "    # 'fage',  # Father's age in years\n",
    "    # 'feduc',  # Father's education in years\n",
    "    'cigs',  # Avg. cigarettes/day by mother\n",
    "    # 'drink',\n",
    "    'mblck',\n",
    "    'fblck',\n",
    "    # 'fage_16_to_30',  # Father's age 16-30\n",
    "    # 'fage_31_to_40',  # Father's age 31-40\n",
    "    # 'fage_41_to_44',  # Father's age 41-44\n",
    "    # 'mage_18_to_25',  # Mother's age 18-25\n",
    "    # 'mage_26_to_30',  # Mother's age 26-30\n",
    "    # 'mage_31_to_44',  # Mother's age 31-44\n",
    "    #'mage_45_to_64',  # Mother's age 45-64\n",
    "    'npvis_under_10',  # Prenatal visits under 10\n",
    "    #'npvis_10_to_12',  # Prenatal visits 10 to 12\n",
    "    #'npvis_13_and_above',  # Prenatal visits 13 and above\n",
    "    'prenatal_care_engagement',  # Prenatal care engagement index\n",
    "    'cigs_mage_interaction',  # Interaction between cigs and mage\n",
    "    'smoker',  # 1 if mother is a smoker\n",
    "    'age_diff',\n",
    "] # this should be a list\n",
    "\n",
    "\n",
    "## ########################### ##\n",
    "## DON'T CHANGE THE CODE BELOW ##\n",
    "## ########################### ##\n",
    "\n",
    "# removing non-numeric columns and missing values\n",
    "x_data = df[x_features].copy().select_dtypes(include=[int, float]).dropna(axis = 0)\n",
    "# ^ BC: \n",
    "# CAREFULLY dateHour is NOT time, its as a STRING\n",
    "# ID: cant let in or itll BREAK your model\n",
    "# everythign thats not numeric - GOES AWAY (yes/no , etc bc will BREAK our model)\n",
    "# thats what this does\n",
    "\n",
    "\n",
    "\n",
    "## ########################### ##\n",
    "## DON'T CHANGE THE CODE BELOW ##\n",
    "## ########################### ##\n",
    "\n",
    "# prepping data for train-test split\n",
    "y_data = df['low_bwght']  # to use 'low_bwght' as the target variable\n",
    "\n",
    "\n",
    "# removing non-numeric columns and missing values\n",
    "x_data = df[x_features].copy().select_dtypes(include=[int, float]).dropna(axis = 1)\n",
    "\n",
    "\n",
    "# storing remaining x_features after the step above\n",
    "x_features = list(x_data.columns)\n",
    "\n",
    "\n",
    "# train-test split (to validate the model)\n",
    "x_train, x_test, y_train, y_test = train_test_split(x_data, \n",
    "                                                    y_data, \n",
    "                                                    test_size    = 0.25,\n",
    "                                                    random_state = 702,\n",
    "                                                    stratify=target_variable)\n",
    "\n",
    "\n",
    "# results of train-test split\n",
    "print(f\"\"\"\n",
    "Original Dataset Dimensions\n",
    "---------------------------\n",
    "Observations (Rows): {df.shape[0]}\n",
    "Features  (Columns): {df.shape[1]}\n",
    "\n",
    "\n",
    "Training Data (X-side)\n",
    "----------------------\n",
    "Observations (Rows): {x_train.shape[0]}\n",
    "Features  (Columns): {x_train.shape[1]}\n",
    "\n",
    "\n",
    "Training Data (y-side)\n",
    "----------------------\n",
    "Feature Name:        {y_train.name}\n",
    "Observations (Rows): {y_train.shape[0]}\n",
    "\n",
    "\n",
    "Testing Data (X-side)\n",
    "---------------------\n",
    "Observations (Rows): {x_test.shape[0]}\n",
    "Features  (Columns): {x_test.shape[1]}\n",
    "\n",
    "\n",
    "Testing Data (y-side)\n",
    "---------------------\n",
    "Feature Name:        {y_test.name}\n",
    "Observations (Rows): {y_test.shape[0]}\"\"\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 57,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "766"
      ]
     },
     "execution_count": 57,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "(y_data == 1).sum()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "After processing, the dataset comprises 1648 observations (rows) and 31 features (columns), representing a rich collection of data points and attributes. Specifically, for training, a subset of 1236 observations with 10 selected features has been utilized for the X-side (independent variables), along with a single feature named 'low_bwght' for the y-side (dependent variable). "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 58,
   "metadata": {
    "deletable": false,
    "editable": false,
    "scrolled": false
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\n",
      "/--------------------------\\\n",
      "|Explanatory Variable Sets |\n",
      "\\--------------------------/\n",
      "\n",
      "Full Model:\n",
      "-----------\n",
      "['mage', 'meduc', 'monpre', 'npvis', 'fage', 'feduc', 'cigs', 'male', 'mwhte', 'mblck', 'moth', 'fwhte', 'fblck', 'foth', 'bwght', 'set', 'low_bwght', 'smoker', 'std_npvis', 'low_npvis', 'prenatal_care_engagement', 'npvis_under_10', 'npvis_10_to_12', 'npvis_13_and_above', 'fage_16_to_30', 'fage_31_to_40', 'fage_41_to_44', 'mage_18_to_25', 'mage_26_to_30', 'mage_31_to_44', 'mage_45_to_64', 'cigs_mage_interaction', 'cigs_fage_interaction']\n",
      "\n",
      "Significant p-value Model:\n",
      "--------------------------------\n",
      "['cigs', 'mage_18_to_25', 'fage_16_to_30', 'npvis', 'npvis_under_10', 'prenatal_care_engagement', 'smoker', 'mage', 'fage']\n",
      "\n"
     ]
    }
   ],
   "source": [
    "# creating a dictionary to store candidate models\n",
    "\n",
    "candidate_dict = {\n",
    "\n",
    " # full model\n",
    " 'logit_full'   : ['mage', 'meduc', 'monpre', 'npvis', 'fage', 'feduc', 'cigs', 'male', \n",
    "                'mwhte', 'mblck', 'moth', 'fwhte', 'fblck', 'foth', 'bwght', 'set', \n",
    "                'low_bwght', 'smoker', 'std_npvis', 'low_npvis', \n",
    "                'prenatal_care_engagement', 'npvis_under_10', 'npvis_10_to_12', \n",
    "                'npvis_13_and_above', 'fage_16_to_30', 'fage_31_to_40', 'fage_41_to_44', \n",
    "                'mage_18_to_25', 'mage_26_to_30', 'mage_31_to_44', 'mage_45_to_64', \n",
    "                'cigs_mage_interaction', 'cigs_fage_interaction'],\n",
    " \n",
    "\n",
    " # p-value significant variables only\n",
    " 'logit_sig'  : ['cigs', 'mage_18_to_25', 'fage_16_to_30', 'npvis', 'npvis_under_10', \n",
    "                      'prenatal_care_engagement', 'smoker', 'mage', 'fage']\n",
    "\n",
    "}\n",
    "\n",
    "# printing candidate variable sets\n",
    "print(f\"\"\"\n",
    "/--------------------------\\\\\n",
    "|Explanatory Variable Sets |\n",
    "\\\\--------------------------/\n",
    "\n",
    "Full Model:\n",
    "-----------\n",
    "{candidate_dict['logit_full']}\n",
    "\n",
    "Significant p-value Model:\n",
    "--------------------------------\n",
    "{candidate_dict['logit_sig']}\n",
    "\"\"\")"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "<hr style=\"height:.9px;border:none;color:#333;background-color:#333;\" /><br>\n",
    "\n",
    "<h2>Part III: Candidate Modeling</h2><br>\n",
    "\n",
    "<h3> (1) Random Forest CLassification Model </h3>\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 59,
   "metadata": {
    "deletable": false,
    "editable": false,
    "scrolled": false
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Training ACCURACY: 0.61084142394822\n",
      "Testing  ACCURACY: 0.5703883495145631\n",
      "Train-Test Gap: 0.04045307443365698\n",
      "AUC Score: 0.5513257575757575\n",
      "                     Feature  Importance\n",
      "0                       mage    0.215277\n",
      "8   prenatal_care_engagement    0.176472\n",
      "11                  age_diff    0.148212\n",
      "3                      npvis    0.117975\n",
      "1                      meduc    0.105640\n",
      "2                     monpre    0.066447\n",
      "4                       cigs    0.060291\n",
      "9      cigs_mage_interaction    0.047852\n",
      "10                    smoker    0.038844\n",
      "7             npvis_under_10    0.017655\n"
     ]
    },
    {
     "data": {
      "image/png": "",
      "text/plain": [
       "<Figure size 1000x600 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "# Re-Calling/Importing some of the Packages\n",
    "from sklearn.ensemble import GradientBoostingClassifier\n",
    "from sklearn.linear_model import RidgeClassifier\n",
    "from sklearn.preprocessing import StandardScaler\n",
    "from sklearn.ensemble import RandomForestClassifier\n",
    "\n",
    "######################################## (1) Candidate Modeling ######################################## \n",
    "######################################## Random Forest classification ######################################## \n",
    "\n",
    "# Naming the model\n",
    "model_name = 'Random Forest Classfier'\n",
    "\n",
    "\n",
    "# Setting Hyperparamater\n",
    "rf = RandomForestClassifier(n_estimators     = 350,\n",
    "                                    criterion        = 'gini',\n",
    "                                    max_depth        = None,\n",
    "                                    min_samples_leaf = 40,\n",
    "                                    bootstrap        = True,\n",
    "                                    warm_start       = False,\n",
    "                                    random_state     = 702)\n",
    "\n",
    "\n",
    "# FITTING the training data\n",
    "rf_fit = rf.fit(x_train, y_train)\n",
    "\n",
    "\n",
    "# PREDICTING based on the testing set\n",
    "rf_fit_pred = rf_fit.predict(x_test)\n",
    "\n",
    "\n",
    "# SCORING the results\n",
    "print('Training ACCURACY:', rf_fit.score(x_train, y_train))\n",
    "print('Testing  ACCURACY:', rf_fit.score(x_test , y_test ))\n",
    "print('Train-Test Gap:', \n",
    "      abs(rf_fit.score(x_train, y_train) - rf_fit.score(x_test , y_test )))\n",
    "\n",
    "\n",
    "\n",
    "# AUC score\n",
    "print('AUC Score:', roc_auc_score(y_true  = y_test,\n",
    "                                          y_score = rf_fit_pred))\n",
    "\n",
    "# Selecting the feature importances\n",
    "feature_importances = rf_fit.feature_importances_\n",
    "\n",
    "# Creating a DataFrame to store feature importances\n",
    "importance_df = pd.DataFrame({'Feature': x_train.columns, 'Importance': feature_importances})\n",
    "\n",
    "# Sorting the DataFrame by importance values\n",
    "sorted_importances = importance_df.sort_values(by='Importance', ascending=False)\n",
    "\n",
    "# Printing the top 10 most important features\n",
    "print(sorted_importances.head(10))\n",
    "\n",
    "# Plotting feature importances\n",
    "plt.figure(figsize=(10, 6))\n",
    "plt.barh(sorted_importances['Feature'][:10][::-1], \n",
    "         sorted_importances['Importance'][:10][::-1])\n",
    "plt.xlabel(\"Importance\")\n",
    "plt.ylabel(\"Feature\")\n",
    "plt.title(\"Top 10 Most Important Features\")\n",
    "plt.tight_layout()  \n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 60,
   "metadata": {
    "code_folding": [
     0
    ],
    "scrolled": false
   },
   "outputs": [],
   "source": [
    "# # Unpacking the confusion matrix\n",
    "# logreg_tn, logreg_fp, logreg_fn, logreg_tp = confusion_matrix(y_true = y_test, y_pred = model_pred).ravel()\n",
    "\n",
    "# # Printing each result one-by-one\n",
    "# print(f\"\"\"\n",
    "# Model Name: {model_name}\n",
    "# -----------------------------------\n",
    "# True Negatives : {logreg_tn}\n",
    "# False Positives: {logreg_fp}\n",
    "# False Negatives: {logreg_fn}\n",
    "# True Positives : {logreg_tp}\n",
    "# \"\"\")\n",
    "\n",
    "# ########################################\n",
    "# # Confusiom Matrix visual\n",
    "# ########################################\n",
    "        \n",
    "# def visual_cm(true_y, pred_y, labels):\n",
    "#     cm = confusion_matrix(true_y, pred_y)\n",
    "#     plt.figure(figsize=(5,5))\n",
    "#     sns.heatmap(cm, annot=True, fmt=\"d\", linewidths=.5, square = True, cmap = 'Blues', \n",
    "#                 xticklabels=labels, yticklabels=labels)\n",
    "#     plt.ylabel('Actual label')\n",
    "#     plt.xlabel('Predicted label')\n",
    "#     plt.title('Confusion Matrix', size = 15)\n",
    "\n",
    "# #Using visual_cm function to add the visualization\n",
    "# visual_cm(true_y = y_test, pred_y = model_pred, labels = ['Not Low Birth Weight', 'Low Birth Weight'])"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "**Insights**\n",
    "\n",
    "The Random Forest Classification model demonstrates a training accuracy of approximately 61.25% and a testing accuracy of about 58.01%.\n",
    "\n",
    "- The model shows a train-test gap of 3.24%, indicating a slight overfitting to the training data but with a relatively small discrepancy between training and testing performance.\n",
    "\n",
    "- The AUC score is 0.5631, slightly above the threshold for random chance, suggesting that the model has a limited ability to distinguish between classes effectively.\n",
    "\n",
    "- Key features contributing to the model's predictions include the mother's age (mage), prenatal care engagement, the age difference between the parents (age_diff), and the number of prenatal visits (npvis).\n",
    "\n",
    "From the feature importance, it is evident that the mother's age has the highest influence on model predictions, which aligns with medical understanding that maternal age can impact birth outcomes. \n",
    "\n",
    "However, the confusion matrix would suggest the model has a tendecy to misclassify low birth weight cases, with a significant number of false negatives. This misclassification could be critical in a clinical setting, as it may result in missing out on identifying at-risk infants who require more immediate and intensive care. \n",
    "\n",
    "Therefore, while the model performs moderately well in general, its clinical utility might be limited without improvements in its sensitivity to low birth weight predictions."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Question 4:\n",
    "\n",
    "Which two features in your machine learning model had the largest impact on birthweight? Present one actionable insight for each of these.\n",
    "\n",
    "Based on the importance of the feature provided by the machine learning model, the two features with the most significant impact on birthweight are \"mage\" (Mother's Age) and \"prenatal_care_engagement\" (Engagement in prenatal care by summing npvis and monpre).\n",
    "\n",
    "Mother's Age (mage): This feature has the highest importance score, indicating its significant impact on birthweight. One actionable insight based on this finding is to tailor prenatal care programs to meet the specific needs of women in different age groups. For instance, older mothers may benefit from additional monitoring and support to address age-related pregnancy risks, such as gestational diabetes or hypertension. In contrast, younger mothers may require targeted interventions to promote healthy behaviors and access to prenatal care, addressing potential challenges associated with adolescent pregnancy. Additionally, healthcare providers can offer personalized counseling and resources to empower mothers of all ages to optimize their prenatal health and birth outcomes.\n",
    "\n",
    "Prenatal Care Engagement (prenatal_care_engagement): This feature indicates the importance of consistent engagement in prenatal care for healthy birth outcomes. An actionable insight could involve implementing initiatives to improve access to prenatal care services and encourage early and regular attendance. This could include outreach programs to underserved communities, providing transportation assistance, and offering incentives for attending prenatal appointments. Especially in the U.S., where access to health care is not granted, it would be helpful to promote that kind of program to help pregnant women have access to the help they need. Additionally, healthcare providers can offer comprehensive prenatal care services that address expectant mothers' physical, emotional, and educational needs, promoting optimal maternal and fetal health throughout pregnancy. By prioritizing prenatal care engagement, healthcare systems can work towards reducing the incidence of low birth weight and improving overall birth outcomes."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "<h3> (2) Ridge Classification Model </h3>"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 61,
   "metadata": {
    "code_folding": [],
    "deletable": false,
    "editable": false
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Model Name: Ridge Classification\n",
      "Training ACCURACY: 0.5776699029126213\n",
      "Testing ACCURACY: 0.5606796116504854\n",
      "Train-Test Gap: 0.016990291262135915\n",
      "Recall: 0.16145833333333334\n",
      "Confusion Matrix: [[200  20]\n",
      " [161  31]]\n"
     ]
    }
   ],
   "source": [
    "######################################## (2) Candidate Modeling ######################################## \n",
    "######################################## Ridge Classification Model ######################################## \n",
    "\n",
    "# Import package\n",
    "from sklearn.linear_model import RidgeClassifier\n",
    "\n",
    "# Naming the model\n",
    "model_name = 'Ridge Classification'\n",
    "\n",
    "# INSTANTIATING the model object with hyperparameters\n",
    "ridge_model = RidgeClassifier(alpha=1.0, \n",
    "                              fit_intercept=True, \n",
    "                              copy_X=True, \n",
    "                              max_iter=None, \n",
    "                              tol=0.001, \n",
    "                              class_weight=None, \n",
    "                              solver='auto', \n",
    "                              random_state=702)\n",
    "\n",
    "# FITTING the training data\n",
    "ridge_fit = ridge_model.fit(x_train, y_train)\n",
    "\n",
    "# PREDICTING based on the testing set\n",
    "ridge_pred = ridge_fit.predict(x_test)\n",
    "\n",
    "# SCORING the results\n",
    "model_train_score = ridge_fit.score(x_train, y_train)\n",
    "model_test_score = ridge_fit.score(x_test, y_test)\n",
    "model_gap = abs(model_train_score - model_test_score)\n",
    "\n",
    "# NOTE: RidgeClassifier does not support predict_proba() for AUC score calculation\n",
    "# Therefore, the AUC score will not be calculated for Ridge Classification\n",
    "\n",
    "# Dynamically printing results\n",
    "def print_model_summary(model_name, model_train_score, model_test_score, model_gap):\n",
    "    print(f\"Model Name: {model_name}\")\n",
    "    print(f\"Training ACCURACY: {model_train_score}\")\n",
    "    print(f\"Testing ACCURACY: {model_test_score}\")\n",
    "    print(f\"Train-Test Gap: {model_gap}\")\n",
    "\n",
    "print_model_summary(model_name, model_train_score, model_test_score, model_gap)\n",
    "\n",
    "print(f\"Recall: {recall_score(y_test, ridge_pred)}\")\n",
    "\n",
    "print(f\"Confusion Matrix: {confusion_matrix(y_test, ridge_pred)}\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 62,
   "metadata": {
    "deletable": false,
    "editable": false,
    "scrolled": true
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\n",
      "Model Name: Ridge Classification\n",
      "-----------------------------------\n",
      "True Negatives : 200\n",
      "False Positives: 20\n",
      "False Negatives: 161\n",
      "True Positives : 31\n",
      "\n"
     ]
    }
   ],
   "source": [
    "# Unpacking the confusion matrix for Ridge Classification\n",
    "ridge_tn, ridge_fp, ridge_fn, ridge_tp = confusion_matrix(y_true=y_test, y_pred=ridge_pred).ravel()\n",
    "\n",
    "# Printing each result one-by-one for Ridge Classification\n",
    "print(f\"\"\"\n",
    "Model Name: {model_name}\n",
    "-----------------------------------\n",
    "True Negatives : {ridge_tn}\n",
    "False Positives: {ridge_fp}\n",
    "False Negatives: {ridge_fn}\n",
    "True Positives : {ridge_tp}\n",
    "\"\"\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 63,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "array([[200,  20],\n",
       "       [161,  31]])"
      ]
     },
     "execution_count": 63,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "confusion_matrix(y_true=y_test, y_pred=ridge_pred)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "**Insights :**\n",
    "\n",
    "The Ridge Classification model achieves approximately 62.14% accuracy on the training data and 60.92% on the test data.\n",
    "There's a discrepancy of 1.22% between the model's performance on the training and testing sets.\n",
    "The model's ability to distinguish between low birth weight and non-low birth weight cases (UC score) is  0.5374.\n",
    "The confusion matrix shows the same issue as the other models, meaning that this model identifies around 227 cases where babies do not have low birth weight but struggles with identifying actual low birth weight cases, with 143 false negatives."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "<h3> (3) Logistic Regression Model</h3>"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 64,
   "metadata": {
    "deletable": false,
    "editable": false,
    "scrolled": true
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Model Name: Logistic Regression\n",
      "Training ACCURACY: 0.5671521035598706\n",
      "Testing ACCURACY: 0.5558252427184466\n",
      "Train-Test Gap: 0.01132686084142398\n",
      "AUC Score: 0.5171875\n",
      "Recall: 0.19270833333333334\n",
      "Confusion Matrix: [[192  28]\n",
      " [155  37]]\n"
     ]
    }
   ],
   "source": [
    "######################################## (3) Candidate Modeling ######################################## \n",
    "######################################## Logistic Regression ######################################## \n",
    "\n",
    "# Naming the model\n",
    "model_name = 'Logistic Regression'\n",
    "\n",
    "# Model type with hyperparameters\n",
    "model = sklearn.linear_model.LogisticRegression(solver='lbfgs',\n",
    "                                                C=1, \n",
    "                                                random_state=100)\n",
    "\n",
    "# FITTING the training data\n",
    "model_fit = model.fit(x_train, y_train)\n",
    "\n",
    "# PREDICTING on new data\n",
    "model_pred = model.predict(x_test)  # This step defines 'logreg_pred'\n",
    "\n",
    "# SCORING the results\n",
    "model_train_score = model.score(x_train, y_train)\n",
    "model_test_score = model.score(x_test, y_test)\n",
    "model_gap = abs(model_train_score - model_test_score)\n",
    "auc_score = roc_auc_score(y_true=y_test, y_score=model.predict_proba(x_test)[:, 1])\n",
    "\n",
    "# Dynamically printing results\n",
    "def print_model_summary(model_name, model_train_score, model_test_score, model_gap, auc_score):\n",
    "    print(f\"Model Name: {model_name}\")\n",
    "    print(f\"Training ACCURACY: {model_train_score}\")\n",
    "    print(f\"Testing ACCURACY: {model_test_score}\")\n",
    "    print(f\"Train-Test Gap: {model_gap}\")\n",
    "    print(f\"AUC Score: {auc_score}\")\n",
    "\n",
    "print_model_summary(model_name, model_train_score, model_test_score, model_gap, auc_score)\n",
    "\n",
    "print(f\"Recall: {recall_score(y_test, model_pred)}\")\n",
    "\n",
    "print(f\"Confusion Matrix: {confusion_matrix(y_test, model_pred)}\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 65,
   "metadata": {
    "deletable": false,
    "editable": false
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "AUC:       0.532717803030303\n",
      "Precision: 0.5692307692307692\n",
      "Recall:    0.19270833333333334\n",
      "\n"
     ]
    }
   ],
   "source": [
    "# Preparing AUC, precision, and recall\n",
    "auc = roc_auc_score(y_true = y_test, y_score = model_pred)\n",
    "precision = precision_score(y_true = y_test, y_pred = model_pred)\n",
    "recall = recall_score(y_true = y_test, y_pred = model_pred)\n",
    "\n",
    "# Dynamically printing metrics\n",
    "print(f\"\"\"\\\n",
    "AUC:       {auc}\n",
    "Precision: {precision}\n",
    "Recall:    {recall}\n",
    "\"\"\")"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "**Insights:**\n",
    "\n",
    "The Logistic Regression model achieves a training accuracy of approximately 62.22% and a testing accuracy of 60.68%.\n",
    "\n",
    "- There is a disparity of 1.54% between the model's performance on the training and testing sets.\n",
    "- The AUC score, measuring the model's ability to distinguish between classes, is around 0.5428.\n",
    "- Further metrics reveal an AUC score of approximately 0.5369, a precision of 0.549, and a recall of 0.1677, which suggests that the model's ability to discriminate between positive and negative cases is only slightly better than random guessing. \n",
    "\n",
    "\n",
    "<h3> (4) GBM Classification Model </h3>"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 66,
   "metadata": {
    "deletable": false,
    "editable": false,
    "scrolled": true
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Training ACCURACY: 0.75\n",
      "Testing ACCURACY : 0.5631067961165048\n",
      "Train-Test Gap   : 0.18689320388349517\n",
      "AUC Score        : 0.5445075757575757\n",
      "Recall: 0.2708333333333333\n",
      "Confusion Matrix: [[180  40]\n",
      " [140  52]]\n"
     ]
    }
   ],
   "source": [
    "######################################## (1) Candidate Modeling ######################################## \n",
    "######################################## GBM Classification Model ######################################## \n",
    "\n",
    "# INSTANTIATING the model object with hyperparameters tuning\n",
    "gbm = GradientBoostingClassifier(loss='exponential',\n",
    "                                 learning_rate=0.001,\n",
    "                                 n_estimators=450,\n",
    "                                 criterion='friedman_mse',\n",
    "                                 max_depth=10,\n",
    "                                 warm_start=False,\n",
    "                                 random_state=702)\n",
    "\n",
    "# FITTING the model to the training data\n",
    "gbm_fit = gbm.fit(x_train, y_train)\n",
    "\n",
    "# PREDICTING based on the testing set\n",
    "gbm_pred = gbm_fit.predict(x_test)\n",
    "\n",
    "# Calculating training and testing accuracy\n",
    "train_accuracy = gbm_fit.score(x_train, y_train)\n",
    "test_accuracy = gbm_fit.score(x_test, y_test)\n",
    "\n",
    "# SCORING the results\n",
    "print('Training ACCURACY:', train_accuracy)\n",
    "print('Testing ACCURACY :', test_accuracy)\n",
    "\n",
    "# Printing the gap between training and testing accuracy\n",
    "print('Train-Test Gap   :', abs(train_accuracy - test_accuracy))\n",
    "\n",
    "# AUC Score\n",
    "print('AUC Score        :', roc_auc_score(y_true=y_test, y_score=gbm_pred))\n",
    "\n",
    "print(f\"Recall: {recall_score(y_test, gbm_pred)}\")\n",
    "\n",
    "print(f\"Confusion Matrix: {confusion_matrix(y_test, gbm_pred)}\")\n",
    "\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "**Insights:**\n",
    "\n",
    "The Gradient Boosting Classifier model achieves a training accuracy of approximately 72.57% and a testing accuracy of 59.47%.\n",
    "\n",
    "- There is a notable disparity of 13.11% between the model's performance on the training and testing sets, which could indicate potential overfitting. This means the model learns to memorize the training data rather than generalize it to unseen data.\n",
    "- The AUC score, measuring the model's ability to distinguish between classes, is around 0.5238, which again shows the same issue I faced in the other models. "
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "<br>\n",
    "<h3>Model Results</h3><br>\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 67,
   "metadata": {
    "code_folding": [],
    "scrolled": true
   },
   "outputs": [],
   "source": [
    "### FINAL 'CHOSEN ' MODEL ###\n",
    "\n",
    "# Initializing the StandardScaler\n",
    "#scaler = StandardScaler()\n",
    "\n",
    "# Fitting the scaler to your training data and transforming both training and testing sets\n",
    "#x_train_scaled = scaler.fit_transform(x_train[x_features])\n",
    "#x_test_scaled = scaler.transform(x_test[x_features])\n",
    "\n",
    "# Updating your training and testing sets with the scaled data\n",
    "#x_train.loc[:, x_features] = x_train_scaled\n",
    "#x_test.loc[:, x_features] = x_test_scaled\n",
    "\n",
    "\n",
    "#x_train[x_features] = scaler.fit_transform(x_train)\n",
    "#x_test[x_features] = scaler.transform(x_test)\n",
    "\n",
    "# model\n",
    "#model_name = 'Logistic Regression'\n",
    "#model = sklearn.linear_model.LogisticRegression(solver='lbfgs',\n",
    "                                                #C=1, \n",
    "                                                #random_state=100)\n",
    "## ########################### ##\n",
    "## DON'T CHANGE THE CODE BELOW ##\n",
    "## ########################### ##\n",
    "\n",
    "# FITTING to the training data\n",
    "#model_fit = model.fit(x_train, y_train)\n",
    "\n",
    "\n",
    "# PREDICTING on new data\n",
    "#model_pred = model.predict(x_test)\n",
    "\n",
    "\n",
    "# SCORING the results\n",
    "#model_train_score = model.score(x_train, y_train)\n",
    "#model_test_score  = model.score(x_test, y_test)\n",
    "#model_gap         = abs(model_train_score - model_test_score)\n",
    "  \n",
    "\n",
    "# dynamically printing results\n",
    "#model_summary =  f\"\"\"\\\n",
    "#Model Name:     {model_name}\n",
    "#Train_Score:    {model_train_score}\n",
    "#Test_Score:     {model_test_score}\n",
    "#Train-Test Gap: {model_gap}\n",
    "#\"\"\"\n",
    "\n",
    "#print(model_summary)\n",
    "\n",
    "#print(f\"Recall: {recall_score(y_test, model_pred)}\")\n",
    "#print(f\"Precision: {precision_score(y_true = y_test, y_pred = rf_fit_pred)}\")\n",
    "\n",
    "#print(f\"Confusion Matrix: {confusion_matrix(y_test, model_pred)}\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 68,
   "metadata": {
    "deletable": false,
    "editable": false
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Training ACCURACY: 0.75\n",
      "Testing ACCURACY : 0.5631067961165048\n",
      "Train-Test Gap   : 0.18689320388349517\n",
      "AUC Score        : 0.5445075757575757\n",
      "Recall: 0.2708333333333333\n",
      "Confusion Matrix: [[180  40]\n",
      " [140  52]]\n"
     ]
    }
   ],
   "source": [
    "################################## FINAL MODEL RESULT ##################################\n",
    "\n",
    "gbm = GradientBoostingClassifier(loss='exponential',\n",
    "                                 learning_rate=0.001,\n",
    "                                 n_estimators=450,\n",
    "                                 criterion='friedman_mse',\n",
    "                                 max_depth=10,\n",
    "                                 warm_start=False,\n",
    "                                 random_state=702)\n",
    "\n",
    "# FITTING the model to the training data\n",
    "model_fit = gbm.fit(x_train, y_train)\n",
    "\n",
    "# PREDICTING based on the testing set\n",
    "model_pred = gbm_fit.predict(x_test)\n",
    "\n",
    "# Calculating training and testing accuracy\n",
    "train_accuracy = gbm_fit.score(x_train, y_train)\n",
    "test_accuracy = gbm_fit.score(x_test, y_test)\n",
    "\n",
    "# SCORING the results\n",
    "print('Training ACCURACY:', train_accuracy)\n",
    "print('Testing ACCURACY :', test_accuracy)\n",
    "\n",
    "# Printing the gap between training and testing accuracy\n",
    "print('Train-Test Gap   :', abs(train_accuracy - test_accuracy))\n",
    "\n",
    "# AUC Score\n",
    "print('AUC Score        :', roc_auc_score(y_true=y_test, y_score=model_pred))\n",
    "\n",
    "print(f\"Recall: {recall_score(y_test, model_pred)}\")\n",
    "\n",
    "print(f\"Confusion Matrix: {confusion_matrix(y_test, model_pred)}\")\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Question 5:\n",
    "\n",
    "Present your final model's confusion matrix and explain what each error means. Furthermore, explain which error is being controlled for given the cohort's focus on correctly predicting low birthweight, as well as why this error is more important to control than the other error.\n",
    "\n",
    "\n",
    "The confusion matrix tells us how well our model predicts low birth weight. Here's what each part means:\n",
    "True Positives (TP) are cases where the model correctly predicts low birth weight. In other words, when the model gets it right. \n",
    "False Positives (FP) are cases where the model predicts low birth weight, but in reality, the baby's birth weight is average. It's like a false alarm - the model thought there was a problem when there wasn't.\n",
    "False Negatives (FN) are cases where the model fails to predict low birth weight, but in reality, the baby's birth weight is low. It's like missing a problem - the model didn't catch something important.\n",
    "True Negatives (TN): These are cases where the model correctly predicts average birth weight. It's like confirming that everything is fine, and the model got it right.\n",
    "In this confusion matrix case, we got 52 true positives, 40 false positives, 140 false negatives, and 180 true negatives.\n",
    "\n",
    "Controlling false negatives is vital because it means ensuring our model doesn't overlook any instances where babies might have low birth weight. When our model misses these cases, it's like ignoring important warning signs, which can lead to serious health issues for the babies. Just like missing a red light can cause accidents on the road, not catching low birth weight can result in problems for the babies' health. By minimizing false negatives, we can detect potential problems early and provide timely care and support to improve the health outcomes for babies and mothers. In essence, focusing on reducing false negatives aligns with our ultimate goal of safeguarding the health and well-being of newborns and their families."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "deletable": false,
    "editable": false,
    "run_control": {
     "frozen": true
    }
   },
   "source": [
    "<br>"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "<hr style=\"height:.9px;border:none;color:#333;background-color:#333;\" /><br>\n",
    "\n",
    "<h2>Part IV: Preparing Submission File for Kaggle</h2><br>\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "deletable": false,
    "editable": false,
    "run_control": {
     "frozen": true
    }
   },
   "source": [
    "<br>\n",
    "<h3>Creating the Kaggle File</h3><br>"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 69,
   "metadata": {
    "deletable": false,
    "editable": false
   },
   "outputs": [],
   "source": [
    "# x-data\n",
    "x_data_kaggle = kaggle_data[x_features].copy()\n",
    "\n",
    "\n",
    "# y-data\n",
    "y_variable = 'low_bwght'  # Set the y_variable to 'low_bwght'\n",
    "y_data_kaggle = kaggle_data[y_variable]\n",
    "\n",
    "# Fitting model from above to the Kaggle test data\n",
    "kaggle_predictions = model.predict(x_data_kaggle)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "deletable": false,
    "editable": false,
    "run_control": {
     "frozen": true
    }
   },
   "source": [
    "<br>"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 70,
   "metadata": {
    "deletable": false,
    "editable": false
   },
   "outputs": [],
   "source": [
    "## Kaggle Submission File ##\n",
    "\n",
    "# x-data\n",
    "x_data_kaggle = kaggle_data[x_features].copy()\n",
    "\n",
    "# y-data\n",
    "y_variable = 'low_bwght' # Set the y_variable to 'low_bwght'\n",
    "y_data_kaggle = kaggle_data[y_variable]\n",
    "\n",
    "# Fitting model from above to the Kaggle test data\n",
    "kaggle_predictions = model.predict(x_data_kaggle)\n",
    "\n",
    "# Kaggle Submission File\n",
    "model_predictions = {y_variable : kaggle_predictions}\n",
    "\n",
    "# Converting predictions into df\n",
    "model_pred_df = pd.DataFrame(data = model_predictions,\n",
    "                             index = df_test.index)\n",
    "\n",
    "# Name the .csv file\n",
    "model_pred_df.to_csv(path_or_buf = \"./OMGDIDITWORK.csv\",\n",
    "                     index       = True,\n",
    "                     index_label = 'ID')\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "deletable": false,
    "editable": false,
    "run_control": {
     "frozen": true
    }
   },
   "source": [
    "<br>"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## References:\n",
    "\n",
    "Stanford Children's Health. (n.d.). Low birth weight. Retrieved from https://www.stanfordchildrens.org//en/topic/default?id=low-birth-weight-90-P02382\n",
    "\n",
    "Datar, A., Jacknowitz, A., & Grossman, M. (2016). The Effects of Prenatal Care on Birth Outcomes: Reconciling a Messy Literature. Journal of Health Economics, 45, 202–212. https://doi.org/10.1016/j.jhealeco.2015.10.006\n",
    "\n",
    "Haeri, S., & Shauer, M. (2020). Maternal weight gain in pregnancy and risk of small for gestational age birth: \n",
    "A population-based case–control study. BMC Pregnancy and Childbirth, 20(1), 1–8. https://doi.org/10.1186/s12884-020-03445-2\n",
    "\n",
    "Hwang, S. S., & Chang, J. (2016). Can health promotion programs save Medicare money? Projected savings from increases in physical activity and healthier eating. Health Services Research, 51(4), 1084–1096. https://www.ncbi.nlm.nih.gov/pmc/articles/PMC4767570/\n",
    "\n",
    "Kramer, M. S., Olivier, M., McLean, F. H., & Willis, D. M. (1995). Impact of intrauterine growth retardation and body proportionality on fetal and neonatal outcome. Pediatrics, 96(3), 618–623. https://pubmed.ncbi.nlm.nih.gov/7633858/\n",
    "\n",
    "Office of Minority Health. (n.d.). Infant mortality and African Americans. Retrieved from https://minorityhealth.hhs.gov/infant-mortality-and-african-americans#:~:text=Non-Hispanic%20blacks%2FAfrican%20Americans,to%20non-Hispanic%20white%20infants.\n",
    "\n",
    "Centers for Disease Control and Prevention. (2020, February 5). Health Effects of Smoking and Pregnancy. Retrieved from https://www.cdc.gov/tobacco/basic_information/health_effects/pregnancy/index.htm#:~:text=One%20in%20every%20five%20babies,have%20lower%20birth%20weight%20babies.\n",
    "\n",
    "OpenAI. (n.d.). Retrieved from https://chat.openai.com/c/23184ccc-5be5-4dc2-91ae-dd3c28e788fc\n",
    "\n",
    "Grammarly. (n.d.). Retrieved from https://app.grammarly.com/\n",
    "\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "deletable": false,
    "editable": false,
    "run_control": {
     "frozen": true
    }
   },
   "source": [
    "<hr style=\"height:.9px;border:none;color:#333;background-color:#333;\" /><br>\n",
    "\n",
    "~~~\n",
    "\n",
    "  _    _                           __  __           _      _ _             _ \n",
    " | |  | |                         |  \\/  |         | |    | (_)           | |\n",
    " | |__| | __ _ _ __  _ __  _   _  | \\  / | ___   __| | ___| |_ _ __   __ _| |\n",
    " |  __  |/ _` | '_ \\| '_ \\| | | | | |\\/| |/ _ \\ / _` |/ _ \\ | | '_ \\ / _` | |\n",
    " | |  | | (_| | |_) | |_) | |_| | | |  | | (_) | (_| |  __/ | | | | | (_| |_|\n",
    " |_|  |_|\\__,_| .__/| .__/ \\__, | |_|  |_|\\___/ \\__,_|\\___|_|_|_| |_|\\__, (_)\n",
    "              | |   | |     __/ |                                     __/ |  \n",
    "              |_|   |_|    |___/                                     |___/   \n",
    "\n",
    "                                                            \n",
    "\n",
    "~~~\n",
    "\n",
    "<hr style=\"height:.9px;border:none;color:#333;background-color:#333;\" />"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "deletable": false,
    "editable": false,
    "run_control": {
     "frozen": true
    }
   },
   "source": [
    "<br>"
   ]
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3 (ipykernel)",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.11.5"
  },
  "toc": {
   "base_numbering": 1,
   "nav_menu": {},
   "number_sections": false,
   "sideBar": true,
   "skip_h1_title": false,
   "title_cell": "Table of Contents",
   "title_sidebar": "Contents",
   "toc_cell": false,
   "toc_position": {
    "height": "calc(100% - 180px)",
    "left": "10px",
    "top": "150px",
    "width": "288px"
   },
   "toc_section_display": true,
   "toc_window_display": false
  },
  "varInspector": {
   "cols": {
    "lenName": 16,
    "lenType": 16,
    "lenVar": 40
   },
   "kernels_config": {
    "python": {
     "delete_cmd_postfix": "",
     "delete_cmd_prefix": "del ",
     "library": "var_list.py",
     "varRefreshCmd": "print(var_dic_list())"
    },
    "r": {
     "delete_cmd_postfix": ") ",
     "delete_cmd_prefix": "rm(",
     "library": "var_list.r",
     "varRefreshCmd": "cat(var_dic_list()) "
    }
   },
   "types_to_exclude": [
    "module",
    "function",
    "builtin_function_or_method",
    "instance",
    "_Feature"
   ],
   "window_display": false
  }
 },
 "nbformat": 4,
 "nbformat_minor": 2
}
